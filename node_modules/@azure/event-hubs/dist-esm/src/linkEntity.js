// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import uuid from "uuid/v4";
import { defaultLock, SharedKeyCredential, Constants, TokenType } from "@azure/core-amqp";
import * as log from "./log";
/**
 * Describes the base class for entities like EventHub Sender, Receiver and Management link.
 * @internal
 * @ignore
 * @class LinkEntity
 */
export class LinkEntity {
    /**
     * Creates a new LinkEntity instance.
     * @ignore
     * @constructor
     * @param context The connection context.
     * @param [options] Options that can be provided while creating the LinkEntity.
     */
    constructor(context, options) {
        /**
         * @property isConnecting Indicates whether the link is in the process of connecting
         * (establishing) itself. Default value: `false`.
         */
        this.isConnecting = false;
        if (!options)
            options = {};
        this._context = context;
        this.address = options.address || "";
        this.audience = options.audience || "";
        this.name = `${options.name}-${uuid()}`;
        this.partitionId = options.partitionId;
    }
    /**
     * Negotiates cbs claim for the LinkEntity.
     * @ignore
     * @protected
     * @param [setTokenRenewal] Set the token renewal timer. Default false.
     * @returns Promise<void>
     */
    _negotiateClaim(setTokenRenewal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Acquire the lock and establish a cbs session if it does not exist on the connection.
            // Although node.js is single threaded, we need a locking mechanism to ensure that a
            // race condition does not happen while creating a shared resource (in this case the
            // cbs session, since we want to have exactly 1 cbs session per connection).
            log.link("[%s] Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: " +
                "'%s' with address: '%s'.", this._context.connectionId, this._context.cbsSession.cbsLock, this._type, this.name, this.address);
            yield defaultLock.acquire(this._context.cbsSession.cbsLock, () => {
                return this._context.cbsSession.init();
            });
            let tokenObject;
            let tokenType;
            if (this._context.tokenCredential instanceof SharedKeyCredential) {
                tokenObject = this._context.tokenCredential.getToken(this.audience);
                tokenType = TokenType.CbsTokenTypeSas;
                // renew sas token in every 45 minutess
                this._tokenTimeoutInMs = (3600 - 900) * 1000;
            }
            else {
                const aadToken = yield this._context.tokenCredential.getToken(Constants.aadEventHubsScope);
                if (!aadToken) {
                    throw new Error(`Failed to get token from the provided "TokenCredential" object`);
                }
                tokenObject = aadToken;
                tokenType = TokenType.CbsTokenTypeJwt;
                this._tokenTimeoutInMs = tokenObject.expiresOnTimestamp - Date.now() - 2 * 60 * 1000;
            }
            log.link("[%s] %s: calling negotiateClaim for audience '%s'.", this._context.connectionId, this._type, this.audience);
            // Acquire the lock to negotiate the CBS claim.
            log.link("[%s] Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.", this._context.connectionId, this._context.negotiateClaimLock, this._type, this.name, this.address);
            yield defaultLock.acquire(this._context.negotiateClaimLock, () => {
                return this._context.cbsSession.negotiateClaim(this.audience, tokenObject, tokenType);
            });
            log.link("[%s] Negotiated claim for %s '%s' with with address: %s", this._context.connectionId, this._type, this.name, this.address);
            if (setTokenRenewal) {
                yield this._ensureTokenRenewal();
            }
        });
    }
    /**
     * Ensures that the token is renewed within the predefined renewal margin.
     * @ignore
     * @protected
     * @returns
     */
    _ensureTokenRenewal() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this._tokenTimeoutInMs) {
                return;
            }
            this._tokenRenewalTimer = setTimeout(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    yield this._negotiateClaim(true);
                }
                catch (err) {
                    log.error("[%s] %s '%s' with address %s, an error occurred while renewing the token: %O", this._context.connectionId, this._type, this.name, this.address, err);
                }
            }), this._tokenTimeoutInMs);
            log.link("[%s] %s '%s' with address %s, has next token renewal in %d milliseconds @(%s).", this._context.connectionId, this._type, this.name, this.address, this._tokenTimeoutInMs, new Date(Date.now() + this._tokenTimeoutInMs).toString());
        });
    }
    /**
     * Closes the Sender|Receiver link and it's underlying session and also removes it from the
     * internal map.
     * @ignore
     * @param [link] The Sender or Receiver link that needs to be closed and
     * removed.
     */
    _closeLink(link) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            clearTimeout(this._tokenRenewalTimer);
            if (link) {
                try {
                    // Closing the link and its underlying sessionÂ if the link is open. This should also
                    // remove them from the internal map.
                    yield link.close();
                    log.link("[%s] %s '%s' with address '%s' closed.", this._context.connectionId, this._type, this.name, this.address);
                }
                catch (err) {
                    log.error("[%s] An error occurred while closing the %s '%s' with address '%s': %O", this._context.connectionId, this._type, this.name, this.address, err);
                }
            }
        });
    }
    /**
     * Provides the current type of the LinkEntity.
     * @returns The entity type.
     */
    get _type() {
        let result = "LinkEntity";
        if (this.constructor && this.constructor.name) {
            result = this.constructor.name;
        }
        return result;
    }
}
//# sourceMappingURL=linkEntity.js.map