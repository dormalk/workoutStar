{"version":3,"file":"index.js","sources":["../src/AccountSASPermissions.ts","../src/AccountSASResourceTypes.ts","../src/AccountSASServices.ts","../src/SasIPRange.ts","../src/utils/constants.ts","../src/generated/src/storageClientContext.ts","../src/utils/utils.common.ts","../src/SASQueryParameters.ts","../src/AccountSASSignatureValues.ts","../src/policies/CredentialPolicy.ts","../src/policies/AnonymousCredentialPolicy.ts","../src/credentials/Credential.ts","../src/credentials/AnonymousCredential.ts","../src/policies/StorageSharedKeyCredentialPolicy.ts","../src/credentials/StorageSharedKeyCredential.ts","../src/log.ts","../src/policies/StorageBrowserPolicy.ts","../src/StorageBrowserPolicyFactory.ts","../src/policies/StorageRetryPolicy.ts","../src/StorageRetryPolicyFactory.ts","../src/policies/TelemetryPolicy.ts","../src/TelemetryPolicyFactory.ts","../src/Pipeline.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/serviceMappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/service.ts","../src/generated/src/models/queueMappers.ts","../src/generated/src/operations/queue.ts","../src/generated/src/models/messagesMappers.ts","../src/generated/src/operations/messages.ts","../src/generated/src/models/messageIdMappers.ts","../src/generated/src/operations/messageId.ts","../src/StorageClient.ts","../src/utils/tracing.ts","../src/QueueClient.ts","../src/QueueSASPermissions.ts","../src/QueueSASSignatureValues.ts","../src/QueueServiceClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n *\n * @export\n * @class AccountSASPermissions\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @static\n   * @param {string} permissions\n   * @returns {AccountSASPermissions}\n   * @memberof AccountSASPermissions\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to delete queues and messages granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to list queues granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create queues, blobs and files granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASPermissions\n   */\n  public process: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   * @returns {string}\n   * @memberof AccountSASPermissions\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n *\n * @export\n * @class AccountSASResourceTypes\n */\nexport class AccountSASResourceTypes {\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @static\n   * @param {string} resourceTypes\n   * @returns {AccountSASResourceTypes}\n   * @memberof AccountSASResourceTypes\n   */\n  public static parse(resourceTypes: string): AccountSASResourceTypes {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n\n  /**\n   * Permission to access service level APIs granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASResourceTypes\n   */\n  public service: boolean = false;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASResourceTypes\n   */\n  public container: boolean = false;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASResourceTypes\n   */\n  public object: boolean = false;\n\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   * @returns {string}\n   * @memberof AccountSASResourceTypes\n   */\n  public toString(): string {\n    const resourceTypes: string[] = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n *\n * @export\n * @class AccountSASServices\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @static\n   * @param {string} services\n   * @returns {AccountSASServices}\n   * @memberof AccountSASServices\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASServices\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASServices\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASServices\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   *\n   * @type {boolean}\n   * @memberof AccountSASServices\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   * @returns {string}\n   * @memberof AccountSASServices\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * Allowed IP range for a SAS.\n *\n * @export\n * @interface SasIPRange\n */\nexport interface SasIPRange {\n  /**\n   * Starting IP address in the IP range.\n   * If end IP doesn't provide, start IP will the only IP allowed.\n   *\n   * @type {string}\n   * @memberof SasIPRange\n   */\n  start: string;\n  /**\n   * Optional. IP address that ends the IP range.\n   * If not provided, start IP will the only IP allowed.\n   *\n   * @type {string}\n   * @memberof SasIPRange\n   */\n  end?: string;\n}\n\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @export\n * @param {SasIPRange} ipRange\n * @returns {string}\n */\nexport function ipRangeToString(ipRange: SasIPRange): string {\n  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const SDK_VERSION: string = \"12.0.0\";\nexport const SERVICE_VERSION: string = \"2019-02-02\";\n\n/**\n * The OAuth scope to use with Azure Storage.\n */\nexport const StorageOAuthScopes: string | string[] = \"https://storage.azure.com/.default\";\n\nexport const URLConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SIGNATURE: \"sig\",\n    TIMEOUT: \"timeout\"\n  }\n};\n\nexport const HttpUrlConnection = {\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"content-encoding\",\n  CONTENT_LANGUAGE: \"content-language\",\n  CONTENT_LENGTH: \"content-length\",\n  CONTENT_MD5: \"content-md5\",\n  CONTENT_TYPE: \"content-type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n  X_MS_DATE: \"x-ms-date\"\n};\n\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\n\nexport const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;\n  AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;\n  QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;`;\n\nexport const StorageQueueLoggingAllowedHeaderNames = [\n  \"Access-Control-Allow-Origin\",\n  \"Cache-Control\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"Request-Id\",\n  \"traceparent\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"x-ms-client-request-id\",\n  \"x-ms-date\",\n  \"x-ms-error-code\",\n  \"x-ms-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-version\",\n  \"x-ms-approximate-messages-count\",\n  \"x-ms-popreceipt\",\n  \"x-ms-time-next-visible\"\n];\n\nexport const StorageQueueLoggingAllowedQueryParameters = [\n  \"comp\",\n  \"maxresults\",\n  \"rscc\",\n  \"rscd\",\n  \"rsce\",\n  \"rscl\",\n  \"rsct\",\n  \"se\",\n  \"si\",\n  \"sip\",\n  \"sp\",\n  \"spr\",\n  \"sr\",\n  \"srt\",\n  \"ss\",\n  \"st\",\n  \"sv\",\n  \"include\",\n  \"marker\",\n  \"prefix\",\n  \"messagettl\",\n  \"numofmessages\",\n  \"peekonly\",\n  \"popreceipt\",\n  \"visibilitytimeout\"\n];\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"azure-storage-queue\";\nconst packageVersion = \"12.0.0\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  url: string;\n  version: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param url The URL of the service account, queue or message that is the targe of the desired\n   * operation.\n   * @param [options] The parameter options\n   */\n  constructor(url: string, options?: coreHttp.ServiceClientOptions) {\n    if (url == undefined) {\n      throw new Error(\"'url' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.version = '2019-02-02';\n    this.baseUri = \"{url}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.url = url;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, URLBuilder } from \"@azure/core-http\";\nimport { HeaderConstants, URLConstants, DevelopmentConnectionString } from \"./constants\";\nimport { StorageClientContext } from \"../generated/src/storageClientContext\";\nimport { Pipeline } from \"../Pipeline\";\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name String to be appended to URL\n * @returns {string} An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name Parameter name\n * @param {string} [value] Parameter value\n * @returns {string} An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @export\n * @param {string} url URL string\n * @param {string} name Parameter name\n * @returns {(string | string[] | undefined)} Parameter value(s) for the given parameter name.\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} host New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Gets URL path from an URL string.\n *\n * @export\n * @param {string} url Source URL string\n * @returns {(string | undefined)} The path part of the given URL string.\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Gets URL query key value pairs from an URL string.\n *\n * @export\n * @param {string} url\n * @returns {{[key: string]: string}} query key value string pairs from the given URL string.\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n  proxyUri?: string; // Development Connection String may contain proxyUri\n}\n\nfunction getProxyUriFromDevConnString(connectionString: string): string {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")![1];\n      }\n    }\n  }\n  return proxyUri;\n}\n\n/**\n *\n * @param {string} connectionString Account connection string.\n * @param {string} argument property to get value from the connection string.\n * @returns {string} Value of the property specified in argument.\n */\nexport function getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"QueueEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @export\n * @param {string} connectionString Connection string.\n * @returns {ConnectionString} String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  let proxyUri = \"\";\n\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n\n  // Matching QueueEndpoint in the Account connection string\n  let queueEndpoint = getValueInConnString(connectionString, \"QueueEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  queueEndpoint = queueEndpoint.endsWith(\"/\") ? queueEndpoint.slice(0, -1) : queueEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!queueEndpoint) {\n      // QueueEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.queue.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      queueEndpoint = `${defaultEndpointsProtocol}://${accountName}.queue.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: queueEndpoint,\n      accountName,\n      accountKey,\n      proxyUri\n    };\n  } else {\n    // SAS connection string\n\n    let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    let accountName = getAccountNameFromUrl(queueEndpoint);\n    if (!queueEndpoint) {\n      throw new Error(\"Invalid QueueEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: queueEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @export\n * @param {Date} date\n * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Delay specified time interval.\n *\n * @export\n * @param {number} timeInMs\n * @param {AbortSignalLike} [aborter]\n * @param {Error} [abortError]\n */\nexport async function delay(timeInMs: number, aborter?: AbortSignalLike, abortError?: Error) {\n  return new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @export\n * @param {string} currentString\n * @param {number} targetLength\n * @param {string} [padString=\" \"]\n * @returns {string}\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\n/**\n * Sanitizes a url by removing the Signature parameter\n * @param {string} url to sanitize\n * @returns {string} sanitized string\n */\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\n/**\n * Sanitize headers by removing sensitive values such as AUTHORIZATION and X_MS_COPY_SOURCE\n * @param {HttpHeaders} originalHeader original headers\n * @returns {HttpHeaders} sanitized headers\n */\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n\n/**\n * Extracts account name from the url\n * @param {string} url url to extract the account name from\n * @returns {string} with the account name\n */\nexport function getAccountNameFromUrl(url: string): string {\n  if (url.startsWith(\"http://127.0.0.1:10000\")) {\n    // Dev Conn String\n    return getValueInConnString(DevelopmentConnectionString, \"AccountName\");\n  } else {\n    try {\n      // `${defaultEndpointsProtocol}://${accountName}.queue.${endpointSuffix}`;\n      // Slicing off '/' at the end if exists\n      url = url.endsWith(\"/\") ? url.slice(0, -1) : url;\n\n      const accountName = url.substring(url.lastIndexOf(\"://\") + 3, url.lastIndexOf(\".queue.\"));\n      if (!accountName) {\n        throw new Error(\"Provided accountName is invalid.\");\n      }\n      return accountName;\n    } catch (error) {\n      throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n  }\n}\n\n/**\n * Gets a new StorageClientContext\n * @param {string} url Url used for the StorageClientContext\n * @param {url} pipeline a pipeline containing HTTP request policies\n * @returns {StorageClientContext} new StorageClientContext\n */\nexport function getStorageClientContext(url: string, pipeline: Pipeline): StorageClientContext {\n  const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n  // Override protocol layer's default content-type\n  (storageClientContext as any).requestContentType = undefined;\n  return storageClientContext;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\n\n/**\n * Protocols for generated SAS.\n *\n * @export\n * @enum {string}\n */\nexport enum SASProtocol {\n  /**\n   * Protocol that allows HTTPS only\n   */\n  Https = \"https\",\n\n  /**\n   * Protocol that allows both HTTPS and HTTP\n   */\n  HttpsAndHttp = \"https,http\"\n}\n\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link QueueSASSignatureValues}\n * types. Once generated, it can be encoded into a {@code String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n *\n * @export\n * @class SASQueryParameters\n */\nexport class SASQueryParameters {\n  /**\n   * The storage API version.\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly version: string;\n\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   *\n   * @type {SASProtocol}\n   * @memberof SASQueryParameters\n   */\n  public readonly protocol?: SASProtocol;\n\n  /**\n   * Optional. The start time for this SAS token.\n   *\n   * @type {Date}\n   * @memberof SASQueryParameters\n   */\n  public readonly startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   *\n   * @type {Date}\n   * @memberof SASQueryParameters\n   */\n  public readonly expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link QueueSASPermissions} for more details.\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly permissions?: string;\n\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly services?: string;\n\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly resourceTypes?: string;\n\n  /**\n   * Optional. The signed identifier (only for {@link QueueSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly identifier?: string;\n\n  /**\n   * Optional. The storage queue (only for {@link QueueSASSignatureValues}).\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly resource?: string;\n\n  /**\n   * The signature for the SAS token.\n   *\n   * @type {string}\n   * @memberof SASQueryParameters\n   */\n  public readonly signature: string;\n\n  /**\n   * Inner value of getter ipRange.\n   *\n   * @private\n   * @type {SasIPRange}\n   * @memberof SASQueryParameters\n   */\n  private readonly ipRangeInner?: SasIPRange;\n\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   * @type {(SasIPRange | undefined)}\n   * @memberof SASQueryParameters\n   */\n  public get ipRange(): SasIPRange | undefined {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param {string} version Representing the storage version\n   * @param {string} signature Representing the signature for the SAS token\n   * @param {string} [permissions] Representing the storage permissions\n   * @param {string} [services] Representing the storage services being accessed (only for Account SAS)\n   * @param {string} [resourceTypes] Representing the storage resource types being accessed (only for Account SAS)\n   * @param {SASProtocol} [protocol] Representing the allowed HTTP protocol(s)\n   * @param {Date} [startsOn] Representing the start time for this SAS token\n   * @param {Date} [expiresOn] Representing the expiry time for this SAS token\n   * @param {SasIPRange} [ipRange] Representing the range of valid IP addresses for this SAS token\n   * @param {string} [identifier] Representing the signed identifier (only for Service SAS)\n   * @param {string} [resource] Representing the storage queue (only for Service SAS)\n   */\n  constructor(\n    version: string,\n    signature: string,\n    permissions?: string,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string\n  ) {\n    this.version = version;\n    this.services = services;\n    this.resourceTypes = resourceTypes;\n    this.expiresOn = expiresOn;\n    this.permissions = permissions;\n    this.protocol = protocol;\n    this.startsOn = startsOn;\n    this.ipRangeInner = ipRange;\n    this.identifier = identifier;\n    this.resource = resource;\n    this.signature = signature;\n  }\n\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   * @returns {string}\n   * @memberof SASQueryParameters\n   */\n  public toString(): string {\n    const params: string[] = [\"sv\", \"ss\", \"srt\", \"spr\", \"st\", \"se\", \"sip\", \"si\", \"sr\", \"sp\", \"sig\"];\n    const queries: string[] = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n        case \"st\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined\n          );\n          break;\n        case \"se\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined\n          );\n          break;\n        case \"sip\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.ipRange ? ipRangeToString(this.ipRange) : undefined\n          );\n          break;\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n        case \"sr\":\n          this.tryAppendQueryParameter(queries, param, this.resource);\n          break;\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n      }\n    }\n    return queries.join(\"&\");\n  }\n\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @private\n   * @param {string[]} queries\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {void}\n   * @memberof SASQueryParameters\n   */\n  private tryAppendQueryParameter(queries: string[], key: string, value?: string): void {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"./utils/constants\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call generateSASQueryParameters() to obtain a representation of the SAS\n * which can actually be applied to queue urls. Note: that both this class and {@link SASQueryParameters} exist because\n * the former is mutable and a logical representation while the latter is immutable and used to generate actual REST\n * requests.\n *\n * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n *\n * @export\n * @class AccountSASSignatureValues\n */\nexport interface AccountSASSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   *\n   * @type {string}\n   * @memberof AccountSASSignatureValues\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   *\n   * @type {SASProtocol}\n   * @memberof AccountSASSignatureValues\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   *\n   * @type {Date}\n   * @memberof AccountSASSignatureValues\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   *\n   * @type {Date}\n   * @memberof AccountSASSignatureValues\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help\n   * constructing the permissions string.\n   *\n   * @type {AccountSASPermissions}\n   * @memberof AccountSASSignatureValues\n   */\n  permissions: AccountSASPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   *\n   * @type {SasIPRange}\n   * @memberof AccountSASSignatureValues\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to\n   * construct this value.\n   *\n   * @type {string}\n   * @memberof AccountSASSignatureValues\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSASResourceTypes} to construct this value.\n   *\n   * @type {string}\n   * @memberof AccountSASSignatureValues\n   */\n  resourceTypes: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param {AccountSASSignatureValues} accountSASSignatureValues SAS Signature values of the account\n * @param {StorageSharedKeyCredential} sharedKeyCredential Shared key credential.\n * @returns {SASQueryParameters}\n * @memberof AccountSASSignatureValues\n */\nexport function generateAccountSASQueryParameters(\n  accountSASSignatureValues: AccountSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  const version = accountSASSignatureValues.version\n    ? accountSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  const parsedPermissions = AccountSASPermissions.parse(\n    accountSASSignatureValues.permissions.toString()\n  ).toString();\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(\n    accountSASSignatureValues.resourceTypes\n  ).toString();\n\n  const stringToSign = [\n    sharedKeyCredential.accountName,\n    parsedPermissions,\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.startsOn\n      ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n      : \"\",\n    truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n    accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n    accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n    version,\n    \"\" // Account SAS requires an additional newline character\n  ].join(\"\\n\");\n\n  const signature: string = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    parsedPermissions,\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.protocol,\n    accountSASSignatureValues.startsOn,\n    accountSASSignatureValues.expiresOn,\n    accountSASSignatureValues.ipRange\n  );\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/core-http\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n *\n * @export\n * @abstract\n * @class CredentialPolicy\n * @extends {BaseRequestPolicy}\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof CredentialPolicy\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in {@link sendRequest}.\n   *\n   * @protected\n   * @abstract\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof CredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n *\n * @export\n * @class AnonymousCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof AnonymousCredentialPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n *\n * @export\n * @abstract\n * @class Credential\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param {RequestPolicy} _nextPolicy\n   * @param {RequestPolicyOptions} _options\n   * @returns {RequestPolicy}\n   * @memberof Credential\n   */\n  public create(\n    // tslint:disable-next-line:variable-name\n    _nextPolicy: RequestPolicy,\n    // tslint:disable-next-line:variable-name\n    _options: RequestPolicyOptions\n  ): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a {@link CredentialPolicyCreator} member used to create\n * {@link AnonymousCredentialPolicy} objects. {@link AnonymousCredentialPolicy} is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n *\n * @export\n * @class AnonymousCredential\n * @extends {Credential}\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an {@link AnonymousCredentialPolicy} object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {AnonymousCredentialPolicy}\n   * @memberof AnonymousCredential\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions, WebResource } from \"@azure/core-http\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { HeaderConstants } from \"../utils/constants\";\nimport { getURLPath, getURLQueries } from \"../utils/utils.common\";\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n *\n * @export\n * @class StorageSharedKeyCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class StorageSharedKeyCredentialPolicy extends CredentialPolicy {\n  /**\n   * Reference to {@link StorageSharedKeyCredential} which generates StorageSharedKeyCredentialPolicy\n   *\n   * @type {StorageSharedKeyCredential}\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  private readonly factory: StorageSharedKeyCredential;\n\n  /**\n   * Creates an instance of StorageSharedKeyCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {StorageSharedKeyCredential} factory\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    factory: StorageSharedKeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.factory = factory;\n  }\n\n  /**\n   * Signs request.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    request.headers.set(HeaderConstants.X_MS_DATE, new Date().toUTCString());\n\n    if (request.body && typeof request.body === \"string\" && request.body.length > 0) {\n      request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n    }\n\n    const stringToSign: string =\n      [\n        request.method.toUpperCase(),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LANGUAGE),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_ENCODING),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LENGTH),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_MD5),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_TYPE),\n        this.getHeaderValueToSign(request, HeaderConstants.DATE),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_MODIFIED_SINCE),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_MATCH),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_NONE_MATCH),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_UNMODIFIED_SINCE),\n        this.getHeaderValueToSign(request, HeaderConstants.RANGE)\n      ].join(\"\\n\") +\n      \"\\n\" +\n      this.getCanonicalizedHeadersString(request) +\n      this.getCanonicalizedResourceString(request);\n\n    const signature: string = this.factory.computeHMACSHA256(stringToSign);\n    request.headers.set(\n      HeaderConstants.AUTHORIZATION,\n      `SharedKey ${this.factory.accountName}:${signature}`\n    );\n\n    // Workaround for https://github.com/axios/axios/issues/2107\n    // We should always keep the 'content-length' header once the issue is solved\n    // For a better explanation about this workaround, look here: https://github.com/Azure/azure-sdk-for-js/pull/3273\n    if (typeof request.body !== \"function\" && !(request.body && request.onUploadProgress)) {\n      request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n    }\n\n    // console.log(`[URL]:${request.url}`);\n    // console.log(`[HEADERS]:${request.headers.toString()}`);\n    // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n    // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n    return request;\n  }\n\n  /**\n   * Retrieve header value according to shared key sign rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n   *\n   * @private\n   * @param {WebResource} request\n   * @param {string} headerName\n   * @returns {string}\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  private getHeaderValueToSign(request: WebResource, headerName: string): string {\n    const value = request.headers.get(headerName);\n\n    if (!value) {\n      return \"\";\n    }\n\n    // When using version 2015-02-21 or later, if Content-Length is zero, then\n    // set the Content-Length part of the StringToSign to an empty string.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n    if (headerName === HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n      return \"\";\n    }\n\n    return value;\n  }\n\n  /**\n   * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n   * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n   * 2. Convert each HTTP header name to lowercase.\n   * 3. Sort the headers lexicographically by header name, in ascending order.\n   *    Each header may appear only once in the string.\n   * 4. Replace any linear whitespace in the header value with a single space.\n   * 5. Trim any whitespace around the colon in the header.\n   * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n   *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n   *\n   * @private\n   * @param {WebResource} request\n   * @returns {string}\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  private getCanonicalizedHeadersString(request: WebResource): string {\n    let headersArray = request.headers.headersArray().filter((value) => {\n      return value.name.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE);\n    });\n\n    headersArray.sort((a, b): number => {\n      return a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n    });\n\n    // Remove duplicate headers\n    headersArray = headersArray.filter((value, index, array) => {\n      if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n        return false;\n      }\n      return true;\n    });\n\n    let canonicalizedHeadersStringToSign: string = \"\";\n    headersArray.forEach((header) => {\n      canonicalizedHeadersStringToSign += `${header.name\n        .toLowerCase()\n        .trimRight()}:${header.value.trimLeft()}\\n`;\n    });\n\n    return canonicalizedHeadersStringToSign;\n  }\n\n  /**\n   * Retrieves the webResource canonicalized resource string.\n   *\n   * @private\n   * @param {WebResource} request\n   * @returns {string}\n   * @memberof StorageSharedKeyCredentialPolicy\n   */\n  private getCanonicalizedResourceString(request: WebResource): string {\n    const path = encodeURI(getURLPath(request.url) || \"/\");\n\n    let canonicalizedResourceString: string = \"\";\n    canonicalizedResourceString += `/${this.factory.accountName}${path}`;\n\n    const queries = getURLQueries(request.url);\n    const lowercaseQueries: { [key: string]: string } = {};\n    if (queries) {\n      const queryKeys: string[] = [];\n      for (const key in queries) {\n        if (queries.hasOwnProperty(key)) {\n          const lowercaseKey = key.toLowerCase();\n          lowercaseQueries[lowercaseKey] = queries[key];\n          queryKeys.push(lowercaseKey);\n        }\n      }\n\n      queryKeys.sort();\n      for (const key of queryKeys) {\n        canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n      }\n    }\n\n    return canonicalizedResourceString;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { createHmac } from \"crypto\";\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { StorageSharedKeyCredentialPolicy } from \"../policies/StorageSharedKeyCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * StorageSharedKeyCredential for account key authorization of Azure Storage service.\n *\n * @export\n * @class StorageSharedKeyCredential\n * @extends {Credential}\n */\nexport class StorageSharedKeyCredential extends Credential {\n  /**\n   * Azure Storage account name; readonly.\n   *\n   * @type {string}\n   * @memberof StorageSharedKeyCredential\n   */\n  public readonly accountName: string;\n\n  /**\n   * Azure Storage account key; readonly.\n   *\n   * @type {Buffer}\n   * @memberof StorageSharedKeyCredential\n   */\n  private readonly accountKey: Buffer;\n\n  /**\n   * Creates an instance of StorageSharedKeyCredential.\n   * @param {string} accountName\n   * @param {string} accountKey\n   * @memberof StorageSharedKeyCredential\n   */\n  constructor(accountName: string, accountKey: string) {\n    super();\n    this.accountName = accountName;\n    this.accountKey = Buffer.from(accountKey, \"base64\");\n  }\n\n  /**\n   * Creates a {@link StorageSharedKeyCredentialPolicy} object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {StorageSharedKeyCredentialPolicy}\n   * @memberof StorageSharedKeyCredential\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): StorageSharedKeyCredentialPolicy {\n    return new StorageSharedKeyCredentialPolicy(nextPolicy, options, this);\n  }\n\n  /**\n   * Generates a hash signature for an HTTP request or for a SAS.\n   *\n   * @param {string} stringToSign\n   * @returns {string}\n   * @memberof StorageSharedKeyCredential\n   */\n  public computeHMACSHA256(stringToSign: string): string {\n    return createHmac(\"sha256\", this.accountKey)\n      .update(stringToSign, \"utf8\")\n      .digest(\"base64\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-queue\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n *\n * @class StorageBrowserPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof StorageBrowserPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageBrowserPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating {@link StorageBrowserPolicy} objects.\n *\n * @export\n * @class StorageBrowserPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class StorageBrowserPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a StorageBrowserPolicyFactory object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {StorageBrowserPolicy}\n   * @memberof StorageBrowserPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageBrowserPolicy {\n    return new StorageBrowserPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @export\n * @param {StorageRetryOptions} retryOptions\n * @returns {RequestPolicyFactory}\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\n/**\n * RetryPolicy types.\n *\n * @export\n * @enum {number}\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: 30 * 1000 // https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n *\n * @class RetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   *\n   * @private\n   * @type {RetryOptions}\n   * @memberof StorageRetryPolicy\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {RetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]\n   * @memberof StorageRetryPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageRetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @param {HttpOperationResponse} response\n   * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageRetryPolicy\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    newRequest.url = setURLParameter(\n      newRequest.url,\n      URLConstants.Parameters.TIMEOUT,\n      Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n    );\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`\n      );\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      this.logf(\n        HttpPipelineLogLevel.ERROR,\n        `RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`\n      );\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return await this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @protected\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {HttpOperationResponse} [response]\n   * @param {RestError} [err]\n   * @returns {boolean}\n   * @memberof StorageRetryPolicy\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code &&\n            err.code\n              .toString()\n              .toUpperCase()\n              .includes(retriableError))\n        ) {\n          this.logf(\n            HttpPipelineLogLevel.INFO,\n            `RetryPolicy: Network error ${retriableError} found, will retry.`\n          );\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        this.logf(\n          HttpPipelineLogLevel.INFO,\n          `RetryPolicy: Will retry for status code ${statusCode}.`\n        );\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * This is to log for debugging purposes only.\n   * Comment/uncomment as necessary for releasing/debugging.\n   *\n   * @private\n   * @param {HttpPipelineLogLevel} _level\n   * @param {string} _message\n   * @memberof StorageRetryPolicy\n   */\n  // tslint:disable-next-line:variable-name\n  private logf(_level: HttpPipelineLogLevel, _message: string) {\n    // this.log(_level, _message);\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @private\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {AbortSignalLike} [abortSignal]\n   * @memberof StorageRetryPolicy\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageRetryPolicy, StorageRetryPolicyType } from \"./policies/StorageRetryPolicy\";\n\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n\n/**\n * Storage Queue retry options interface.\n *\n * @export\n * @interface StorageRetryOptions\n */\nexport interface StorageRetryOptions {\n  /**\n   * Optional. StorageRetryPolicyType, default is exponential retry policy.\n   *\n   * @type {StorageRetryPolicyType}\n   * @memberof StorageRetryOptions\n   */\n  readonly retryPolicyType?: StorageRetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means that you accept our default timeout, 30s or 30 * 1000ms.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly maxRetryDelayInMs?: number;\n\n  /**\n   * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined\n   * (the default) then operations are not retried against another host.\n   *\n   * NOTE: Before setting this field, make sure you understand the issues around\n   * reading stale and potentially-inconsistent data at\n   * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}\n   *\n   * @type {string}\n   * @memberof StorageRetryOptions\n   */\n  readonly secondaryHost?: string;\n}\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n *\n * @export\n * @class StorageRetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class StorageRetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: StorageRetryOptions;\n\n  /**\n   * Creates an instance of StorageRetryPolicyFactory.\n   * @param {StorageRetryOptions} [retryOptions]\n   * @memberof StorageRetryPolicyFactory\n   */\n  constructor(retryOptions?: StorageRetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  /**\n   * Creates a {@link StorageRetryPolicy} object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {StorageRetryPolicy}\n   * @memberof StorageRetryPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy {\n    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n *\n * @class TelemetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   *\n   * @type {string}\n   * @memberof TelemetryPolicy\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {string} telemetry\n   * @memberof TelemetryPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof TelemetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n *\n * @export\n * @class TelemetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  private telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param {UserAgentOptions} [telemetry]\n   * @memberof TelemetryPolicyFactory\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = (telemetry.userAgentPrefix || \"\").replace(\" \", \"\");\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storagequeue/11.0.0\n      const libInfo = `azsdk-js-storagequeue/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a {@link TelemetryPolicy} object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {TelemetryPolicy}\n   * @memberof TelemetryPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  WebResource,\n  proxyPolicy,\n  isNode,\n  TokenCredential,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  tracingPolicy,\n  logPolicy,\n  ProxyOptions,\n  KeepAliveOptions,\n  UserAgentOptions,\n  generateClientRequestIdPolicy,\n  keepAlivePolicy\n} from \"@azure/core-http\";\n\nimport { logger } from \"./log\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { StorageRetryOptions, StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport {\n  StorageOAuthScopes,\n  StorageQueueLoggingAllowedHeaderNames,\n  StorageQueueLoggingAllowedQueryParameters\n} from \"./utils/constants\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  BaseRequestPolicy,\n  StorageOAuthScopes,\n  deserializationPolicy,\n  IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  WebResource,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n};\n\n/**\n * Option interface for Pipeline constructor.\n *\n * @export\n * @interface PipelineOptions\n */\nexport interface PipelineOptions {\n  /**\n   * Optional. Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof PipelineOptions\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling newPipeline().\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n * Refer to newPipeline() and provided policies as reference before\n * implementing your customized Pipeline.\n *\n * @export\n * @class Pipeline\n */\nexport class Pipeline {\n  /**\n   * A list of chained request policy factories.\n   *\n   * @type {RequestPolicyFactory[]}\n   * @memberof Pipeline\n   */\n  public readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   *\n   * @type {PipelineOptions}\n   * @memberof Pipeline\n   */\n  public readonly options: PipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param {RequestPolicyFactory[]} factories\n   * @param {PipelineOptions} [options={}]\n   * @memberof Pipeline\n   */\n  constructor(factories: RequestPolicyFactory[], options: PipelineOptions = {}) {\n    this.factories = factories;\n    this.options = options;\n  }\n\n  /**\n   * Transfers Pipeline object to ServiceClientOptions object which required by\n   * ServiceClient constructor.\n   *\n   * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.\n   * @memberof Pipeline\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.httpClient,\n      requestPolicyFactories: this.factories\n    };\n  }\n}\n\n/**\n * Option interface for newPipeline() method.\n *\n * @export\n * @interface StoragePipelineOptions\n */\nexport interface StoragePipelineOptions {\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxyOptions;\n  /**\n   * Options for adding user agent details to outgoing requests.\n   *\n   * @type {UserAgentOptions}\n   * @memberof StoragePipelineOptions\n   */\n  userAgentOptions?: UserAgentOptions;\n  /**\n   * Configures the built-in retry policy behavior.\n   *\n   * @type {RetryOptions}\n   * @memberof StoragePipelineOptions\n   */\n  retryOptions?: StorageRetryOptions;\n\n  /**\n   * Keep alive configurations. Default keep-alive is enabled.\n   *\n   * @type {KeepAliveOptions}\n   * @memberof StoragePipelineOptions\n   */\n  keepAliveOptions?: KeepAliveOptions;\n  /**\n   * Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof StoragePipelineOptions\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @static\n * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param {StoragePipelineOptions} [pipelineOptions] Options.\n * @returns {Pipeline} A new Pipeline object.\n * @memberof Pipeline\n */\nexport function newPipeline(\n  credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n  pipelineOptions: StoragePipelineOptions = {}\n): Pipeline {\n  // Order is important. Closer to the API at the top & closer to the network at the bottom.\n  // The credential's policy factory must appear close to the wire so it can sign any\n  // changes made by other factories (like UniqueRequestIDPolicyFactory)\n  const factories: RequestPolicyFactory[] = [\n    tracingPolicy(),\n    keepAlivePolicy(pipelineOptions.keepAliveOptions),\n    new TelemetryPolicyFactory(pipelineOptions.userAgentOptions),\n    generateClientRequestIdPolicy(),\n    new StorageBrowserPolicyFactory(),\n    deserializationPolicy(), // Default deserializationPolicy is provided by protocol layer\n    new StorageRetryPolicyFactory(pipelineOptions.retryOptions),\n    logPolicy({\n      logger: logger.info,\n      allowedHeaderNames: StorageQueueLoggingAllowedHeaderNames,\n      allowedQueryParameters: StorageQueueLoggingAllowedQueryParameters\n    })\n  ];\n\n  if (isNode) {\n    // ProxyPolicy is only avaiable in Node.js runtime, not in browsers\n    factories.push(proxyPolicy(pipelineOptions.proxyOptions));\n  }\n  factories.push(\n    isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes)\n      : credential\n  );\n\n  return new Pipeline(factories, {\n    httpClient: pipelineOptions.httpClient\n  });\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n\nexport const AccessPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      startsOn: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresOn: {\n        xmlName: \"Expiry\",\n        required: true,\n        serializedName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permissions: {\n        xmlName: \"Permission\",\n        required: true,\n        serializedName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueItem: coreHttp.CompositeMapper = {\n  xmlName: \"Queue\",\n  serializedName: \"QueueItem\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListQueuesSegmentResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListQueuesSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListQueuesSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        required: true,\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxPageSize: {\n        xmlName: \"MaxResults\",\n        required: true,\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      queueItems: {\n        xmlIsWrapped: true,\n        xmlName: \"Queues\",\n        xmlElementName: \"Queue\",\n        serializedName: \"QueueItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"QueueItem\"\n            }\n          }\n        }\n      },\n      continuationToken: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: coreHttp.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        xmlName: \"AllowedOrigins\",\n        required: true,\n        serializedName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        xmlName: \"AllowedMethods\",\n        required: true,\n        serializedName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        xmlName: \"AllowedHeaders\",\n        required: true,\n        serializedName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        xmlName: \"ExposedHeaders\",\n        required: true,\n        serializedName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        xmlName: \"MaxAgeInSeconds\",\n        required: true,\n        serializedName: \"MaxAgeInSeconds\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoReplication: coreHttp.CompositeMapper = {\n  serializedName: \"GeoReplication\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoReplication\",\n    modelProperties: {\n      status: {\n        xmlName: \"Status\",\n        required: true,\n        serializedName: \"Status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSyncOn: {\n        xmlName: \"LastSyncTime\",\n        required: true,\n        serializedName: \"LastSyncTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        xmlName: \"Days\",\n        serializedName: \"Days\",\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Logging: coreHttp.CompositeMapper = {\n  serializedName: \"Logging\",\n  type: {\n    name: \"Composite\",\n    className: \"Logging\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        required: true,\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteProperty: {\n        xmlName: \"Delete\",\n        required: true,\n        serializedName: \"Delete\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      read: {\n        xmlName: \"Read\",\n        required: true,\n        serializedName: \"Read\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      write: {\n        xmlName: \"Write\",\n        required: true,\n        serializedName: \"Write\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        required: true,\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      message: {\n        xmlName: \"Message\",\n        serializedName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: coreHttp.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        xmlName: \"IncludeAPIs\",\n        serializedName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueMessage: coreHttp.CompositeMapper = {\n  serializedName: \"QueueMessage\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueMessage\",\n    modelProperties: {\n      messageText: {\n        xmlName: \"MessageText\",\n        required: true,\n        serializedName: \"MessageText\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DequeuedMessageItem: coreHttp.CompositeMapper = {\n  xmlName: \"QueueMessage\",\n  serializedName: \"DequeuedMessageItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DequeuedMessageItem\",\n    modelProperties: {\n      messageId: {\n        xmlName: \"MessageId\",\n        required: true,\n        serializedName: \"MessageId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      insertedOn: {\n        xmlName: \"InsertionTime\",\n        required: true,\n        serializedName: \"InsertionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      expiresOn: {\n        xmlName: \"ExpirationTime\",\n        required: true,\n        serializedName: \"ExpirationTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      popReceipt: {\n        xmlName: \"PopReceipt\",\n        required: true,\n        serializedName: \"PopReceipt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nextVisibleOn: {\n        xmlName: \"TimeNextVisible\",\n        required: true,\n        serializedName: \"TimeNextVisible\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      dequeueCount: {\n        xmlName: \"DequeueCount\",\n        required: true,\n        serializedName: \"DequeueCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      messageText: {\n        xmlName: \"MessageText\",\n        required: true,\n        serializedName: \"MessageText\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeekedMessageItem: coreHttp.CompositeMapper = {\n  xmlName: \"QueueMessage\",\n  serializedName: \"PeekedMessageItem\",\n  type: {\n    name: \"Composite\",\n    className: \"PeekedMessageItem\",\n    modelProperties: {\n      messageId: {\n        xmlName: \"MessageId\",\n        required: true,\n        serializedName: \"MessageId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      insertedOn: {\n        xmlName: \"InsertionTime\",\n        required: true,\n        serializedName: \"InsertionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      expiresOn: {\n        xmlName: \"ExpirationTime\",\n        required: true,\n        serializedName: \"ExpirationTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      dequeueCount: {\n        xmlName: \"DequeueCount\",\n        required: true,\n        serializedName: \"DequeueCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      messageText: {\n        xmlName: \"MessageText\",\n        required: true,\n        serializedName: \"MessageText\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EnqueuedMessage: coreHttp.CompositeMapper = {\n  xmlName: \"QueueMessage\",\n  serializedName: \"EnqueuedMessage\",\n  type: {\n    name: \"Composite\",\n    className: \"EnqueuedMessage\",\n    modelProperties: {\n      messageId: {\n        xmlName: \"MessageId\",\n        required: true,\n        serializedName: \"MessageId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      insertedOn: {\n        xmlName: \"InsertionTime\",\n        required: true,\n        serializedName: \"InsertionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      expiresOn: {\n        xmlName: \"ExpirationTime\",\n        required: true,\n        serializedName: \"ExpirationTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      popReceipt: {\n        xmlName: \"PopReceipt\",\n        required: true,\n        serializedName: \"PopReceipt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nextVisibleOn: {\n        xmlName: \"TimeNextVisible\",\n        required: true,\n        serializedName: \"TimeNextVisible\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: coreHttp.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        xmlName: \"Id\",\n        required: true,\n        serializedName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        xmlName: \"AccessPolicy\",\n        required: true,\n        serializedName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueServiceProperties: coreHttp.CompositeMapper = {\n  xmlName: \"StorageServiceProperties\",\n  serializedName: \"QueueServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueServiceProperties\",\n    modelProperties: {\n      queueAnalyticsLogging: {\n        xmlName: \"Logging\",\n        serializedName: \"Logging\",\n        type: {\n          name: \"Composite\",\n          className: \"Logging\"\n        }\n      },\n      hourMetrics: {\n        xmlName: \"HourMetrics\",\n        serializedName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        xmlName: \"MinuteMetrics\",\n        serializedName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        xmlIsWrapped: true,\n        xmlName: \"Cors\",\n        xmlElementName: \"CorsRule\",\n        serializedName: \"Cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const QueueServiceStatistics: coreHttp.CompositeMapper = {\n  xmlName: \"StorageServiceStats\",\n  serializedName: \"QueueServiceStatistics\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueServiceStatistics\",\n    modelProperties: {\n      geoReplication: {\n        xmlName: \"GeoReplication\",\n        serializedName: \"GeoReplication\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoReplication\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-setproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getstatistics-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListQueuesSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-listqueuessegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListQueuesSegmentHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueCreateHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      approximateMessagesCount: {\n        serializedName: \"x-ms-approximate-messages-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueSetMetadataHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueGetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-getaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueGetAccessPolicyHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueueSetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"queue-setaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"QueueSetAccessPolicyHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesDequeueHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messages-dequeue-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesDequeueHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesClearHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messages-clear-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesClearHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesEnqueueHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messages-enqueue-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesEnqueueHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesPeekHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messages-peek-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesPeekHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessageIdUpdateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messageid-update-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessageIdUpdateHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      popReceipt: {\n        serializedName: \"x-ms-popreceipt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nextVisibleOn: {\n        serializedName: \"x-ms-time-next-visible\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessageIdDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"messageid-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"MessageIdDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  CorsRule,\n  GeoReplication,\n  ListQueuesSegmentResponse,\n  Logging,\n  Metrics,\n  QueueItem,\n  QueueServiceProperties,\n  QueueServiceStatistics,\n  RetentionPolicy,\n  ServiceGetPropertiesHeaders,\n  ServiceGetStatisticsHeaders,\n  ServiceListQueuesSegmentHeaders,\n  ServiceSetPropertiesHeaders,\n  StorageError\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const comp0: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'properties',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'stats',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp2: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'list',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp3: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'metadata',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp4: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'acl',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const include: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"metadata\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: coreHttp.QueryCollectionFormat.Csv\n};\nexport const marker: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"marker\"\n  ],\n  mapper: {\n    serializedName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxPageSize: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"maxPageSize\"\n  ],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const messageTimeToLive: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"messageTimeToLive\"\n  ],\n  mapper: {\n    serializedName: \"messagettl\",\n    constraints: {\n      InclusiveMinimum: -1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const metadata: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"metadata\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-meta\",\n    type: {\n      name: \"Dictionary\",\n      value: {\n        type: {\n          name: \"String\"\n        }\n      }\n    },\n    headerCollectionPrefix: \"x-ms-meta-\"\n  }\n};\nexport const numberOfMessages: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"numberOfMessages\"\n  ],\n  mapper: {\n    serializedName: \"numofmessages\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const peekonly: coreHttp.OperationQueryParameter = {\n  parameterPath: \"peekonly\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"peekonly\",\n    defaultValue: 'true',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const popReceipt: coreHttp.OperationQueryParameter = {\n  parameterPath: \"popReceipt\",\n  mapper: {\n    required: true,\n    serializedName: \"popreceipt\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prefix: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prefix\"\n  ],\n  mapper: {\n    serializedName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const requestId: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"requestId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'service',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const timeoutInSeconds: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"timeoutInSeconds\"\n  ],\n  mapper: {\n    serializedName: \"timeout\",\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const url: coreHttp.OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    required: true,\n    serializedName: \"url\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const version: coreHttp.OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    defaultValue: '2019-02-02',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const visibilityTimeout0: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"visibilityTimeout\"\n  ],\n  mapper: {\n    serializedName: \"visibilitytimeout\",\n    constraints: {\n      InclusiveMaximum: 604800,\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const visibilityTimeout1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"visibilityTimeout\",\n  mapper: {\n    required: true,\n    serializedName: \"visibilitytimeout\",\n    constraints: {\n      InclusiveMaximum: 604800,\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/serviceMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Service.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Queue service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param properties The StorageService properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceSetPropertiesResponse>\n   */\n  setProperties(properties: Models.QueueServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams): Promise<Models.ServiceSetPropertiesResponse>;\n  /**\n   * @param properties The StorageService properties.\n   * @param callback The callback\n   */\n  setProperties(properties: Models.QueueServiceProperties, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param properties The StorageService properties.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(properties: Models.QueueServiceProperties, options: Models.ServiceSetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setProperties(properties: Models.QueueServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        properties,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Queue service, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams): Promise<Models.ServiceGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<Models.QueueServiceProperties>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ServiceGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<Models.QueueServiceProperties>): void;\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams | coreHttp.ServiceCallback<Models.QueueServiceProperties>, callback?: coreHttp.ServiceCallback<Models.QueueServiceProperties>): Promise<Models.ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Queue service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the\n   * storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetStatisticsResponse>\n   */\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams): Promise<Models.ServiceGetStatisticsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getStatistics(callback: coreHttp.ServiceCallback<Models.QueueServiceStatistics>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatistics(options: Models.ServiceGetStatisticsOptionalParams, callback: coreHttp.ServiceCallback<Models.QueueServiceStatistics>): void;\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams | coreHttp.ServiceCallback<Models.QueueServiceStatistics>, callback?: coreHttp.ServiceCallback<Models.QueueServiceStatistics>): Promise<Models.ServiceGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getStatisticsOperationSpec,\n      callback) as Promise<Models.ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Queues Segment operation returns a list of the queues under the specified account\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceListQueuesSegmentResponse>\n   */\n  listQueuesSegment(options?: Models.ServiceListQueuesSegmentOptionalParams): Promise<Models.ServiceListQueuesSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listQueuesSegment(callback: coreHttp.ServiceCallback<Models.ListQueuesSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listQueuesSegment(options: Models.ServiceListQueuesSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListQueuesSegmentResponse>): void;\n  listQueuesSegment(options?: Models.ServiceListQueuesSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListQueuesSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListQueuesSegmentResponse>): Promise<Models.ServiceListQueuesSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listQueuesSegmentOperationSpec,\n      callback) as Promise<Models.ServiceListQueuesSegmentResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"properties\",\n    mapper: {\n      ...Mappers.QueueServiceProperties,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueueServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueueServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listQueuesSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.include,\n    Parameters.timeoutInSeconds,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListQueuesSegmentResponse,\n      headersMapper: Mappers.ServiceListQueuesSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListQueuesSegmentHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  AccessPolicy,\n  QueueCreateHeaders,\n  QueueDeleteHeaders,\n  QueueGetAccessPolicyHeaders,\n  QueueGetPropertiesHeaders,\n  QueueSetAccessPolicyHeaders,\n  QueueSetMetadataHeaders,\n  SignedIdentifier,\n  StorageError\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/queueMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Queue. */\nexport class Queue {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Queue.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new queue under the given account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueCreateResponse>\n   */\n  create(options?: Models.QueueCreateOptionalParams): Promise<Models.QueueCreateResponse>;\n  /**\n   * @param callback The callback\n   */\n  create(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(options: Models.QueueCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(options?: Models.QueueCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.QueueCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.QueueCreateResponse>;\n  }\n\n  /**\n   * operation permanently deletes the specified queue\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueDeleteResponse>\n   */\n  deleteMethod(options?: Models.QueueDeleteMethodOptionalParams): Promise<Models.QueueDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.QueueDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.QueueDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.QueueDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.QueueDeleteResponse>;\n  }\n\n  /**\n   * Retrieves user-defined metadata and queue properties on the specified queue. Metadata is\n   * associated with the queue as name-values pairs.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueGetPropertiesResponse>\n   */\n  getProperties(options?: Models.QueueGetPropertiesOptionalParams): Promise<Models.QueueGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.QueueGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.QueueGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.QueueGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.QueueGetPropertiesResponse>;\n  }\n\n  /**\n   * sets user-defined metadata on the specified queue. Metadata is associated with the queue as\n   * name-value pairs.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueSetMetadataResponse>\n   */\n  setMetadata(options?: Models.QueueSetMetadataOptionalParams): Promise<Models.QueueSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.QueueSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.QueueSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.QueueSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.QueueSetMetadataResponse>;\n  }\n\n  /**\n   * returns details about any stored access policies specified on the queue that may be used with\n   * Shared Access Signatures.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueGetAccessPolicyResponse>\n   */\n  getAccessPolicy(options?: Models.QueueGetAccessPolicyOptionalParams): Promise<Models.QueueGetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccessPolicy(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccessPolicy(options: Models.QueueGetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  getAccessPolicy(options?: Models.QueueGetAccessPolicyOptionalParams | coreHttp.ServiceCallback<Models.SignedIdentifier[]>, callback?: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): Promise<Models.QueueGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccessPolicyOperationSpec,\n      callback) as Promise<Models.QueueGetAccessPolicyResponse>;\n  }\n\n  /**\n   * sets stored access policies for the queue that may be used with Shared Access Signatures\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueueSetAccessPolicyResponse>\n   */\n  setAccessPolicy(options?: Models.QueueSetAccessPolicyOptionalParams): Promise<Models.QueueSetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  setAccessPolicy(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setAccessPolicy(options: Models.QueueSetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setAccessPolicy(options?: Models.QueueSetAccessPolicyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.QueueSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setAccessPolicyOperationSpec,\n      callback) as Promise<Models.QueueSetAccessPolicyResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.QueueCreateHeaders\n    },\n    204: {\n      headersMapper: Mappers.QueueCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.QueueDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.QueueGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.QueueSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueSetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"SignedIdentifier\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.QueueGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueGetAccessPolicyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{queueName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"queueAcl\"\n    ],\n    mapper: {\n      xmlName: \"SignedIdentifiers\",\n      xmlElementName: \"SignedIdentifier\",\n      serializedName: \"queueAcl\",\n      type: {\n        name: \"Sequence\",\n        element: {\n          type: {\n            name: \"Composite\",\n            className: \"SignedIdentifier\"\n          }\n        }\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    204: {\n      headersMapper: Mappers.QueueSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.QueueSetAccessPolicyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  DequeuedMessageItem,\n  EnqueuedMessage,\n  MessagesClearHeaders,\n  MessagesDequeueHeaders,\n  MessagesEnqueueHeaders,\n  MessagesPeekHeaders,\n  PeekedMessageItem,\n  QueueMessage,\n  StorageError\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/messagesMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Messages. */\nexport class Messages {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Messages.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Dequeue operation retrieves one or more messages from the front of the queue.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessagesDequeueResponse>\n   */\n  dequeue(options?: Models.MessagesDequeueOptionalParams): Promise<Models.MessagesDequeueResponse>;\n  /**\n   * @param callback The callback\n   */\n  dequeue(callback: coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  dequeue(options: Models.MessagesDequeueOptionalParams, callback: coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>): void;\n  dequeue(options?: Models.MessagesDequeueOptionalParams | coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>, callback?: coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>): Promise<Models.MessagesDequeueResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      dequeueOperationSpec,\n      callback) as Promise<Models.MessagesDequeueResponse>;\n  }\n\n  /**\n   * The Clear operation deletes all messages from the specified queue.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessagesClearResponse>\n   */\n  clear(options?: Models.MessagesClearOptionalParams): Promise<Models.MessagesClearResponse>;\n  /**\n   * @param callback The callback\n   */\n  clear(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  clear(options: Models.MessagesClearOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  clear(options?: Models.MessagesClearOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.MessagesClearResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      clearOperationSpec,\n      callback) as Promise<Models.MessagesClearResponse>;\n  }\n\n  /**\n   * The Enqueue operation adds a new message to the back of the message queue. A visibility timeout\n   * can also be specified to make the message invisible until the visibility timeout expires. A\n   * message must be in a format that can be included in an XML request with UTF-8 encoding. The\n   * encoded message can be up to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size\n   * for previous versions.\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessagesEnqueueResponse>\n   */\n  enqueue(queueMessage: Models.QueueMessage, options?: Models.MessagesEnqueueOptionalParams): Promise<Models.MessagesEnqueueResponse>;\n  /**\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param callback The callback\n   */\n  enqueue(queueMessage: Models.QueueMessage, callback: coreHttp.ServiceCallback<Models.EnqueuedMessage[]>): void;\n  /**\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  enqueue(queueMessage: Models.QueueMessage, options: Models.MessagesEnqueueOptionalParams, callback: coreHttp.ServiceCallback<Models.EnqueuedMessage[]>): void;\n  enqueue(queueMessage: Models.QueueMessage, options?: Models.MessagesEnqueueOptionalParams | coreHttp.ServiceCallback<Models.EnqueuedMessage[]>, callback?: coreHttp.ServiceCallback<Models.EnqueuedMessage[]>): Promise<Models.MessagesEnqueueResponse> {\n    return this.client.sendOperationRequest(\n      {\n        queueMessage,\n        options\n      },\n      enqueueOperationSpec,\n      callback) as Promise<Models.MessagesEnqueueResponse>;\n  }\n\n  /**\n   * The Peek operation retrieves one or more messages from the front of the queue, but does not\n   * alter the visibility of the message.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessagesPeekResponse>\n   */\n  peek(options?: Models.MessagesPeekOptionalParams): Promise<Models.MessagesPeekResponse>;\n  /**\n   * @param callback The callback\n   */\n  peek(callback: coreHttp.ServiceCallback<Models.PeekedMessageItem[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  peek(options: Models.MessagesPeekOptionalParams, callback: coreHttp.ServiceCallback<Models.PeekedMessageItem[]>): void;\n  peek(options?: Models.MessagesPeekOptionalParams | coreHttp.ServiceCallback<Models.PeekedMessageItem[]>, callback?: coreHttp.ServiceCallback<Models.PeekedMessageItem[]>): Promise<Models.MessagesPeekResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      peekOperationSpec,\n      callback) as Promise<Models.MessagesPeekResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst dequeueOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{queueName}/messages\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.numberOfMessages,\n    Parameters.visibilityTimeout0,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"QueueMessage\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DequeuedMessageItem\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.MessagesDequeueHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessagesDequeueHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst clearOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{queueName}/messages\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.MessagesClearHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessagesClearHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst enqueueOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{queueName}/messages\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.visibilityTimeout0,\n    Parameters.messageTimeToLive,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"queueMessage\",\n    mapper: {\n      ...Mappers.QueueMessage,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    201: {\n      bodyMapper: {\n        xmlElementName: \"QueueMessage\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EnqueuedMessage\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.MessagesEnqueueHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessagesEnqueueHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst peekOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{queueName}/messages\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.numberOfMessages,\n    Parameters.timeoutInSeconds,\n    Parameters.peekonly\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"QueueMessage\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PeekedMessageItem\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.MessagesPeekHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessagesPeekHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  MessageIdDeleteHeaders,\n  MessageIdUpdateHeaders,\n  QueueMessage,\n  StorageError\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/messageIdMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a MessageId. */\nexport class MessageId {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a MessageId.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Update operation was introduced with version 2011-08-18 of the Queue service API. The Update\n   * Message operation updates the visibility timeout of a message. You can also use this operation\n   * to update the contents of a message. A message must be in a format that can be included in an\n   * XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size.\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessageIdUpdateResponse>\n   */\n  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilityTimeout: number, options?: Models.MessageIdUpdateOptionalParams): Promise<Models.MessageIdUpdateResponse>;\n  /**\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param callback The callback\n   */\n  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilityTimeout: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param queueMessage A Message object which can be stored in a Queue\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilityTimeout: number, options: Models.MessageIdUpdateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilityTimeout: number, options?: Models.MessageIdUpdateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.MessageIdUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        queueMessage,\n        popReceipt,\n        visibilityTimeout,\n        options\n      },\n      updateOperationSpec,\n      callback) as Promise<Models.MessageIdUpdateResponse>;\n  }\n\n  /**\n   * The Delete operation deletes the specified message.\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessageIdDeleteResponse>\n   */\n  deleteMethod(popReceipt: string, options?: Models.MessageIdDeleteMethodOptionalParams): Promise<Models.MessageIdDeleteResponse>;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param callback The callback\n   */\n  deleteMethod(popReceipt: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(popReceipt: string, options: Models.MessageIdDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(popReceipt: string, options?: Models.MessageIdDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.MessageIdDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        popReceipt,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.MessageIdDeleteResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{queueName}/messages/{messageid}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.popReceipt,\n    Parameters.visibilityTimeout1,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"queueMessage\",\n    mapper: {\n      ...Mappers.QueueMessage,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    204: {\n      headersMapper: Mappers.MessageIdUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessageIdUpdateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{queueName}/messages/{messageid}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.popReceipt,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.MessageIdDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessageIdDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { getAccountNameFromUrl, getStorageClientContext } from \"./utils/utils.common\";\nimport { SpanOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n}\n\n/**\n * A StorageClient represents a based client class for {@link QueueServiceClient}, {@link QueueClient} and etc.\n *\n * @export\n * @class StorageClient\n */\nexport abstract class StorageClient {\n  /**\n   * URL string value.\n   *\n   * @type {string}\n   * @memberof StorageClient\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   * @ignore\n   * @type {Pipeline}\n   * @memberof StorageClient\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * StorageClientContext is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   *\n   * @protected\n   * @type {StorageClientContext}\n   * @memberof StorageClient\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param {string} url\n   * @param {Pipeline} pipeline\n   * @memberof StorageClient\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    this.url = url;\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = getStorageClientContext(url, pipeline);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { getTracer, Span, SpanOptions, SpanKind } from \"@azure/core-tracing\";\nimport { OperationTracingOptions } from \"../StorageClient\";\n\n/**\n * Creates a span using the global tracer.\n * @param {string} operationName The name of the operation being performed.\n * @param {SpanOptions} options The options for the underlying http request.\n */\nexport function createSpan(\n  operationName: string,\n  tracingOptions: OperationTracingOptions = {}\n): { span: Span; spanOptions: SpanOptions } {\n  const tracer = getTracer();\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.CLIENT\n  };\n\n  const span = tracer.startSpan(`Azure.Storage.Queue.${operationName}`, spanOptions);\n  span.setAttribute(\"component\", \"storage\");\n\n  let newOptions = tracingOptions.spanOptions || {};\n  if (span.isRecordingEvents()) {\n    newOptions = {\n      ...tracingOptions,\n      parent: span\n    };\n  }\n\n  return {\n    span,\n    spanOptions: newOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  HttpResponse,\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  getDefaultProxySettings\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\nimport {\n  EnqueuedMessage,\n  DequeuedMessageItem,\n  MessagesDequeueHeaders,\n  MessagesDequeueOptionalParams,\n  MessagesEnqueueHeaders,\n  MessagesEnqueueOptionalParams,\n  MessagesPeekHeaders,\n  MessagesPeekOptionalParams,\n  MessageIdUpdateResponse,\n  MessageIdDeleteResponse,\n  MessagesClearResponse,\n  PeekedMessageItem,\n  QueueCreateResponse,\n  QueueDeleteResponse,\n  QueueGetAccessPolicyHeaders,\n  QueueGetPropertiesResponse,\n  QueueSetAccessPolicyResponse,\n  QueueSetMetadataResponse,\n  SignedIdentifierModel\n} from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Messages, MessageId, Queue } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport {\n  appendToURLPath,\n  extractConnectionStringParts,\n  truncatedISO8061Date,\n  getValueInConnString,\n  getStorageClientContext\n} from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\nimport { DevelopmentConnectionString } from \"./utils/constants\";\nimport { Metadata } from \"./models\";\n\n/**\n * Options to configure {@link QueueClient.create} operation\n *\n * @export\n * @interface QueueCreateOptions\n */\nexport interface QueueCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the queue object.\n   * The keys need to be lower-case.\n   *\n   * @type {Metadata}\n   * @memberof QueueCreateOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Options to configure {@link QueueClient.getProperties} operation\n *\n * @export\n * @interface QueueGetPropertiesOptions\n */\nexport interface QueueGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.delete} operation\n *\n * @export\n * @interface QueueDeleteOptions\n */\nexport interface QueueDeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueDeleteOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.getAccessPolicy} operation\n *\n * @export\n * @interface QueueGetAccessPolicyOptions\n */\nexport interface QueueGetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueGetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.setAccessPolicy} operation\n *\n * @export\n * @interface QueueSetAccessPolicyOptions\n */\nexport interface QueueSetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueSetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.setMetadata} operation\n *\n * @export\n * @interface QueueSetMetadataOptions\n */\nexport interface QueueSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueSetMetadataOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Signed identifier.\n *\n * @export\n * @interface SignedIdentifier\n */\nexport interface SignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} startsOn the date-time the policy is active.\n     */\n    startsOn: Date;\n    /**\n     * @member {string} expiresOn the date-time the policy expires.\n     */\n    expiresOn: Date;\n    /**\n     * @member {string} permission the permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl\n     */\n    permissions: string;\n  };\n}\n\n/**\n * Contains response data for the {@link QueueClient.getAccessPolicy} operation.\n */\nexport declare type QueueGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & QueueGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: QueueGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifierModel[];\n    };\n  };\n\n/**\n * Options to configure {@link QueueClient.clearMessages} operation\n *\n * @export\n * @interface QueueClearMessagesOptions\n */\nexport interface QueueClearMessagesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueClearMessagesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.sendMessage} operation\n *\n * @export\n * @interface QueueSendMessageOptions\n * @extends {MessagesEnqueueOptionalParams}\n */\nexport interface QueueSendMessageOptions extends MessagesEnqueueOptionalParams, CommonOptions {}\n\n/**\n * Options to configure {@link QueueClient.receiveMessages} operation\n *\n * @export\n * @interface QueueReceiveMessageOptions\n * @extends {MessagesDequeueOptionalParams}\n */\nexport interface QueueReceiveMessageOptions extends MessagesDequeueOptionalParams, CommonOptions {}\n\n/**\n * Options to configure {@link QueueClient.peekMessages} operation\n *\n * @export\n * @interface QueuePeekMessagesOptions\n * @extends {MessagesPeekOptionalParams}\n */\nexport interface QueuePeekMessagesOptions extends MessagesPeekOptionalParams, CommonOptions {}\n\n/**\n * Contains the response data for the {@link QueueClient.sendMessage} operation.\n */\nexport declare type QueueSendMessageResponse = {\n  /**\n   * @member {string} messageId The ID of the sent Message.\n   */\n  messageId: string;\n  /**\n   * @member {string} popReceipt This value is required to delete the Message.\n   * If deletion fails using this popreceipt then the message has been received\n   * by another client.\n   */\n  popReceipt: string;\n  /**\n   * @member {Date} insertedOn The time that the message was inserted into the\n   * Queue.\n   */\n  insertedOn: Date;\n  /**\n   * @member {Date} expiresOn The time that the message will expire and be\n   * automatically deleted.\n   */\n  expiresOn: Date;\n  /**\n   * @member {Date} nextVisibleOn The time that the message will again become\n   * visible in the Queue.\n   */\n  nextVisibleOn: Date;\n} & MessagesEnqueueHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesEnqueueHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: EnqueuedMessage[];\n    };\n  };\n\n/**\n * The object returned in the `receivedMessageItems` array when calling {@link QueueClient.receiveMessages}.\n *\n * See: {@link QueueReceiveMessageResponse}\n */\nexport declare type ReceivedMessageItem = DequeuedMessageItem;\n\n/**\n * Contains the response data for the {@link QueueClient.receiveMessages} operation.\n */\nexport declare type QueueReceiveMessageResponse = {\n  receivedMessageItems: ReceivedMessageItem[];\n} & MessagesDequeueHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesDequeueHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ReceivedMessageItem[];\n    };\n  };\n\n/**\n * Contains the response data for the {@link QueueClient.peekMessages} operation.\n */\nexport declare type QueuePeekMessagesResponse = {\n  peekedMessageItems: PeekedMessageItem[];\n} & MessagesPeekHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesPeekHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PeekedMessageItem[];\n    };\n  };\n\n/**\n * Options to configure the {@link QueueClient.deleteMessage} operation\n *\n * @export\n * @interface QueueDeleteMessageOptions\n */\nexport interface QueueDeleteMessageOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueDeleteMessageOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Contains response data for the {@link QueueClient.updateMessage} operation.\n */\nexport declare type QueueUpdateMessageResponse = MessageIdUpdateResponse;\n\n/**\n * Contains response data for the {@link QueueClient.deleteMessage} operation.\n */\nexport declare type QueueDeleteMessageResponse = MessageIdDeleteResponse;\n\n/**\n * Contains response data for the {@link QueueClient.clearMessages} operation.\n */\nexport declare type QueueClearMessagesResponse = MessagesClearResponse;\n\n/**\n * Options to configure {@link QueueClient.updateMessage} operation\n *\n * @export\n * @interface QueueUpdateMessageOptions\n */\nexport interface QueueUpdateMessageOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueUpdateMessageOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * A QueueClient represents a URL to an Azure Storage Queue's messages allowing you to manipulate its messages.\n *\n * @export\n * @class QueueClient\n */\nexport class QueueClient extends StorageClient {\n  /**\n   * messagesContext provided by protocol layer.\n   *\n   * @private\n   * @type {Messages}\n   * @memberof QueueClient\n   */\n  private messagesContext: Messages;\n  /**\n   * queueContext provided by protocol layer.\n   *\n   * @private\n   * @type {Queue}\n   * @memberof QueueClient\n   */\n  private queueContext: Queue;\n  private _name: string;\n  private _messagesUrl: string;\n\n  /**\n   * The name of the queue.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {string} queueName Queue name.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueClient\n   */\n  constructor(connectionString: string, queueName: string, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n   * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueClient\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof QueueClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrQueueName?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline\n      | string,\n    options?: StoragePipelineOptions\n  ) {\n    options = options || {};\n    let pipeline: Pipeline;\n    let url: string;\n    if (credentialOrPipelineOrQueueName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrQueueName;\n    } else if (\n      (isNode && credentialOrPipelineOrQueueName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrQueueName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrQueueName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrQueueName, options);\n    } else if (\n      !credentialOrPipelineOrQueueName &&\n      typeof credentialOrPipelineOrQueueName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second paramter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrQueueName &&\n      typeof credentialOrPipelineOrQueueName === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, queueName: string, options?: StoragePipelineOptions)\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const queueName = credentialOrPipelineOrQueueName;\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(extractedCreds.url, queueName);\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        const queueName = credentialOrPipelineOrQueueName;\n        url = appendToURLPath(extractedCreds.url, queueName) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for queueName parameter\");\n    }\n    super(url, pipeline);\n    this._name = this.getQueueNameFromUrl();\n    this.queueContext = new Queue(this.storageClientContext);\n\n    // MessagesContext\n    // Build the url with \"messages\"\n    const partsOfUrl = this.url.split(\"?\");\n    this._messagesUrl = partsOfUrl[1]\n      ? appendToURLPath(partsOfUrl[0], \"messages\") + \"?\" + partsOfUrl[1]\n      : appendToURLPath(partsOfUrl[0], \"messages\");\n\n    this.messagesContext = new Messages(getStorageClientContext(this._messagesUrl, this.pipeline));\n  }\n\n  private getMessageIdContext(messageId: string): MessageId {\n    // Build the url with messageId\n    const partsOfUrl = this._messagesUrl.split(\"?\");\n    const urlWithMessageId = partsOfUrl[1]\n      ? appendToURLPath(partsOfUrl[0], messageId) + \"?\" + partsOfUrl[1]\n      : appendToURLPath(partsOfUrl[0], messageId);\n\n    return new MessageId(getStorageClientContext(urlWithMessageId, this.pipeline));\n  }\n\n  /**\n   * Creates a new queue under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4\n   *\n   * @param {QueueCreateOptions} [options] Options to Queue create operation.\n   * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.\n   * @memberof QueueClient\n   *\n   * @example\n   * ```js\n   * const queueClient = queueServiceClient.getQueueClient(\"<new queue name>\");\n   * const createQueueResponse = await queueClient.create();\n   * ```\n   */\n  public async create(options: QueueCreateOptions = {}): Promise<QueueCreateResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-create\", options.tracingOptions);\n    try {\n      return this.queueContext.create({\n        ...options,\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified queue permanently.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3\n   *\n   * @param {QueueDeleteOptions} [options] Options to Queue delete operation.\n   * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.\n   * @memberof QueueClient\n   *\n   * @example\n   * ```js\n   * const deleteQueueResponse = await queueClient.delete();\n   * console.log(\n   *   \"Delete queue successfully, service assigned request Id:\", deleteQueueResponse.requestId\n   * );\n   * ```\n   */\n  public async delete(options: QueueDeleteOptions = {}): Promise<QueueDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-delete\", options.tracingOptions);\n    try {\n      return this.queueContext.deleteMethod({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets all user-defined metadata and system properties for the specified\n   * queue. Metadata is associated with the queue as name-values pairs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata\n   *\n   * @param {QueueGetPropertiesOptions} [options] Options to Queue get properties operation.\n   * @returns {Promise<QueueGetPropertiesResponse>} Response data for the Queue get properties operation.\n   * @memberof QueueClient\n   */\n  public async getProperties(\n    options: QueueGetPropertiesOptions = {}\n  ): Promise<QueueGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-getProperties\", options.tracingOptions);\n    try {\n      return this.queueContext.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified queue.\n   *\n   * If no option provided, or no metadata defined in the option parameter, the queue\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing metadata will be removed.\n   * @param {QueueSetMetadataOptions} [options] Options to Queue set metadata operation.\n   * @returns {Promise<QueueSetMetadataResponse>} Response data for the Queue set metadata operation.\n   * @memberof QueueClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: QueueSetMetadataOptions = {}\n  ): Promise<QueueSetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-setMetadata\", options.tracingOptions);\n    try {\n      return this.queueContext.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets details about any stored access policies specified on the queue that may be used with Shared Access Signatures.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl\n   *\n   * @param {QueueGetAccessPolicyOptions} [options] Options to Queue get access policy operation.\n   * @returns {Promise<QueueGetAccessPolicyResponse>} Response data for the Queue get access policy operation.\n   * @memberof QueueClient\n   */\n  public async getAccessPolicy(\n    options: QueueGetAccessPolicyOptions = {}\n  ): Promise<QueueGetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-getAccessPolicy\", options.tracingOptions);\n    try {\n      const response = await this.queueContext.getAccessPolicy({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const res: QueueGetAccessPolicyResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        signedIdentifiers: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const identifier of response) {\n        res.signedIdentifiers.push({\n          accessPolicy: {\n            expiresOn: new Date(identifier.accessPolicy.expiresOn),\n            permissions: identifier.accessPolicy.permissions,\n            startsOn: new Date(identifier.accessPolicy.startsOn)\n          },\n          id: identifier.id\n        });\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets stored access policies for the queue that may be used with Shared Access Signatures.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl\n   *\n   * @param {SignedIdentifier[]} [queueAcl]\n   * @param {QueueSetAccessPolicyOptions} [options] Options to Queue set access policy operation.\n   * @returns {Promise<QueueSetAccessPolicyResponse>} Response data for the Queue set access policy operation.\n   * @memberof QueueClient\n   */\n  public async setAccessPolicy(\n    queueAcl?: SignedIdentifier[],\n    options: QueueSetAccessPolicyOptions = {}\n  ): Promise<QueueSetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-setAccessPolicy\", options.tracingOptions);\n    try {\n      const acl: SignedIdentifierModel[] = [];\n      for (const identifier of queueAcl || []) {\n        acl.push({\n          accessPolicy: {\n            expiresOn: truncatedISO8061Date(identifier.accessPolicy.expiresOn),\n            permissions: identifier.accessPolicy.permissions,\n            startsOn: truncatedISO8061Date(identifier.accessPolicy.startsOn)\n          },\n          id: identifier.id\n        });\n      }\n\n      return this.queueContext.setAccessPolicy({\n        abortSignal: options.abortSignal,\n        queueAcl: acl,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Clear deletes all messages from a queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages\n   *\n   * @param {QueueClearMessagesOptions} [options] Options to clear messages operation.\n   * @returns {Promise<QueueClearMessagesResponse>} Response data for the clear messages operation.\n   * @memberof QueueClient\n   */\n  public async clearMessages(\n    options: QueueClearMessagesOptions = {}\n  ): Promise<QueueClearMessagesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-clearMessages\", options.tracingOptions);\n    try {\n      return this.messagesContext.clear({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * sendMessage adds a new message to the back of a queue. The visibility timeout specifies how long\n   * the message should be invisible to Dequeue and Peek operations.\n   * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.\n   * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-message\n   *\n   * @param {string} messageText Text of the message to send\n   * @param {QueueSendMessageOptions} [options] Options to send messages operation.\n   * @returns {Promise<QueueSendMessageResponse>} Response data for the send messages operation.\n   * @memberof QueueClient\n   *\n   * @example\n   * ```js\n   * const sendMessageResponse = await queueClient.sendMessage(\"Hello World!\");\n   * console.log(\n   *   \"Sent message successfully, service assigned message Id:\", sendMessageResponse.messageId,\n   *   \"service assigned request Id:\", sendMessageResponse.requestId\n   * );\n   * ```\n   */\n  public async sendMessage(\n    messageText: string,\n    options: QueueSendMessageOptions = {}\n  ): Promise<QueueSendMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-sendMessage\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.enqueue(\n        {\n          messageText: messageText\n        },\n        {\n          abortSignal: options.abortSignal,\n          ...options,\n          spanOptions\n        }\n      );\n      const item = response[0];\n      return {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        errorCode: response.errorCode,\n        messageId: item.messageId,\n        popReceipt: item.popReceipt,\n        nextVisibleOn: item.nextVisibleOn,\n        insertedOn: item.insertedOn,\n        expiresOn: item.expiresOn\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * receiveMessages retrieves one or more messages from the front of the queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages\n   *\n   * @param {QueueReceiveMessageOptions} [options] Options to receive messages operation.\n   * @returns {Promise<QueueReceiveMessageResponse>} Response data for the receive messages operation.\n   * @memberof QueueClient\n   *\n   * @example\n   * ```js\n   * const response = await queueClient.receiveMessages();\n   * if (response.receivedMessageItems.length == 1) {\n   *   const receivedMessageItem = response.receivedMessageItems[0];\n   *   console.log(\"Processing & deleting message with content:\", receivedMessageItem.messageText);\n   *   const deleteMessageResponse = await queueClient.deleteMessage(\n   *     receivedMessageItem.messageId,\n   *     receivedMessageItem.popReceipt\n   *   );\n   *   console.log(\n   *     \"Delete message succesfully, service assigned request Id:\",\n   *     deleteMessageResponse.requestId\n   *   );\n   * }\n   * ```\n   */\n  public async receiveMessages(\n    options: QueueReceiveMessageOptions = {}\n  ): Promise<QueueReceiveMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-receiveMessages\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.dequeue({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n\n      const res: QueueReceiveMessageResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        receivedMessageItems: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const item of response) {\n        res.receivedMessageItems.push(item);\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * peekMessages retrieves one or more messages from the front of the queue but does not alter the visibility of the message.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages\n   *\n   * @param {QueuePeekMessagesOptions} [options] Options to peek messages operation.\n   * @returns {QueuePeekMessagesResponse>} Response data for the peek messages operation.\n   * @memberof QueueClient\n   *\n   * @example\n   * ```js\n   * const peekMessagesResponse = await queueClient.peekMessages();\n   * console.log(\"The peeked message is:\", peekMessagesResponse.peekedMessageItems[0].messageText);\n   * ```\n   */\n  public async peekMessages(\n    options: QueuePeekMessagesOptions = {}\n  ): Promise<QueuePeekMessagesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-peekMessages\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.peek({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n\n      const res: QueuePeekMessagesResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        peekedMessageItems: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const item of response) {\n        res.peekedMessageItems.push(item);\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * deleteMessage permanently removes the specified message from its queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2\n   *\n   * @param {string} messageId Id of the message.\n   * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.\n   * @param {QueueDeleteMessageOptions} [options] Options to delete message operation.\n   * @returns {Promise<QueueDeleteMessageResponse>} Response data for the delete message operation.\n   * @memberof QueueClient\n   */\n  public async deleteMessage(\n    messageId: string,\n    popReceipt: string,\n    options: QueueDeleteMessageOptions = {}\n  ): Promise<QueueDeleteMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-deleteMessage\", options.tracingOptions);\n    try {\n      return this.getMessageIdContext(messageId).deleteMethod(popReceipt, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update changes a message's visibility timeout and contents.\n   * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.\n   * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/update-message\n   *\n   * @param {string} messageId Id of the message\n   * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.\n   * @param {string} message Message to update.\n   * @param {number} visibilityTimeout Specifies the new visibility timeout value, in seconds,\n   *                                   relative to server time. The new value must be larger than or equal to 0,\n   *                                   and cannot be larger than 7 days. The visibility timeout of a message cannot\n   *                                   be set to a value later than the expiry time.\n   *                                   A message can be updated until it has been deleted or has expired.\n   * @param {QueueUpdateMessageOptions} [options] Options to update message operation.\n   * @returns {Promise<QueueUpdateMessageResponse>} Response data for the update message operation.\n   * @memberof QueueClient\n   */\n  public async updateMessage(\n    messageId: string,\n    popReceipt: string,\n    message: string,\n    visibilityTimeout?: number,\n    options: QueueUpdateMessageOptions = {}\n  ): Promise<QueueUpdateMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-updateMessage\", options.tracingOptions);\n    try {\n      return this.getMessageIdContext(messageId).update(\n        {\n          messageText: message\n        },\n        popReceipt,\n        visibilityTimeout || 0,\n        {\n          abortSignal: options.abortSignal,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private getQueueNameFromUrl(): string {\n    let queueName;\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n      // \"https://myaccount.queue.core.windows.net/myqueue\".\n      // or an emulator URL that starts with the endpoint `http://127.0.0.1:10001/devstoreaccount1`\n\n      let urlWithoutSAS = this.url.split(\"?\")[0]; // removing the sas part of url if present\n      urlWithoutSAS = urlWithoutSAS.endsWith(\"/\") ? urlWithoutSAS.slice(0, -1) : urlWithoutSAS; // Slicing off '/' at the end if exists\n\n      // http://127.0.0.1:10001/devstoreaccount1\n      const emulatorQueueEndpoint = getValueInConnString(\n        DevelopmentConnectionString,\n        \"QueueEndpoint\"\n      );\n\n      if (this.url.startsWith(emulatorQueueEndpoint)) {\n        // Emulator URL starts with `http://127.0.0.1:10001/devstoreaccount1`\n        queueName = urlWithoutSAS.match(emulatorQueueEndpoint + \"/([^/]*)\")![1];\n      } else {\n        queueName = urlWithoutSAS.match(\"([^/]*)://([^/]*)/([^/]*)\")![3];\n      }\n\n      if (!queueName) {\n        throw new Error(\"Provided queueName is invalid.\");\n      } else {\n        return queueName;\n      }\n    } catch (error) {\n      throw new Error(\"Unable to extract queueName with provided information.\");\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a Queue. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link QueueSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n *\n * @export\n * @class QueueSASPermissions\n */\nexport class QueueSASPermissions {\n  /**\n   * Creates a {@link QueueSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @static\n   * @param {string} permissions\n   * @returns {QueueSASPermissions}\n   * @memberof QueueSASPermissions\n   */\n  public static parse(permissions: string): QueueSASPermissions {\n    const queueSASPermissions = new QueueSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          queueSASPermissions.read = true;\n          break;\n        case \"a\":\n          queueSASPermissions.add = true;\n          break;\n        case \"u\":\n          queueSASPermissions.update = true;\n          break;\n        case \"p\":\n          queueSASPermissions.process = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return queueSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   *\n   * @type {boolean}\n   * @memberof QueueSASPermissions\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   *\n   * @type {boolean}\n   * @memberof QueueSASPermissions\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Update access granted.\n   *\n   * @type {boolean}\n   * @memberof QueueSASPermissions\n   */\n  public update: boolean = false;\n\n  /**\n   * Specifies Process access granted.\n   *\n   * @type {boolean}\n   * @memberof QueueSASPermissions\n   */\n  public process: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns {string} A string which represents the QueueSASPermissions\n   * @memberof QueueSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { QueueSASPermissions } from \"./QueueSASPermissions\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol } from \"./SASQueryParameters\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"./utils/constants\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * QueueSASSignatureValues is used to help generating Queue service SAS tokens for queues.\n *\n * @export\n * @class QueueSASSignatureValues\n */\nexport interface QueueSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   *\n   * @type {string}\n   * @memberof QueueSASSignatureValues\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   *\n   * @type {SASProtocol}\n   * @memberof QueueSASSignatureValues\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   *\n   * @type {Date}\n   * @memberof QueueSASSignatureValues\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   *\n   * @type {Date}\n   * @memberof QueueSASSignatureValues\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link QueueSASPermissions}\n   * being accessed for help constructing the permissions string.\n   *\n   * @type {QueueSASPermissions}\n   * @memberof QueueSASSignatureValues\n   */\n  permissions?: QueueSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   *\n   * @type {SasIPRange}\n   * @memberof QueueSASSignatureValues\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the queue the SAS user may access.\n   *\n   * @type {string}\n   * @memberof QueueSASSignatureValues\n   */\n  queueName: string;\n\n  /**\n   * Optional. The name of the access policy on the queue this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   *\n   * @type {string}\n   * @memberof QueueSASSignatureValues\n   */\n  identifier?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @export\n * @param {QueueSASSignatureValues} queueSASSignatureValues\n * @param {StorageSharedKeyCredential} sharedKeyCredential\n * @returns {SASQueryParameters}\n */\nexport function generateQueueSASQueryParameters(\n  queueSASSignatureValues: QueueSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !queueSASSignatureValues.identifier &&\n    (!queueSASSignatureValues.permissions && !queueSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Queue SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = queueSASSignatureValues.version\n    ? queueSASSignatureValues.version\n    : SERVICE_VERSION;\n  let verifiedPermissions: string | undefined;\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  if (queueSASSignatureValues.permissions) {\n    verifiedPermissions = QueueSASPermissions.parse(\n      queueSASSignatureValues.permissions.toString()\n    ).toString();\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    queueSASSignatureValues.startsOn\n      ? truncatedISO8061Date(queueSASSignatureValues.startsOn, false)\n      : \"\",\n    queueSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(queueSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(sharedKeyCredential.accountName, queueSASSignatureValues.queueName),\n    queueSASSignatureValues.identifier,\n    queueSASSignatureValues.ipRange ? ipRangeToString(queueSASSignatureValues.ipRange) : \"\",\n    queueSASSignatureValues.protocol ? queueSASSignatureValues.protocol : \"\",\n    version\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    queueSASSignatureValues.protocol,\n    queueSASSignatureValues.startsOn,\n    queueSASSignatureValues.expiresOn,\n    queueSASSignatureValues.ipRange,\n    queueSASSignatureValues.identifier\n  );\n}\n\nfunction getCanonicalName(accountName: string, queueName: string): string {\n  // Queue: \"/queue/account/queueName\"\n  return `/queue/${accountName}/${queueName}`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  getDefaultProxySettings\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\nimport {\n  ListQueuesIncludeType,\n  QueueCreateResponse,\n  QueueDeleteResponse,\n  QueueItem,\n  QueueServiceProperties,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsResponse,\n  ServiceListQueuesSegmentResponse,\n  ServiceSetPropertiesResponse\n} from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { appendToURLPath, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\nimport { QueueClient, QueueCreateOptions, QueueDeleteOptions } from \"./QueueClient\";\n\n/**\n * Options to configure {@link QueueServiceClient.getProperties} operation\n *\n * @export\n * @interface ServiceGetPropertiesOptions\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.setProperties} operation\n *\n * @export\n * @interface ServiceSetPropertiesOptions\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceSetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.getStatistics} operation\n *\n * @export\n * @interface ServiceGetStatisticsOptions\n */\nexport interface ServiceGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceGetStatisticsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Queue Service - List Queues Segment operation\n *\n * See:\n * - {@link QueueServiceClient.listSegments}\n * - {@link QueueServiceClient.listQueuesSegment}\n * - {@link QueueServiceClient.listItems}\n *\n * @interface ServiceListQueuesSegmentOptions\n */\ninterface ServiceListQueuesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListQueuesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only queues\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of queues\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify that the queue's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListQueuesIncludeType;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.listQueues} operation\n *\n * @export\n * @interface ServiceListQueuesOptions\n */\nexport interface ServiceListQueuesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListQueuesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only queues\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies whether the queue's metadata be returned as part of the response\n   * body.\n   */\n  includeMetadata?: boolean;\n}\n\n/**\n * A QueueServiceClient represents a URL to the Azure Storage Queue service allowing you\n * to manipulate queues.\n *\n * @export\n * @class QueueServiceClient\n */\nexport class QueueServiceClient extends StorageClient {\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @returns {QueueServiceClient} A new QueueServiceClient object from the given connection string.\n   * @memberof QueueServiceClient\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    options?: StoragePipelineOptions\n  ): QueueServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new QueueServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new QueueServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * serviceContext provided by protocol layer.\n   *\n   * @private\n   * @type {Service}\n   * @memberof QueueServiceClient\n   */\n  private serviceContext: Service;\n\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue service, such as\n   *                     \"https://myaccount.queue.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.queue.core.windows.net?sasString\".\n   * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueServiceClient\n   *\n   * @example\n   * ```js\n   * const account = \"<account>\";\n   *\n   * // Use a TokenCredential implementation from the @azure/identity package.\n   * // In this case, a DefaultAzureCredential (recommended for most users)\n   * const credential = new DefaultAzureCredential();\n   *\n   * const queueServiceClient = new QueueServiceClient(\n   *   `https://${account}.queue.core.windows.net`,\n   *   credential\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const account = \"<account>\";\n   *\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, \"<account key>\");\n   *\n   * const queueServiceClient = new QueueServiceClient(\n   *   `https://${account}.queue.core.windows.net`,\n   *   sharedKeyCredential,\n   *   {\n   *     retryOptions: { maxTries: 4 }, // Retry options\n   *     telemetry: { value: \"BasicSample/V11.0.0\" } // Customized telemetry string\n   *   }\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue service, such as\n   *                     \"https://myaccount.queue.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.queue.core.windows.net?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof QueueServiceClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n      credentialOrPipeline instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second paramter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a {@link QueueClient} object.\n   *\n   * @param {string} queueName\n   * @returns {QueueClient} a new QueueClient\n   * @memberof QueueServiceClient\n   *\n   * @example\n   * ```js\n   * const queueClient = queueServiceClient.getQueueClient(\"<new queue name>\");\n   * const createQueueResponse = await queueClient.create();\n   * ```\n   */\n  public getQueueClient(queueName: string): QueueClient {\n    return new QueueClient(appendToURLPath(this.url, queueName), this.pipeline);\n  }\n\n  /**\n   * Returns a list of the queues under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1\n   *\n   * @param {string} [marker] A string value that identifies the portion of\n   *                        the list of queues to be returned with the next listing operation. The\n   *                        operation returns the NextMarker value within the response body if the\n   *                        listing operation did not return all queues remaining to be listed\n   *                        with the current page. The NextMarker value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {Promise<ServiceListQueuesSegmentResponse>} Response data for the list queues segment operation.\n   * @memberof QueueServiceClient\n   */\n  private async listQueuesSegment(\n    marker?: string,\n    options: ServiceListQueuesSegmentOptions = {}\n  ): Promise<ServiceListQueuesSegmentResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-listQueuesSegment\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.listQueuesSegment({\n        abortSignal: options.abortSignal,\n        marker: marker,\n        maxPageSize: options.maxPageSize,\n        prefix: options.prefix,\n        include: options.include === undefined ? undefined : [options.include],\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link ServiceListQueuesSegmentResponse} objects\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                        the list of queues to be returned with the next listing operation. The\n   *                        operation returns the NextMarker value within the response body if the\n   *                        listing operation did not return all queues remaining to be listed\n   *                        with the current page. The NextMarker value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {AsyncIterableIterator<ServiceListQueuesSegmentResponse>}\n   * @memberof QueueServiceClient\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListQueuesSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListQueuesSegmentResponse> {\n    let listQueuesResponse;\n    do {\n      listQueuesResponse = await this.listQueuesSegment(marker, options);\n      marker = listQueuesResponse.continuationToken;\n      yield await listQueuesResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link QueueItem} objects\n   *\n   * @private\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {AsyncIterableIterator<QueueItem>}\n   * @memberof QueueServiceClient\n   */\n  private async *listItems(\n    options: ServiceListQueuesSegmentOptions = {}\n  ): AsyncIterableIterator<QueueItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.queueItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the queues\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the queues in pages.\n   * @example\n   * ```js\n   *    let i = 1;\n   *    for await (const item of queueServiceClient.listQueues()) {\n   *      console.log(`Queue${i}: ${item.name}`);\n   *      i++;\n   *    }\n   * ```\n   *\n   * @example\n   * ```js\n   *    // Generator syntax .next()\n   *    let i = 1;\n   *    let iterator = queueServiceClient.listQueues();\n   *    let item = await iterator.next();\n   *    while (!item.done) {\n   *      console.log(`Queue${i}: ${iterator.value.name}`);\n   *      i++;\n   *      item = await iterator.next();\n   *    }\n   * ```\n   *\n   * @example\n   * ```js\n   *    // Example for .byPage()\n   *    // passing optional maxPageSize in the page settings\n   *    let i = 1;\n   *    for await (const item2 of queueServiceClient.listQueues().byPage({ maxPageSize: 20 })) {\n   *      if (item2.queueItems) {\n   *        for (const queueItem of item2.queueItems) {\n   *          console.log(`Queue${i}: ${queueItem.name}`);\n   *          i++;\n   *        }\n   *      }\n   *    }\n   * ```\n   *\n   * @example\n   * ```js\n   *    let i = 1;\n   *    let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });\n   *    let item = (await iterator.next()).value;\n   *    // Prints 2 queue names\n   *    if (item.queueItems) {\n   *      for (const queueItem of item.queueItems) {\n   *        console.log(`Queue${i}: ${queueItem.name}`);\n   *        i++;\n   *      }\n   *    }\n   *    // Gets next marker\n   *    let marker = item.continuationToken;\n   *    // Passing next marker as continuationToken\n   *    iterator = queueServiceClient.listQueues().byPage({ continuationToken: marker, maxPageSize: 10 });\n   *    item = (await iterator.next()).value;\n   *    // Prints 10 queue names\n   *    if (item.queueItems) {\n   *      for (const queueItem of item.queueItems) {\n   *        console.log(`Queue${i}: ${queueItem.name}`);\n   *        i++;\n   *      }\n   *    }\n   * ```\n   *\n   * @param {ServiceListQueuesOptions} [options] Options to list queues operation.\n   * @memberof QueueServiceClient\n   * @returns {PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>} An asyncIterableIterator that supports paging.\n   */\n  public listQueues(\n    options: ServiceListQueuesOptions = {}\n  ): PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse> {\n    const updatedOptions: ServiceListQueuesSegmentOptions = {\n      ...options,\n      ...(options.includeMetadata ? { include: \"metadata\" } : {})\n    };\n\n    // AsyncIterableIterator to iterate over queues\n    const iter = this.listItems(updatedOptions);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...updatedOptions\n        });\n      }\n    };\n  }\n\n  /**\n   * Gets the properties of a storage account’s Queue service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-properties\n   *\n   * @param {ServiceGetPropertiesOptions} [options] Options to get properties operation.\n   * @returns {Promise<ServiceGetPropertiesResponse>} Response data including the queue service properties.\n   * @memberof QueueServiceClient\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-getProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s Queue service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-service-properties\n   *\n   * @param {QueueServiceProperties} properties\n   * @param {ServiceGetPropertiesOptions} [options] Options to set properties operation.\n   * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.\n   * @memberof QueueServiceClient\n   */\n  public async setProperties(\n    properties: QueueServiceProperties,\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-setProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Queue service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats\n   *\n   * @param {ServiceGetStatisticsOptions} [options] Options to get statistics operation.\n   * @returns {Promise<ServiceGetStatisticsResponse>} Response data for get statistics the operation.\n   * @memberof QueueServiceClient\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<ServiceGetStatisticsResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-getStatistics\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.getStatistics({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new queue under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4\n   *\n   * @param {string} queueName name of the queue to create\n   * @param {QueueCreateOptions} [options] Options to Queue create operation.\n   * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.\n   * @memberof QueueServiceClient\n   */\n  public async createQueue(\n    queueName: string,\n    options: QueueCreateOptions = {}\n  ): Promise<QueueCreateResponse> {\n    return this.getQueueClient(queueName).create(options);\n  }\n\n  /**\n   * Deletes the specified queue permanently.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3\n   *\n   * @param {string} queueName name of the queue to delete.\n   * @param {QueueDeleteOptions} [options] Options to Queue delete operation.\n   * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.\n   * @memberof QueueServiceClient\n   */\n  public async deleteQueue(\n    queueName: string,\n    options: QueueDeleteOptions = {}\n  ): Promise<QueueDeleteResponse> {\n    return this.getQueueClient(queueName).delete(options);\n  }\n}\n"],"names":["__extends","coreHttp.getDefaultUserAgentValue","coreHttp.ServiceClient","URLBuilder","SASProtocol","BaseRequestPolicy","createHmac","createClientLogger","StorageRetryPolicyType","AbortError","HttpPipelineLogLevel","HttpHeaders","os.type","os.release","tracingPolicy","keepAlivePolicy","generateClientRequestIdPolicy","deserializationPolicy","logPolicy","proxyPolicy","isTokenCredential","bearerTokenAuthenticationPolicy","coreHttp.QueryCollectionFormat","coreHttp.Serializer","Parameters.url","Parameters.timeoutInSeconds","Parameters.restype","Parameters.comp0","Parameters.version","Parameters.requestId","Mappers.QueueServiceProperties","Mappers.ServiceSetPropertiesHeaders","Mappers.StorageError","Mappers.ServiceGetPropertiesHeaders","Parameters.comp1","Mappers.QueueServiceStatistics","Mappers.ServiceGetStatisticsHeaders","Parameters.prefix","Parameters.marker","Parameters.maxPageSize","Parameters.include","Parameters.comp2","Mappers.ListQueuesSegmentResponse","Mappers.ServiceListQueuesSegmentHeaders","getPropertiesOperationSpec","serializer","Mappers","Parameters.metadata","Mappers.QueueCreateHeaders","Mappers.QueueDeleteHeaders","Parameters.comp3","Mappers.QueueGetPropertiesHeaders","Mappers.QueueSetMetadataHeaders","Parameters.comp4","Mappers.QueueGetAccessPolicyHeaders","Mappers.QueueSetAccessPolicyHeaders","Parameters.numberOfMessages","Parameters.visibilityTimeout0","Mappers.MessagesDequeueHeaders","Mappers.MessagesClearHeaders","Parameters.messageTimeToLive","Mappers.QueueMessage","Mappers.MessagesEnqueueHeaders","Parameters.peekonly","Mappers.MessagesPeekHeaders","deleteMethodOperationSpec","Parameters.popReceipt","Parameters.visibilityTimeout1","Mappers.MessageIdUpdateHeaders","Mappers.MessageIdDeleteHeaders","getTracer","SpanKind","isNode","getDefaultProxySettings","CanonicalCode","__asyncValues","__values","__asyncDelegator"],"mappings":"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"}