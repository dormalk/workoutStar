import { HttpResponse, TokenCredential } from "@azure/core-http";
import { EnqueuedMessage, DequeuedMessageItem, MessagesDequeueHeaders, MessagesDequeueOptionalParams, MessagesEnqueueHeaders, MessagesEnqueueOptionalParams, MessagesPeekHeaders, MessagesPeekOptionalParams, MessageIdUpdateResponse, MessageIdDeleteResponse, MessagesClearResponse, PeekedMessageItem, QueueCreateResponse, QueueDeleteResponse, QueueGetAccessPolicyHeaders, QueueGetPropertiesResponse, QueueSetAccessPolicyResponse, QueueSetMetadataResponse, SignedIdentifierModel } from "./generatedModels";
import { AbortSignalLike } from "@azure/abort-controller";
import { StoragePipelineOptions, Pipeline } from "./Pipeline";
import { StorageClient, CommonOptions } from "./StorageClient";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { Metadata } from "./models";
/**
 * Options to configure {@link QueueClient.create} operation
 *
 * @export
 * @interface QueueCreateOptions
 */
export interface QueueCreateOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * A collection of key-value string pair to associate with the queue object.
     * The keys need to be lower-case.
     *
     * @type {Metadata}
     * @memberof QueueCreateOptions
     */
    metadata?: Metadata;
}
/**
 * Options to configure {@link QueueClient.getProperties} operation
 *
 * @export
 * @interface QueueGetPropertiesOptions
 */
export interface QueueGetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueGetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueClient.delete} operation
 *
 * @export
 * @interface QueueDeleteOptions
 */
export interface QueueDeleteOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueDeleteOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueClient.getAccessPolicy} operation
 *
 * @export
 * @interface QueueGetAccessPolicyOptions
 */
export interface QueueGetAccessPolicyOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueGetAccessPolicyOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueClient.setAccessPolicy} operation
 *
 * @export
 * @interface QueueSetAccessPolicyOptions
 */
export interface QueueSetAccessPolicyOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueSetAccessPolicyOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueClient.setMetadata} operation
 *
 * @export
 * @interface QueueSetMetadataOptions
 */
export interface QueueSetMetadataOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueSetMetadataOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Signed identifier.
 *
 * @export
 * @interface SignedIdentifier
 */
export interface SignedIdentifier {
    /**
     * @member {string} id a unique id
     */
    id: string;
    /**
     * @member {AccessPolicy} accessPolicy
     */
    accessPolicy: {
        /**
         * @member {Date} startsOn the date-time the policy is active.
         */
        startsOn: Date;
        /**
         * @member {string} expiresOn the date-time the policy expires.
         */
        expiresOn: Date;
        /**
         * @member {string} permission the permissions for the acl policy
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
         */
        permissions: string;
    };
}
/**
 * Contains response data for the {@link QueueClient.getAccessPolicy} operation.
 */
export declare type QueueGetAccessPolicyResponse = {
    signedIdentifiers: SignedIdentifier[];
} & QueueGetAccessPolicyHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueGetAccessPolicyHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: SignedIdentifierModel[];
    };
};
/**
 * Options to configure {@link QueueClient.clearMessages} operation
 *
 * @export
 * @interface QueueClearMessagesOptions
 */
export interface QueueClearMessagesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueClearMessagesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueClient.sendMessage} operation
 *
 * @export
 * @interface QueueSendMessageOptions
 * @extends {MessagesEnqueueOptionalParams}
 */
export interface QueueSendMessageOptions extends MessagesEnqueueOptionalParams, CommonOptions {
}
/**
 * Options to configure {@link QueueClient.receiveMessages} operation
 *
 * @export
 * @interface QueueReceiveMessageOptions
 * @extends {MessagesDequeueOptionalParams}
 */
export interface QueueReceiveMessageOptions extends MessagesDequeueOptionalParams, CommonOptions {
}
/**
 * Options to configure {@link QueueClient.peekMessages} operation
 *
 * @export
 * @interface QueuePeekMessagesOptions
 * @extends {MessagesPeekOptionalParams}
 */
export interface QueuePeekMessagesOptions extends MessagesPeekOptionalParams, CommonOptions {
}
/**
 * Contains the response data for the {@link QueueClient.sendMessage} operation.
 */
export declare type QueueSendMessageResponse = {
    /**
     * @member {string} messageId The ID of the sent Message.
     */
    messageId: string;
    /**
     * @member {string} popReceipt This value is required to delete the Message.
     * If deletion fails using this popreceipt then the message has been received
     * by another client.
     */
    popReceipt: string;
    /**
     * @member {Date} insertedOn The time that the message was inserted into the
     * Queue.
     */
    insertedOn: Date;
    /**
     * @member {Date} expiresOn The time that the message will expire and be
     * automatically deleted.
     */
    expiresOn: Date;
    /**
     * @member {Date} nextVisibleOn The time that the message will again become
     * visible in the Queue.
     */
    nextVisibleOn: Date;
} & MessagesEnqueueHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesEnqueueHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: EnqueuedMessage[];
    };
};
/**
 * The object returned in the `receivedMessageItems` array when calling {@link QueueClient.receiveMessages}.
 *
 * See: {@link QueueReceiveMessageResponse}
 */
export declare type ReceivedMessageItem = DequeuedMessageItem;
/**
 * Contains the response data for the {@link QueueClient.receiveMessages} operation.
 */
export declare type QueueReceiveMessageResponse = {
    receivedMessageItems: ReceivedMessageItem[];
} & MessagesDequeueHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesDequeueHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ReceivedMessageItem[];
    };
};
/**
 * Contains the response data for the {@link QueueClient.peekMessages} operation.
 */
export declare type QueuePeekMessagesResponse = {
    peekedMessageItems: PeekedMessageItem[];
} & MessagesPeekHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesPeekHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: PeekedMessageItem[];
    };
};
/**
 * Options to configure the {@link QueueClient.deleteMessage} operation
 *
 * @export
 * @interface QueueDeleteMessageOptions
 */
export interface QueueDeleteMessageOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueDeleteMessageOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the {@link QueueClient.updateMessage} operation.
 */
export declare type QueueUpdateMessageResponse = MessageIdUpdateResponse;
/**
 * Contains response data for the {@link QueueClient.deleteMessage} operation.
 */
export declare type QueueDeleteMessageResponse = MessageIdDeleteResponse;
/**
 * Contains response data for the {@link QueueClient.clearMessages} operation.
 */
export declare type QueueClearMessagesResponse = MessagesClearResponse;
/**
 * Options to configure {@link QueueClient.updateMessage} operation
 *
 * @export
 * @interface QueueUpdateMessageOptions
 */
export interface QueueUpdateMessageOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueUpdateMessageOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * A QueueClient represents a URL to an Azure Storage Queue's messages allowing you to manipulate its messages.
 *
 * @export
 * @class QueueClient
 */
export declare class QueueClient extends StorageClient {
    /**
     * messagesContext provided by protocol layer.
     *
     * @private
     * @type {Messages}
     * @memberof QueueClient
     */
    private messagesContext;
    /**
     * queueContext provided by protocol layer.
     *
     * @private
     * @type {Queue}
     * @memberof QueueClient
     */
    private queueContext;
    private _name;
    private _messagesUrl;
    /**
     * The name of the queue.
     */
    readonly name: string;
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {string} queueName Queue name.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueClient
     */
    constructor(connectionString: string, queueName: string, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue?sasString".
     * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueClient
     */
    constructor(url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue?sasString".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof QueueClient
     */
    constructor(url: string, pipeline: Pipeline);
    private getMessageIdContext;
    /**
     * Creates a new queue under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
     *
     * @param {QueueCreateOptions} [options] Options to Queue create operation.
     * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.
     * @memberof QueueClient
     *
     * @example
     * ```js
     * const queueClient = queueServiceClient.getQueueClient("<new queue name>");
     * const createQueueResponse = await queueClient.create();
     * ```
     */
    create(options?: QueueCreateOptions): Promise<QueueCreateResponse>;
    /**
     * Deletes the specified queue permanently.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
     *
     * @param {QueueDeleteOptions} [options] Options to Queue delete operation.
     * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.
     * @memberof QueueClient
     *
     * @example
     * ```js
     * const deleteQueueResponse = await queueClient.delete();
     * console.log(
     *   "Delete queue successfully, service assigned request Id:", deleteQueueResponse.requestId
     * );
     * ```
     */
    delete(options?: QueueDeleteOptions): Promise<QueueDeleteResponse>;
    /**
     * Gets all user-defined metadata and system properties for the specified
     * queue. Metadata is associated with the queue as name-values pairs.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata
     *
     * @param {QueueGetPropertiesOptions} [options] Options to Queue get properties operation.
     * @returns {Promise<QueueGetPropertiesResponse>} Response data for the Queue get properties operation.
     * @memberof QueueClient
     */
    getProperties(options?: QueueGetPropertiesOptions): Promise<QueueGetPropertiesResponse>;
    /**
     * Sets one or more user-defined name-value pairs for the specified queue.
     *
     * If no option provided, or no metadata defined in the option parameter, the queue
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata
     *
     * @param {Metadata} [metadata] If no metadata provided, all existing metadata will be removed.
     * @param {QueueSetMetadataOptions} [options] Options to Queue set metadata operation.
     * @returns {Promise<QueueSetMetadataResponse>} Response data for the Queue set metadata operation.
     * @memberof QueueClient
     */
    setMetadata(metadata?: Metadata, options?: QueueSetMetadataOptions): Promise<QueueSetMetadataResponse>;
    /**
     * Gets details about any stored access policies specified on the queue that may be used with Shared Access Signatures.
     *
     * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.
     * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl
     *
     * @param {QueueGetAccessPolicyOptions} [options] Options to Queue get access policy operation.
     * @returns {Promise<QueueGetAccessPolicyResponse>} Response data for the Queue get access policy operation.
     * @memberof QueueClient
     */
    getAccessPolicy(options?: QueueGetAccessPolicyOptions): Promise<QueueGetAccessPolicyResponse>;
    /**
     * Sets stored access policies for the queue that may be used with Shared Access Signatures.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
     *
     * @param {SignedIdentifier[]} [queueAcl]
     * @param {QueueSetAccessPolicyOptions} [options] Options to Queue set access policy operation.
     * @returns {Promise<QueueSetAccessPolicyResponse>} Response data for the Queue set access policy operation.
     * @memberof QueueClient
     */
    setAccessPolicy(queueAcl?: SignedIdentifier[], options?: QueueSetAccessPolicyOptions): Promise<QueueSetAccessPolicyResponse>;
    /**
     * Clear deletes all messages from a queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages
     *
     * @param {QueueClearMessagesOptions} [options] Options to clear messages operation.
     * @returns {Promise<QueueClearMessagesResponse>} Response data for the clear messages operation.
     * @memberof QueueClient
     */
    clearMessages(options?: QueueClearMessagesOptions): Promise<QueueClearMessagesResponse>;
    /**
     * sendMessage adds a new message to the back of a queue. The visibility timeout specifies how long
     * the message should be invisible to Dequeue and Peek operations.
     * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.
     * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-message
     *
     * @param {string} messageText Text of the message to send
     * @param {QueueSendMessageOptions} [options] Options to send messages operation.
     * @returns {Promise<QueueSendMessageResponse>} Response data for the send messages operation.
     * @memberof QueueClient
     *
     * @example
     * ```js
     * const sendMessageResponse = await queueClient.sendMessage("Hello World!");
     * console.log(
     *   "Sent message successfully, service assigned message Id:", sendMessageResponse.messageId,
     *   "service assigned request Id:", sendMessageResponse.requestId
     * );
     * ```
     */
    sendMessage(messageText: string, options?: QueueSendMessageOptions): Promise<QueueSendMessageResponse>;
    /**
     * receiveMessages retrieves one or more messages from the front of the queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages
     *
     * @param {QueueReceiveMessageOptions} [options] Options to receive messages operation.
     * @returns {Promise<QueueReceiveMessageResponse>} Response data for the receive messages operation.
     * @memberof QueueClient
     *
     * @example
     * ```js
     * const response = await queueClient.receiveMessages();
     * if (response.receivedMessageItems.length == 1) {
     *   const receivedMessageItem = response.receivedMessageItems[0];
     *   console.log("Processing & deleting message with content:", receivedMessageItem.messageText);
     *   const deleteMessageResponse = await queueClient.deleteMessage(
     *     receivedMessageItem.messageId,
     *     receivedMessageItem.popReceipt
     *   );
     *   console.log(
     *     "Delete message succesfully, service assigned request Id:",
     *     deleteMessageResponse.requestId
     *   );
     * }
     * ```
     */
    receiveMessages(options?: QueueReceiveMessageOptions): Promise<QueueReceiveMessageResponse>;
    /**
     * peekMessages retrieves one or more messages from the front of the queue but does not alter the visibility of the message.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages
     *
     * @param {QueuePeekMessagesOptions} [options] Options to peek messages operation.
     * @returns {QueuePeekMessagesResponse>} Response data for the peek messages operation.
     * @memberof QueueClient
     *
     * @example
     * ```js
     * const peekMessagesResponse = await queueClient.peekMessages();
     * console.log("The peeked message is:", peekMessagesResponse.peekedMessageItems[0].messageText);
     * ```
     */
    peekMessages(options?: QueuePeekMessagesOptions): Promise<QueuePeekMessagesResponse>;
    /**
     * deleteMessage permanently removes the specified message from its queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2
     *
     * @param {string} messageId Id of the message.
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.
     * @param {QueueDeleteMessageOptions} [options] Options to delete message operation.
     * @returns {Promise<QueueDeleteMessageResponse>} Response data for the delete message operation.
     * @memberof QueueClient
     */
    deleteMessage(messageId: string, popReceipt: string, options?: QueueDeleteMessageOptions): Promise<QueueDeleteMessageResponse>;
    /**
     * Update changes a message's visibility timeout and contents.
     * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.
     * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/update-message
     *
     * @param {string} messageId Id of the message
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.
     * @param {string} message Message to update.
     * @param {number} visibilityTimeout Specifies the new visibility timeout value, in seconds,
     *                                   relative to server time. The new value must be larger than or equal to 0,
     *                                   and cannot be larger than 7 days. The visibility timeout of a message cannot
     *                                   be set to a value later than the expiry time.
     *                                   A message can be updated until it has been deleted or has expired.
     * @param {QueueUpdateMessageOptions} [options] Options to update message operation.
     * @returns {Promise<QueueUpdateMessageResponse>} Response data for the update message operation.
     * @memberof QueueClient
     */
    updateMessage(messageId: string, popReceipt: string, message: string, visibilityTimeout?: number, options?: QueueUpdateMessageOptions): Promise<QueueUpdateMessageResponse>;
    private getQueueNameFromUrl;
}
//# sourceMappingURL=QueueClient.d.ts.map