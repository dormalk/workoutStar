import { AbortSignalLike } from "@azure/abort-controller";
import { HttpHeaders } from "@azure/core-http";
import { StorageClientContext } from "../generated/src/storageClientContext";
import { Pipeline } from "../Pipeline";
/**
 * Append a string to URL path. Will remove duplicated "/" in front of the string
 * when URL path ends with a "/".
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} name String to be appended to URL
 * @returns {string} An updated URL string
 */
export declare function appendToURLPath(url: string, name: string): string;
/**
 * Set URL parameter name and value. If name exists in URL parameters, old value
 * will be replaced by name key. If not provide value, the parameter will be deleted.
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} name Parameter name
 * @param {string} [value] Parameter value
 * @returns {string} An updated URL string
 */
export declare function setURLParameter(url: string, name: string, value?: string): string;
/**
 * Get URL parameter by name.
 *
 * @export
 * @param {string} url URL string
 * @param {string} name Parameter name
 * @returns {(string | string[] | undefined)} Parameter value(s) for the given parameter name.
 */
export declare function getURLParameter(url: string, name: string): string | string[] | undefined;
/**
 * Set URL host.
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} host New host string
 * @returns An updated URL string
 */
export declare function setURLHost(url: string, host: string): string;
/**
 * Gets URL path from an URL string.
 *
 * @export
 * @param {string} url Source URL string
 * @returns {(string | undefined)} The path part of the given URL string.
 */
export declare function getURLPath(url: string): string | undefined;
/**
 * Gets URL query key value pairs from an URL string.
 *
 * @export
 * @param {string} url
 * @returns {{[key: string]: string}} query key value string pairs from the given URL string.
 */
export declare function getURLQueries(url: string): {
    [key: string]: string;
};
export interface ConnectionString {
    kind: "AccountConnString" | "SASConnString";
    url: string;
    accountName: string;
    accountKey?: any;
    accountSas?: string;
    proxyUri?: string;
}
/**
 *
 * @param {string} connectionString Account connection string.
 * @param {string} argument property to get value from the connection string.
 * @returns {string} Value of the property specified in argument.
 */
export declare function getValueInConnString(connectionString: string, argument: "QueueEndpoint" | "AccountName" | "AccountKey" | "DefaultEndpointsProtocol" | "EndpointSuffix" | "SharedAccessSignature"): string;
/**
 * Extracts the parts of an Azure Storage account connection string.
 *
 * @export
 * @param {string} connectionString Connection string.
 * @returns {ConnectionString} String key value pairs of the storage account's url and credentials.
 */
export declare function extractConnectionStringParts(connectionString: string): ConnectionString;
/**
 * Rounds a date off to seconds.
 *
 * @export
 * @param {Date} date
 * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
 *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
 * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component
 */
export declare function truncatedISO8061Date(date: Date, withMilliseconds?: boolean): string;
/**
 * Delay specified time interval.
 *
 * @export
 * @param {number} timeInMs
 * @param {AbortSignalLike} [aborter]
 * @param {Error} [abortError]
 */
export declare function delay(timeInMs: number, aborter?: AbortSignalLike, abortError?: Error): Promise<unknown>;
/**
 * String.prototype.padStart()
 *
 * @export
 * @param {string} currentString
 * @param {number} targetLength
 * @param {string} [padString=" "]
 * @returns {string}
 */
export declare function padStart(currentString: string, targetLength: number, padString?: string): string;
/**
 * Sanitizes a url by removing the Signature parameter
 * @param {string} url to sanitize
 * @returns {string} sanitized string
 */
export declare function sanitizeURL(url: string): string;
/**
 * Sanitize headers by removing sensitive values such as AUTHORIZATION and X_MS_COPY_SOURCE
 * @param {HttpHeaders} originalHeader original headers
 * @returns {HttpHeaders} sanitized headers
 */
export declare function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders;
/**
 * Extracts account name from the url
 * @param {string} url url to extract the account name from
 * @returns {string} with the account name
 */
export declare function getAccountNameFromUrl(url: string): string;
/**
 * Gets a new StorageClientContext
 * @param {string} url Url used for the StorageClientContext
 * @param {url} pipeline a pipeline containing HTTP request policies
 * @returns {StorageClientContext} new StorageClientContext
 */
export declare function getStorageClientContext(url: string, pipeline: Pipeline): StorageClientContext;
//# sourceMappingURL=utils.common.d.ts.map