import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a Messages. */
export declare class Messages {
    private readonly client;
    /**
     * Create a Messages.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * The Dequeue operation retrieves one or more messages from the front of the queue.
     * @param [options] The optional parameters
     * @returns Promise<Models.MessagesDequeueResponse>
     */
    dequeue(options?: Models.MessagesDequeueOptionalParams): Promise<Models.MessagesDequeueResponse>;
    /**
     * @param callback The callback
     */
    dequeue(callback: coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    dequeue(options: Models.MessagesDequeueOptionalParams, callback: coreHttp.ServiceCallback<Models.DequeuedMessageItem[]>): void;
    /**
     * The Clear operation deletes all messages from the specified queue.
     * @param [options] The optional parameters
     * @returns Promise<Models.MessagesClearResponse>
     */
    clear(options?: Models.MessagesClearOptionalParams): Promise<Models.MessagesClearResponse>;
    /**
     * @param callback The callback
     */
    clear(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    clear(options: Models.MessagesClearOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * The Enqueue operation adds a new message to the back of the message queue. A visibility timeout
     * can also be specified to make the message invisible until the visibility timeout expires. A
     * message must be in a format that can be included in an XML request with UTF-8 encoding. The
     * encoded message can be up to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size
     * for previous versions.
     * @param queueMessage A Message object which can be stored in a Queue
     * @param [options] The optional parameters
     * @returns Promise<Models.MessagesEnqueueResponse>
     */
    enqueue(queueMessage: Models.QueueMessage, options?: Models.MessagesEnqueueOptionalParams): Promise<Models.MessagesEnqueueResponse>;
    /**
     * @param queueMessage A Message object which can be stored in a Queue
     * @param callback The callback
     */
    enqueue(queueMessage: Models.QueueMessage, callback: coreHttp.ServiceCallback<Models.EnqueuedMessage[]>): void;
    /**
     * @param queueMessage A Message object which can be stored in a Queue
     * @param options The optional parameters
     * @param callback The callback
     */
    enqueue(queueMessage: Models.QueueMessage, options: Models.MessagesEnqueueOptionalParams, callback: coreHttp.ServiceCallback<Models.EnqueuedMessage[]>): void;
    /**
     * The Peek operation retrieves one or more messages from the front of the queue, but does not
     * alter the visibility of the message.
     * @param [options] The optional parameters
     * @returns Promise<Models.MessagesPeekResponse>
     */
    peek(options?: Models.MessagesPeekOptionalParams): Promise<Models.MessagesPeekResponse>;
    /**
     * @param callback The callback
     */
    peek(callback: coreHttp.ServiceCallback<Models.PeekedMessageItem[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    peek(options: Models.MessagesPeekOptionalParams, callback: coreHttp.ServiceCallback<Models.PeekedMessageItem[]>): void;
}
//# sourceMappingURL=messages.d.ts.map