import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a Queue. */
export declare class Queue {
    private readonly client;
    /**
     * Create a Queue.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * creates a new queue under the given account.
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueCreateResponse>
     */
    create(options?: Models.QueueCreateOptionalParams): Promise<Models.QueueCreateResponse>;
    /**
     * @param callback The callback
     */
    create(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    create(options: Models.QueueCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * operation permanently deletes the specified queue
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueDeleteResponse>
     */
    deleteMethod(options?: Models.QueueDeleteMethodOptionalParams): Promise<Models.QueueDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.QueueDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Retrieves user-defined metadata and queue properties on the specified queue. Metadata is
     * associated with the queue as name-values pairs.
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueGetPropertiesResponse>
     */
    getProperties(options?: Models.QueueGetPropertiesOptionalParams): Promise<Models.QueueGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.QueueGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * sets user-defined metadata on the specified queue. Metadata is associated with the queue as
     * name-value pairs.
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueSetMetadataResponse>
     */
    setMetadata(options?: Models.QueueSetMetadataOptionalParams): Promise<Models.QueueSetMetadataResponse>;
    /**
     * @param callback The callback
     */
    setMetadata(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setMetadata(options: Models.QueueSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * returns details about any stored access policies specified on the queue that may be used with
     * Shared Access Signatures.
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueGetAccessPolicyResponse>
     */
    getAccessPolicy(options?: Models.QueueGetAccessPolicyOptionalParams): Promise<Models.QueueGetAccessPolicyResponse>;
    /**
     * @param callback The callback
     */
    getAccessPolicy(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getAccessPolicy(options: Models.QueueGetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
    /**
     * sets stored access policies for the queue that may be used with Shared Access Signatures
     * @param [options] The optional parameters
     * @returns Promise<Models.QueueSetAccessPolicyResponse>
     */
    setAccessPolicy(options?: Models.QueueSetAccessPolicyOptionalParams): Promise<Models.QueueSetAccessPolicyResponse>;
    /**
     * @param callback The callback
     */
    setAccessPolicy(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setAccessPolicy(options: Models.QueueSetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
}
//# sourceMappingURL=queue.d.ts.map