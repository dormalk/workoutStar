import { TokenCredential } from "@azure/core-http";
import { QueueCreateResponse, QueueDeleteResponse, QueueItem, QueueServiceProperties, ServiceGetPropertiesResponse, ServiceGetStatisticsResponse, ServiceListQueuesSegmentResponse, ServiceSetPropertiesResponse } from "./generatedModels";
import { AbortSignalLike } from "@azure/abort-controller";
import { StoragePipelineOptions, Pipeline } from "./Pipeline";
import { StorageClient, CommonOptions } from "./StorageClient";
import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { QueueClient, QueueCreateOptions, QueueDeleteOptions } from "./QueueClient";
/**
 * Options to configure {@link QueueServiceClient.getProperties} operation
 *
 * @export
 * @interface ServiceGetPropertiesOptions
 */
export interface ServiceGetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceGetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueServiceClient.setProperties} operation
 *
 * @export
 * @interface ServiceSetPropertiesOptions
 */
export interface ServiceSetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceSetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueServiceClient.getStatistics} operation
 *
 * @export
 * @interface ServiceGetStatisticsOptions
 */
export interface ServiceGetStatisticsOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceGetStatisticsOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure {@link QueueServiceClient.listQueues} operation
 *
 * @export
 * @interface ServiceListQueuesOptions
 */
export interface ServiceListQueuesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceListQueuesOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Filters the results to return only queues
     * whose name begins with the specified prefix.
     */
    prefix?: string;
    /**
     * Specifies whether the queue's metadata be returned as part of the response
     * body.
     */
    includeMetadata?: boolean;
}
/**
 * A QueueServiceClient represents a URL to the Azure Storage Queue service allowing you
 * to manipulate queues.
 *
 * @export
 * @class QueueServiceClient
 */
export declare class QueueServiceClient extends StorageClient {
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @returns {QueueServiceClient} A new QueueServiceClient object from the given connection string.
     * @memberof QueueServiceClient
     */
    static fromConnectionString(connectionString: string, options?: StoragePipelineOptions): QueueServiceClient;
    /**
     * serviceContext provided by protocol layer.
     *
     * @private
     * @type {Service}
     * @memberof QueueServiceClient
     */
    private serviceContext;
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue service, such as
     *                     "https://myaccount.queue.core.windows.net". You can append a SAS
     *                     if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
     * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueServiceClient
     *
     * @example
     * ```js
     * const account = "<account>";
     *
     * // Use a TokenCredential implementation from the @azure/identity package.
     * // In this case, a DefaultAzureCredential (recommended for most users)
     * const credential = new DefaultAzureCredential();
     *
     * const queueServiceClient = new QueueServiceClient(
     *   `https://${account}.queue.core.windows.net`,
     *   credential
     * }
     * ```
     *
     * @example
     * ```js
     * const account = "<account>";
     *
     * const sharedKeyCredential = new StorageSharedKeyCredential(account, "<account key>");
     *
     * const queueServiceClient = new QueueServiceClient(
     *   `https://${account}.queue.core.windows.net`,
     *   sharedKeyCredential,
     *   {
     *     retryOptions: { maxTries: 4 }, // Retry options
     *     telemetry: { value: "BasicSample/V11.0.0" } // Customized telemetry string
     *   }
     * );
     * ```
     */
    constructor(url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue service, such as
     *                     "https://myaccount.queue.core.windows.net". You can append a SAS
     *                     if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof QueueServiceClient
     */
    constructor(url: string, pipeline: Pipeline);
    /**
     * Creates a {@link QueueClient} object.
     *
     * @param {string} queueName
     * @returns {QueueClient} a new QueueClient
     * @memberof QueueServiceClient
     *
     * @example
     * ```js
     * const queueClient = queueServiceClient.getQueueClient("<new queue name>");
     * const createQueueResponse = await queueClient.create();
     * ```
     */
    getQueueClient(queueName: string): QueueClient;
    /**
     * Returns a list of the queues under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1
     *
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of queues to be returned with the next listing operation. The
     *                        operation returns the NextMarker value within the response body if the
     *                        listing operation did not return all queues remaining to be listed
     *                        with the current page. The NextMarker value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {Promise<ServiceListQueuesSegmentResponse>} Response data for the list queues segment operation.
     * @memberof QueueServiceClient
     */
    private listQueuesSegment;
    /**
     * Returns an AsyncIterableIterator for {@link ServiceListQueuesSegmentResponse} objects
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of queues to be returned with the next listing operation. The
     *                        operation returns the NextMarker value within the response body if the
     *                        listing operation did not return all queues remaining to be listed
     *                        with the current page. The NextMarker value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {AsyncIterableIterator<ServiceListQueuesSegmentResponse>}
     * @memberof QueueServiceClient
     */
    private listSegments;
    /**
     * Returns an AsyncIterableIterator for {@link QueueItem} objects
     *
     * @private
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {AsyncIterableIterator<QueueItem>}
     * @memberof QueueServiceClient
     */
    private listItems;
    /**
     * Returns an async iterable iterator to list all the queues
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the queues in pages.
     * @example
     * ```js
     *    let i = 1;
     *    for await (const item of queueServiceClient.listQueues()) {
     *      console.log(`Queue${i}: ${item.name}`);
     *      i++;
     *    }
     * ```
     *
     * @example
     * ```js
     *    // Generator syntax .next()
     *    let i = 1;
     *    let iterator = queueServiceClient.listQueues();
     *    let item = await iterator.next();
     *    while (!item.done) {
     *      console.log(`Queue${i}: ${iterator.value.name}`);
     *      i++;
     *      item = await iterator.next();
     *    }
     * ```
     *
     * @example
     * ```js
     *    // Example for .byPage()
     *    // passing optional maxPageSize in the page settings
     *    let i = 1;
     *    for await (const item2 of queueServiceClient.listQueues().byPage({ maxPageSize: 20 })) {
     *      if (item2.queueItems) {
     *        for (const queueItem of item2.queueItems) {
     *          console.log(`Queue${i}: ${queueItem.name}`);
     *          i++;
     *        }
     *      }
     *    }
     * ```
     *
     * @example
     * ```js
     *    let i = 1;
     *    let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });
     *    let item = (await iterator.next()).value;
     *    // Prints 2 queue names
     *    if (item.queueItems) {
     *      for (const queueItem of item.queueItems) {
     *        console.log(`Queue${i}: ${queueItem.name}`);
     *        i++;
     *      }
     *    }
     *    // Gets next marker
     *    let marker = item.continuationToken;
     *    // Passing next marker as continuationToken
     *    iterator = queueServiceClient.listQueues().byPage({ continuationToken: marker, maxPageSize: 10 });
     *    item = (await iterator.next()).value;
     *    // Prints 10 queue names
     *    if (item.queueItems) {
     *      for (const queueItem of item.queueItems) {
     *        console.log(`Queue${i}: ${queueItem.name}`);
     *        i++;
     *      }
     *    }
     * ```
     *
     * @param {ServiceListQueuesOptions} [options] Options to list queues operation.
     * @memberof QueueServiceClient
     * @returns {PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>} An asyncIterableIterator that supports paging.
     */
    listQueues(options?: ServiceListQueuesOptions): PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>;
    /**
     * Gets the properties of a storage account’s Queue service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-properties
     *
     * @param {ServiceGetPropertiesOptions} [options] Options to get properties operation.
     * @returns {Promise<ServiceGetPropertiesResponse>} Response data including the queue service properties.
     * @memberof QueueServiceClient
     */
    getProperties(options?: ServiceGetPropertiesOptions): Promise<ServiceGetPropertiesResponse>;
    /**
     * Sets properties for a storage account’s Queue service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-service-properties
     *
     * @param {QueueServiceProperties} properties
     * @param {ServiceGetPropertiesOptions} [options] Options to set properties operation.
     * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.
     * @memberof QueueServiceClient
     */
    setProperties(properties: QueueServiceProperties, options?: ServiceGetPropertiesOptions): Promise<ServiceSetPropertiesResponse>;
    /**
     * Retrieves statistics related to replication for the Queue service. It is only
     * available on the secondary location endpoint when read-access geo-redundant
     * replication is enabled for the storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats
     *
     * @param {ServiceGetStatisticsOptions} [options] Options to get statistics operation.
     * @returns {Promise<ServiceGetStatisticsResponse>} Response data for get statistics the operation.
     * @memberof QueueServiceClient
     */
    getStatistics(options?: ServiceGetStatisticsOptions): Promise<ServiceGetStatisticsResponse>;
    /**
     * Creates a new queue under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
     *
     * @param {string} queueName name of the queue to create
     * @param {QueueCreateOptions} [options] Options to Queue create operation.
     * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.
     * @memberof QueueServiceClient
     */
    createQueue(queueName: string, options?: QueueCreateOptions): Promise<QueueCreateResponse>;
    /**
     * Deletes the specified queue permanently.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
     *
     * @param {string} queueName name of the queue to delete.
     * @param {QueueDeleteOptions} [options] Options to Queue delete operation.
     * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.
     * @memberof QueueServiceClient
     */
    deleteQueue(queueName: string, options?: QueueDeleteOptions): Promise<QueueDeleteResponse>;
}
//# sourceMappingURL=QueueServiceClient.d.ts.map