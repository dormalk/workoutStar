// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __assign, __awaiter, __generator } from "tslib";
/**
 * @summary Reaches to the service and updates the delete key's poll operation.
 * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.
 */
function update(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var state, name, client, requestOptions, deletedKey, _a, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    state = this.state;
                    name = state.name, client = state.client;
                    requestOptions = state.requestOptions || {};
                    if (options.abortSignal) {
                        requestOptions.abortSignal = options.abortSignal;
                    }
                    if (!!state.isStarted) return [3 /*break*/, 2];
                    return [4 /*yield*/, client.deleteKey(name, requestOptions)];
                case 1:
                    deletedKey = _b.sent();
                    state.isStarted = true;
                    state.result = deletedKey;
                    if (!deletedKey.properties.recoveryId) {
                        state.isCompleted = true;
                    }
                    _b.label = 2;
                case 2:
                    if (!!state.isCompleted) return [3 /*break*/, 6];
                    _b.label = 3;
                case 3:
                    _b.trys.push([3, 5, , 6]);
                    _a = state;
                    return [4 /*yield*/, client.getDeletedKey(name, { requestOptions: requestOptions })];
                case 4:
                    _a.result = _b.sent();
                    state.isCompleted = true;
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _b.sent();
                    if (error_1.statusCode === 403) {
                        // At this point, the resource exists but the user doesn't have access to it.
                        state.isCompleted = true;
                    }
                    else if (error_1.statusCode !== 404) {
                        state.error = error_1;
                        state.isCompleted = true;
                    }
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/, makeDeleteKeyPollOperation(state)];
            }
        });
    });
}
/**
 * @summary Reaches to the service and cancels the key's operation, also updating the key's poll operation
 * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller
 */
function cancel(_) {
    if (_ === void 0) { _ = {}; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            throw new Error("Canceling the deletion of a key is not supported.");
        });
    });
}
/**
 * @summary Serializes the create key's poll operation
 */
function toString() {
    return JSON.stringify({
        state: this.state
    });
}
/**
 * @summary Builds a create key's poll operation
 * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.
 */
export function makeDeleteKeyPollOperation(state) {
    return {
        state: __assign({}, state),
        update: update,
        cancel: cancel,
        toString: toString
    };
}
//# sourceMappingURL=operation.js.map