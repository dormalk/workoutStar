import { __awaiter, __generator } from "tslib";
import { KeyClient, CryptographyClient } from "../../src";
import { DefaultAzureCredential } from "@azure/identity";
import { createHash } from "crypto";
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var credential, vaultName, url, client, keyName, myWorkKey, cryptoClient, signatureValue, hash, digest, signature, verifyResult, encrypt, decrypt, wrapped, unwrapped;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    credential = new DefaultAzureCredential();
                    vaultName = process.env["KEYVAULT_NAME"] || "<keyvault-name>";
                    url = "https://" + vaultName + ".vault.azure.net";
                    client = new KeyClient(url, credential);
                    keyName = "localWorkKey";
                    return [4 /*yield*/, client.createKey(keyName, "RSA")];
                case 1:
                    myWorkKey = _a.sent();
                    cryptoClient = new CryptographyClient(myWorkKey.id, credential);
                    signatureValue = "MySignature";
                    hash = createHash("sha256");
                    hash.update(signatureValue);
                    digest = hash.digest();
                    console.log("digest: ", digest);
                    return [4 /*yield*/, cryptoClient.sign("RS256", digest)];
                case 2:
                    signature = _a.sent();
                    console.log("sign result: ", signature);
                    return [4 /*yield*/, cryptoClient.verify("RS256", digest, signature.result)];
                case 3:
                    verifyResult = _a.sent();
                    console.log("verify result: ", verifyResult);
                    return [4 /*yield*/, cryptoClient.encrypt("RSA1_5", Buffer.from("My Message"))];
                case 4:
                    encrypt = _a.sent();
                    console.log("encrypt result: ", encrypt);
                    return [4 /*yield*/, cryptoClient.decrypt("RSA1_5", encrypt.result)];
                case 5:
                    decrypt = _a.sent();
                    console.log("decrypt: ", decrypt.result.toString());
                    return [4 /*yield*/, cryptoClient.wrapKey("RSA-OAEP", Buffer.from("My Message"))];
                case 6:
                    wrapped = _a.sent();
                    console.log("wrap result: ", wrapped);
                    return [4 /*yield*/, cryptoClient.unwrapKey("RSA-OAEP", wrapped.result)];
                case 7:
                    unwrapped = _a.sent();
                    console.log("unwrap result: ", unwrapped);
                    return [4 /*yield*/, client.beginDeleteKey(keyName)];
                case 8:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
main().catch(function (err) {
    console.log("error code: ", err.code);
    console.log("error message: ", err.message);
    console.log("error stack: ", err.stack);
});
//# sourceMappingURL=cryptography.js.map