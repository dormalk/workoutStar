import { __asyncValues, __awaiter, __generator } from "tslib";
import { KeyClient } from "../../src";
import { DefaultAzureCredential } from "@azure/identity";
function main() {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function () {
        var credential, vaultName, url, client, keyName, ecKeyName, rsaKeyName, result, ecResult, rsaResult, key, _b, _c, keyProperties, key_1, e_1_1, updatedKey;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    credential = new DefaultAzureCredential();
                    vaultName = process.env["KEYVAULT_NAME"] || "<keyvault-name>";
                    url = "https://" + vaultName + ".vault.azure.net";
                    client = new KeyClient(url, credential);
                    keyName = "MyKeyName";
                    ecKeyName = "MyECKeyName";
                    rsaKeyName = "MyRSAKeyName";
                    return [4 /*yield*/, client.createKey(keyName, "EC")];
                case 1:
                    result = _d.sent();
                    console.log("key: ", result);
                    return [4 /*yield*/, client.createEcKey(ecKeyName, { curve: "P-256" })];
                case 2:
                    ecResult = _d.sent();
                    return [4 /*yield*/, client.createRsaKey(rsaKeyName, { keySize: 2048 })];
                case 3:
                    rsaResult = _d.sent();
                    console.log("Elliptic curve key: ", ecResult);
                    console.log("RSA Key: ", rsaResult);
                    return [4 /*yield*/, client.getKey(keyName)];
                case 4:
                    key = _d.sent();
                    console.log("key: ", key);
                    _d.label = 5;
                case 5:
                    _d.trys.push([5, 11, 12, 17]);
                    _b = __asyncValues(client.listPropertiesOfKeys());
                    _d.label = 6;
                case 6: return [4 /*yield*/, _b.next()];
                case 7:
                    if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 10];
                    keyProperties = _c.value;
                    return [4 /*yield*/, client.getKey(keyProperties.name)];
                case 8:
                    key_1 = _d.sent();
                    console.log("key: ", key_1);
                    _d.label = 9;
                case 9: return [3 /*break*/, 6];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _d.trys.push([12, , 15, 16]);
                    if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, _a.call(_b)];
                case 13:
                    _d.sent();
                    _d.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17: return [4 /*yield*/, client.updateKeyProperties(keyName, result.properties.version, {
                        enabled: false
                    })];
                case 18:
                    updatedKey = _d.sent();
                    console.log("updated key: ", updatedKey);
                    return [4 /*yield*/, client.beginDeleteKey(keyName)];
                case 19:
                    _d.sent();
                    return [4 /*yield*/, client.beginDeleteKey(ecKeyName)];
                case 20:
                    _d.sent();
                    return [4 /*yield*/, client.beginDeleteKey(rsaKeyName)];
                case 21:
                    _d.sent();
                    return [2 /*return*/];
            }
        });
    });
}
main().catch(function (err) {
    console.log("error code: ", err.code);
    console.log("error message: ", err.message);
    console.log("error stack: ", err.stack);
});
//# sourceMappingURL=helloWorld.js.map