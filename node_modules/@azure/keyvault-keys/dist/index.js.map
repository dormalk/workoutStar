{"version":3,"file":"index.js","sources":["../src/log.ts","../src/core/models/mappers.ts","../src/core/models/parameters.ts","../src/core/keyVaultClientContext.ts","../src/core/keyVaultClient.ts","../src/core/utils/constants.ts","../src/core/challengeBasedAuthenticationPolicy.ts","../src/lro/delete/operation.ts","../src/lro/delete/poller.ts","../src/lro/recover/operation.ts","../src/lro/recover/poller.ts","../src/core/utils.ts","../src/cryptographyClient.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"keyvault-keys\");\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const Attributes: coreHttp.CompositeMapper = {\n  serializedName: \"Attributes\",\n  type: {\n    name: \"Composite\",\n    className: \"Attributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      notBefore: {\n        serializedName: \"nbf\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      expires: {\n        serializedName: \"exp\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonWebKey: coreHttp.CompositeMapper = {\n  serializedName: \"JsonWebKey\",\n  type: {\n    name: \"Composite\",\n    className: \"JsonWebKey\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kty: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      n: {\n        serializedName: \"n\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      e: {\n        serializedName: \"e\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      d: {\n        serializedName: \"d\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dp: {\n        serializedName: \"dp\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dq: {\n        serializedName: \"dq\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      qi: {\n        serializedName: \"qi\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      p: {\n        serializedName: \"p\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      q: {\n        serializedName: \"q\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      k: {\n        serializedName: \"k\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      t: {\n        serializedName: \"key_hsm\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      crv: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x: {\n        serializedName: \"x\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      y: {\n        serializedName: \"y\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"KeyAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"KeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyBundle\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"KeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyItem\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyBundle\",\n    modelProperties: {\n      ...KeyBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyItem\",\n    modelProperties: {\n      ...KeyItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SecretAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretBundle\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"SecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretBundle\",\n    modelProperties: {\n      ...SecretBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretItem\",\n    modelProperties: {\n      ...SecretItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretRestoreParameters\",\n    modelProperties: {\n      secretBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageRestoreParameters\",\n    modelProperties: {\n      storageBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      x509Thumbprint: {\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyProperties: coreHttp.CompositeMapper = {\n  serializedName: \"KeyProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyProperties\",\n    modelProperties: {\n      exportable: {\n        serializedName: \"exportable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyType: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      reuseKey: {\n        serializedName: \"reuse_key\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretProperties: coreHttp.CompositeMapper = {\n  serializedName: \"SecretProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretProperties\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SubjectAlternativeNames: coreHttp.CompositeMapper = {\n  serializedName: \"SubjectAlternativeNames\",\n  type: {\n    name: \"Composite\",\n    className: \"SubjectAlternativeNames\",\n    modelProperties: {\n      emails: {\n        serializedName: \"emails\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      dnsNames: {\n        serializedName: \"dns_names\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      upns: {\n        serializedName: \"upns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const X509CertificateProperties: coreHttp.CompositeMapper = {\n  serializedName: \"X509CertificateProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"X509CertificateProperties\",\n    modelProperties: {\n      subject: {\n        serializedName: \"subject\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ekus: {\n        serializedName: \"ekus\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      subjectAlternativeNames: {\n        serializedName: \"sans\",\n        type: {\n          name: \"Composite\",\n          className: \"SubjectAlternativeNames\"\n        }\n      },\n      keyUsage: {\n        serializedName: \"key_usage\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      validityInMonths: {\n        serializedName: \"validity_months\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Trigger: coreHttp.CompositeMapper = {\n  serializedName: \"Trigger\",\n  type: {\n    name: \"Composite\",\n    className: \"Trigger\",\n    modelProperties: {\n      lifetimePercentage: {\n        serializedName: \"lifetime_percentage\",\n        constraints: {\n          InclusiveMaximum: 99,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      },\n      daysBeforeExpiry: {\n        serializedName: \"days_before_expiry\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Action: coreHttp.CompositeMapper = {\n  serializedName: \"Action\",\n  type: {\n    name: \"Composite\",\n    className: \"Action\",\n    modelProperties: {\n      actionType: {\n        serializedName: \"action_type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"EmailContacts\", \"AutoRenew\"]\n        }\n      }\n    }\n  }\n};\n\nexport const LifetimeAction: coreHttp.CompositeMapper = {\n  serializedName: \"LifetimeAction\",\n  type: {\n    name: \"Composite\",\n    className: \"LifetimeAction\",\n    modelProperties: {\n      trigger: {\n        serializedName: \"trigger\",\n        type: {\n          name: \"Composite\",\n          className: \"Trigger\"\n        }\n      },\n      action: {\n        serializedName: \"action\",\n        type: {\n          name: \"Composite\",\n          className: \"Action\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerParameters: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerParameters\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateType: {\n        serializedName: \"cty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateTransparency: {\n        serializedName: \"cert_transparency\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificatePolicy: coreHttp.CompositeMapper = {\n  serializedName: \"CertificatePolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificatePolicy\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyProperties: {\n        serializedName: \"key_props\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyProperties\"\n        }\n      },\n      secretProperties: {\n        serializedName: \"secret_props\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretProperties\"\n        }\n      },\n      x509CertificateProperties: {\n        serializedName: \"x509_props\",\n        type: {\n          name: \"Composite\",\n          className: \"X509CertificateProperties\"\n        }\n      },\n      lifetimeActions: {\n        serializedName: \"lifetime_actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LifetimeAction\"\n            }\n          }\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sid: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x509Thumbprint: {\n        readOnly: true,\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      policy: {\n        readOnly: true,\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      cer: {\n        serializedName: \"cer\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateBundle\",\n    modelProperties: {\n      ...CertificateBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateItem\",\n    modelProperties: {\n      ...CertificateItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreHttp.CompositeMapper = {\n  serializedName: \"Error\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        readOnly: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        readOnly: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        readOnly: true,\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperation: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperation\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperation\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      csr: {\n        serializedName: \"csr\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      cancellationRequested: {\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDetails: {\n        serializedName: \"status_details\",\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"request_id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerCredentials: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerCredentials\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerCredentials\",\n    modelProperties: {\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AdministratorDetails: coreHttp.CompositeMapper = {\n  serializedName: \"AdministratorDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"AdministratorDetails\",\n    modelProperties: {\n      firstName: {\n        serializedName: \"first_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastName: {\n        serializedName: \"last_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrganizationDetails: coreHttp.CompositeMapper = {\n  serializedName: \"OrganizationDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"OrganizationDetails\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      adminDetails: {\n        serializedName: \"admin_details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AdministratorDetails\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerBundle: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contact: coreHttp.CompositeMapper = {\n  serializedName: \"Contact\",\n  type: {\n    name: \"Composite\",\n    className: \"Contact\",\n    modelProperties: {\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contacts: coreHttp.CompositeMapper = {\n  serializedName: \"Contacts\",\n  type: {\n    name: \"Composite\",\n    className: \"Contacts\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contactList: {\n        serializedName: \"contacts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Contact\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyCreateParameters\",\n    modelProperties: {\n      kty: {\n        required: true,\n        serializedName: \"kty\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyImportParameters\",\n    modelProperties: {\n      hsm: {\n        serializedName: \"Hsm\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      key: {\n        required: true,\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationsParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationsParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationsParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeySignParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeySignParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeySignParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        required: true,\n        serializedName: \"digest\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      signature: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyUpdateParameters\",\n    modelProperties: {\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyRestoreParameters\",\n    modelProperties: {\n      keyBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretSetParameters\",\n    modelProperties: {\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretUpdateParameters\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateCreateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateImportParameters\",\n    modelProperties: {\n      base64EncodedCertificate: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateUpdateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateMergeParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateMergeParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateMergeParameters\",\n    modelProperties: {\n      x509Certificates: {\n        required: true,\n        serializedName: \"x5c\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"ByteArray\"\n            }\n          }\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerSetParameters\",\n    modelProperties: {\n      provider: {\n        required: true,\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerUpdateParameters\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperationUpdateParameter: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperationUpdateParameter\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperationUpdateParameter\",\n    modelProperties: {\n      cancellationRequested: {\n        required: true,\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationResult\",\n    modelProperties: {\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedKeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedCertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateIssuerItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupKeyResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupKeyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupKeyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupSecretResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupSecretResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupSecretResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupStorageResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupStorageResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupStorageResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const PendingCertificateSigningRequestResult: coreHttp.CompositeMapper = {\n  serializedName: \"PendingCertificateSigningRequestResult\",\n  type: {\n    name: \"Composite\",\n    className: \"PendingCertificateSigningRequestResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"StorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        readOnly: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        readOnly: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        readOnly: true,\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageBundle\",\n    modelProperties: {\n      ...StorageBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountCreateParameters\",\n    modelProperties: {\n      resourceId: {\n        required: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        required: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        required: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountUpdateParameters\",\n    modelProperties: {\n      activeKeyName: {\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountRegenerteKeyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountRegenerteKeyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountRegenerteKeyParameters\",\n    modelProperties: {\n      keyName: {\n        required: true,\n        serializedName: \"keyName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageAccountItem\",\n    modelProperties: {\n      ...StorageAccountItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"StorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"StorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedStorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      templateUri: {\n        readOnly: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        readOnly: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        readOnly: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionBundle\",\n    modelProperties: {\n      ...SasDefinitionBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionItem\",\n    modelProperties: {\n      ...SasDefinitionItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionCreateParameters\",\n    modelProperties: {\n      templateUri: {\n        required: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        required: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        required: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionUpdateParameters\",\n    modelProperties: {\n      templateUri: {\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVaultError: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVaultError\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVaultError\",\n    modelProperties: {\n      error: {\n        readOnly: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateRestoreParameters\",\n    modelProperties: {\n      certificateBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupCertificateResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupCertificateResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupCertificateResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const apiVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const includePending: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"includePending\"],\n  mapper: {\n    serializedName: \"includePending\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const issuerName: coreHttp.OperationURLParameter = {\n  parameterPath: \"issuerName\",\n  mapper: {\n    required: true,\n    serializedName: \"issuer-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"key-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxresults: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxresults\"],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMaximum: 25,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const sasDefinitionName: coreHttp.OperationURLParameter = {\n  parameterPath: \"sasDefinitionName\",\n  mapper: {\n    required: true,\n    serializedName: \"sas-definition-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const vaultBaseUrl: coreHttp.OperationURLParameter = {\n  parameterPath: \"vaultBaseUrl\",\n  mapper: {\n    required: true,\n    serializedName: \"vaultBaseUrl\",\n    defaultValue: \"\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"@azure/keyvault-keys\";\nconst packageVersion = \"4.0.0\";\n\nexport class KeyVaultClientContext extends coreHttp.ServiceClient {\n  apiVersion: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the KeyVaultClientContext class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    if (apiVersion == undefined) {\n      throw new Error(\"'apiVersion' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{vaultBaseUrl}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiVersion = apiVersion;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\n\nclass KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    super(credentials, apiVersion, options);\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @summary Creates a new key, stores it, then returns key parameters and attributes to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateKeyResponse>\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?: Models.KeyVaultClientCreateKeyOptionalParams\n  ): Promise<Models.CreateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options: Models.KeyVaultClientCreateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?:\n      | Models.KeyVaultClientCreateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.CreateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        kty,\n        options\n      },\n      createKeyOperationSpec,\n      callback\n    ) as Promise<Models.CreateKeyResponse>;\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the\n   * named key already exists, Azure Key Vault creates a new version of the key. This operation\n   * requires the keys/import permission.\n   * @summary Imports an externally created key, stores it, and returns key parameters and attributes\n   * to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportKeyResponse>\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?: Models.KeyVaultClientImportKeyOptionalParams\n  ): Promise<Models.ImportKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options: Models.KeyVaultClientImportKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?:\n      | Models.KeyVaultClientImportKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.ImportKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        key,\n        options\n      },\n      importKeyOperationSpec,\n      callback\n    ) as Promise<Models.ImportKeyResponse>;\n  }\n\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable\n   * for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the\n   * keys/delete permission.\n   * @summary Deletes a key of any type from storage in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteKeyResponse>\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.DeleteKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      deleteKeyOperationSpec,\n      callback\n    ) as Promise<Models.DeleteKeyResponse>;\n  }\n\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the\n   * keys/update permission.\n   * @summary The update key operation changes specified attributes of a stored key and can be\n   * applied to any key type and key version stored in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateKeyResponse>\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: Models.KeyVaultClientUpdateKeyOptionalParams\n  ): Promise<Models.UpdateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: Models.KeyVaultClientUpdateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.UpdateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      updateKeyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateKeyResponse>;\n  }\n\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no\n   * key material is released in the response. This operation requires the keys/get permission.\n   * @summary Gets the public part of a stored key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyResponse>\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.GetKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      getKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyResponse>;\n  }\n\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation\n   * requires the keys/list permission.\n   * @summary Retrieves a list of individual key versions with the same key name.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyVersionsResponse>\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: Models.KeyVaultClientGetKeyVersionsOptionalParams\n  ): Promise<Models.GetKeyVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: Models.KeyVaultClientGetKeyVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?:\n      | Models.KeyVaultClientGetKeyVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeyVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getKeyVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyVersionsResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base\n   * key identifier, attributes, and tags are provided in the response. Individual versions of a key\n   * are not listed in the response. This operation requires the keys/list permission.\n   * @summary List keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeysResponse>\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetKeysOptionalParams\n  ): Promise<Models.GetKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getKeys(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetKeysResponse>;\n  }\n\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key\n   * Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure\n   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.\n   * The BACKUP operation may be used to export, in protected form, any key type from Azure Key\n   * Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed\n   * within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be\n   * restored to another geographical area. For example, a backup from the US geographical area\n   * cannot be restored in an EU geographical area. This operation requires the key/backup\n   * permission.\n   * @summary Requests that a backup of the specified key be downloaded to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupKeyResponse>\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupKeyResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): Promise<Models.BackupKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      backupKeyOperationSpec,\n      callback\n    ) as Promise<Models.BackupKeyResponse>;\n  }\n\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its\n   * entirety with the same key name as it had when it was backed up. If the key name is not\n   * available in the target Key Vault, the RESTORE operation will be rejected. While the key name is\n   * retained during restore, the final key identifier will change if the key is restored to a\n   * different vault. Restore will restore all versions and preserve version identifiers. The RESTORE\n   * operation is subject to security constraints: The target Key Vault must be owned by the same\n   * Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in\n   * the target Key Vault. This operation requires the keys/restore permission.\n   * @summary Restores a backed up key to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreKeyResponse>\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RestoreKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyBundleBackup,\n        options\n      },\n      restoreKeyOperationSpec,\n      callback\n    ) as Promise<Models.RestoreKeyResponse>;\n  }\n\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is\n   * stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data,\n   * the size of which is dependent on the target key and the encryption algorithm to be used. The\n   * ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since\n   * protection with an asymmetric key can be performed using public portion of the key. This\n   * operation is supported for asymmetric keys as a convenience for callers that have a\n   * key-reference but do not have access to the public key material. This operation requires the\n   * keys/encrypt permission.\n   * @summary Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key\n   * vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EncryptResponse>\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.EncryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.EncryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      encryptOperationSpec,\n      callback\n    ) as Promise<Models.EncryptResponse>;\n  }\n\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key\n   * and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single\n   * block of data may be decrypted, the size of this block is dependent on the target key and the\n   * algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in\n   * Azure Key Vault since it uses the private portion of the key. This operation requires the\n   * keys/decrypt permission.\n   * @summary Decrypts a single block of encrypted data.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DecryptResponse>\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DecryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.DecryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      decryptOperationSpec,\n      callback\n    ) as Promise<Models.DecryptResponse>;\n  }\n\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault\n   * since this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @summary Creates a signature from a digest using the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SignResponse>\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SignResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.SignResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      signOperationSpec,\n      callback\n    ) as Promise<Models.SignResponse>;\n  }\n\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification\n   * can be performed using the public portion of the key but this operation is supported as a\n   * convenience for callers that only have a key-reference and not the public portion of the key.\n   * This operation requires the keys/verify permission.\n   * @summary Verifies a signature using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.VerifyResponse>\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.VerifyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyVerifyResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): Promise<Models.VerifyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        digest,\n        signature,\n        options\n      },\n      verifyOperationSpec,\n      callback\n    ) as Promise<Models.VerifyResponse>;\n  }\n\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be\n   * performed using the public portion of the key. This operation is supported for asymmetric keys\n   * as a convenience for callers that have a key-reference but do not have access to the public key\n   * material. This operation requires the keys/wrapKey permission.\n   * @summary Wraps a symmetric key using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.WrapKeyResponse>\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.WrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.WrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      wrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.WrapKeyResponse>;\n  }\n\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric\n   * and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @summary Unwraps a symmetric key using the specified key that was initially used for wrapping\n   * that key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UnwrapKeyResponse>\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UnwrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.UnwrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      unwrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.UnwrapKeyResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted\n   * Keys operation is applicable for vaults enabled for soft-delete. While the operation can be\n   * invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/list permission.\n   * @summary Lists the deleted keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeysResponse>\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedKeysOptionalParams\n  ): Promise<Models.GetDeletedKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedKeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): Promise<Models.GetDeletedKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeysResponse>;\n  }\n\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\n   * vault. This operation requires the keys/get permission.\n   * @summary Gets the public part of a deleted key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeyResponse>\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.GetDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeyResponse>;\n  }\n\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the\n   * operation can be invoked on any vault, it will return an error if invoked on a non soft-delete\n   * enabled vault. This operation requires the keys/purge permission.\n   * @summary Permanently deletes the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      purgeDeletedKeyOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.\n   * It recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @summary Recovers the deleted key to its latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedKeyResponse>\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RecoverDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      recoverDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedKeyResponse>;\n  }\n\n  /**\n   * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\n   * Azure Key Vault creates a new version of that secret. This operation requires the secrets/set\n   * permission.\n   * @summary Sets a secret in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSecretResponse>\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?: Models.KeyVaultClientSetSecretOptionalParams\n  ): Promise<Models.SetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options: Models.KeyVaultClientSetSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?:\n      | Models.KeyVaultClientSetSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.SetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        value,\n        options\n      },\n      setSecretOperationSpec,\n      callback\n    ) as Promise<Models.SetSecretResponse>;\n  }\n\n  /**\n   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a secret. This operation requires the secrets/delete permission.\n   * @summary Deletes a secret from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSecretResponse>\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.DeleteSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      deleteSecretOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSecretResponse>;\n  }\n\n  /**\n   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSecretResponse>\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: Models.KeyVaultClientUpdateSecretOptionalParams\n  ): Promise<Models.UpdateSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: Models.KeyVaultClientUpdateSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.UpdateSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      updateSecretOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSecretResponse>;\n  }\n\n  /**\n   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   * @summary Get a specified secret from a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretResponse>\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.GetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      getSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretResponse>;\n  }\n\n  /**\n   * The Get Secrets operation is applicable to the entire vault. However, only the base secret\n   * identifier and its attributes are provided in the response. Individual secret versions are not\n   * listed in the response. This operation requires the secrets/list permission.\n   * @summary List secrets in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretsResponse>\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetSecretsOptionalParams\n  ): Promise<Models.GetSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretsResponse>;\n  }\n\n  /**\n   * The full secret identifier and attributes are provided in the response. No values are returned\n   * for the secrets. This operations requires the secrets/list permission.\n   * @summary List all versions of the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretVersionsResponse>\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: Models.KeyVaultClientGetSecretVersionsOptionalParams\n  ): Promise<Models.GetSecretVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: Models.KeyVaultClientGetSecretVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?:\n      | Models.KeyVaultClientGetSecretVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getSecretVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretVersionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled\n   * for soft-delete. This operation requires the secrets/list permission.\n   * @summary Lists deleted secrets for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretsResponse>\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedSecretsOptionalParams\n  ): Promise<Models.GetDeletedSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): Promise<Models.GetDeletedSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   * @summary Gets the specified deleted secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretResponse>\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.GetDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretResponse>;\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   * @summary Permanently deletes the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      purgeDeletedSecretOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault. This operation requires the secrets/recover permission.\n   * @summary Recovers the deleted secret to the latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSecretResponse>\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RecoverDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      recoverDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSecretResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   * @summary Backs up the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupSecretResponse>\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupSecretResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): Promise<Models.BackupSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      backupSecretOperationSpec,\n      callback\n    ) as Promise<Models.BackupSecretResponse>;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   * @summary Restores a backed up secret to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreSecretResponse>\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RestoreSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretBundleBackup,\n        options\n      },\n      restoreSecretOperationSpec,\n      callback\n    ) as Promise<Models.RestoreSecretResponse>;\n  }\n\n  /**\n   * The GetCertificates operation returns the set of certificates resources in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List certificates in a specified key vault\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatesResponse>\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificatesOptionalParams\n  ): Promise<Models.GetCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatesResponse>;\n  }\n\n  /**\n   * Deletes all versions of a certificate object along with its associated policy. Delete\n   * certificate cannot be used to remove individual versions of a certificate object. This operation\n   * requires the certificates/delete permission.\n   * @summary Deletes a certificate from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateResponse>\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.DeleteCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateResponse>;\n  }\n\n  /**\n   * Sets the certificate contacts for the specified key vault. This operation requires the\n   * certificates/managecontacts permission.\n   * @summary Sets the certificate contacts for the specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateContactsResponse>\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.SetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        contacts,\n        options\n      },\n      setCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateContacts operation returns the set of certificate contact resources in the\n   * specified key vault. This operation requires the certificates/managecontacts permission.\n   * @summary Lists the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateContactsResponse>\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.GetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateContactsResponse>;\n  }\n\n  /**\n   * Deletes the certificate contacts for a specified key vault certificate. This operation requires\n   * the certificates/managecontacts permission.\n   * @summary Deletes the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateContactsResponse>\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.DeleteCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      deleteCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary List certificate issuers for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuersResponse>\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificateIssuersOptionalParams\n  ): Promise<Models.GetCertificateIssuersResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificateIssuersOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateIssuersOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateIssuerListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): Promise<Models.GetCertificateIssuersResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateIssuersOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuersResponse>;\n  }\n\n  /**\n   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This\n   * operation requires the certificates/setissuers permission.\n   * @summary Sets the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateIssuerResponse>\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?: Models.KeyVaultClientSetCertificateIssuerOptionalParams\n  ): Promise<Models.SetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options: Models.KeyVaultClientSetCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?:\n      | Models.KeyVaultClientSetCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.SetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        provider,\n        options\n      },\n      setCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer\n   * entity. This operation requires the certificates/setissuers permission.\n   * @summary Updates the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateIssuerResponse>\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n  ): Promise<Models.UpdateCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.UpdateCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      updateCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateIssuerResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary Lists the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuerResponse>\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.GetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      getCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from\n   * the vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n   * @summary Deletes the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateIssuerResponse>\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.DeleteCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      deleteCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateIssuerResponse>;\n  }\n\n  /**\n   * If this is the first version, the certificate resource is created. This operation requires the\n   * certificates/create permission.\n   * @summary Creates a new certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateCertificateResponse>\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientCreateCertificateOptionalParams\n  ): Promise<Models.CreateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientCreateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientCreateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.CreateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      createCertificateOperationSpec,\n      callback\n    ) as Promise<Models.CreateCertificateResponse>;\n  }\n\n  /**\n   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The\n   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM\n   * format the PEM file must contain the key as well as x509 certificates. This operation requires\n   * the certificates/import permission.\n   * @summary Imports a certificate into a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportCertificateResponse>\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?: Models.KeyVaultClientImportCertificateOptionalParams\n  ): Promise<Models.ImportCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options: Models.KeyVaultClientImportCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?:\n      | Models.KeyVaultClientImportCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.ImportCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        base64EncodedCertificate,\n        options\n      },\n      importCertificateOperationSpec,\n      callback\n    ) as Promise<Models.ImportCertificateResponse>;\n  }\n\n  /**\n   * The GetCertificateVersions operation returns the versions of a certificate in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List the versions of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateVersionsResponse>\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientGetCertificateVersionsOptionalParams\n  ): Promise<Models.GetCertificateVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientGetCertificateVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificateVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateVersionsResponse>;\n  }\n\n  /**\n   * The GetCertificatePolicy operation returns the specified certificate policy resources in the\n   * specified key vault. This operation requires the certificates/get permission.\n   * @summary Lists the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatePolicyResponse>\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.GetCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatePolicyResponse>;\n  }\n\n  /**\n   * Set specified members in the certificate policy. Leave others as null. This operation requires\n   * the certificates/update permission.\n   * @summary Updates the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificatePolicyResponse>\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.UpdateCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificatePolicy,\n        options\n      },\n      updateCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificatePolicyResponse>;\n  }\n\n  /**\n   * The UpdateCertificate operation applies the specified update on the given certificate; the only\n   * elements updated are the certificate's attributes. This operation requires the\n   * certificates/update permission.\n   * @summary Updates the specified attributes associated with the given certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateResponse>\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: Models.KeyVaultClientUpdateCertificateOptionalParams\n  ): Promise<Models.UpdateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: Models.KeyVaultClientUpdateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.UpdateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      updateCertificateOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateResponse>;\n  }\n\n  /**\n   * Gets information about a specific certificate. This operation requires the certificates/get\n   * permission.\n   * @summary Gets information about a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateResponse>\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.GetCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      getCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateResponse>;\n  }\n\n  /**\n   * Updates a certificate creation operation that is already in progress. This operation requires\n   * the certificates/update permission.\n   * @summary Updates a certificate operation.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateOperationResponse>\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.UpdateCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        cancellationRequested,\n        options\n      },\n      updateCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateOperationResponse>;\n  }\n\n  /**\n   * Gets the creation operation associated with a specified certificate. This operation requires the\n   * certificates/get permission.\n   * @summary Gets the creation operation of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateOperationResponse>\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.GetCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateOperationResponse>;\n  }\n\n  /**\n   * Deletes the creation operation for a specified certificate that is in the process of being\n   * created. The certificate is no longer created. This operation requires the certificates/update\n   * permission.\n   * @summary Deletes the creation operation for a specific certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateOperationResponse>\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.DeleteCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateOperationResponse>;\n  }\n\n  /**\n   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a\n   * key pair currently available in the service. This operation requires the certificates/create\n   * permission.\n   * @summary Merges a certificate or a certificate chain with a key pair existing on the server.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MergeCertificateResponse>\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?: Models.KeyVaultClientMergeCertificateOptionalParams\n  ): Promise<Models.MergeCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options: Models.KeyVaultClientMergeCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?:\n      | Models.KeyVaultClientMergeCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.MergeCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        x509Certificates,\n        options\n      },\n      mergeCertificateOperationSpec,\n      callback\n    ) as Promise<Models.MergeCertificateResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified certificate be downloaded to the client. All versions of\n   * the certificate will be downloaded. This operation requires the certificates/backup permission.\n   * @summary Backs up the specified certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupCertificateResponse>\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.BackupCertificateResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): Promise<Models.BackupCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      backupCertificateOperationSpec,\n      callback\n    ) as Promise<Models.BackupCertificateResponse>;\n  }\n\n  /**\n   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the\n   * certificates/restore permission.\n   * @summary Restores a backed up certificate to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreCertificateResponse>\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RestoreCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateBundleBackup,\n        options\n      },\n      restoreCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RestoreCertificateResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are\n   * in a deleted state and ready for recovery or purging. This operation includes deletion-specific\n   * information. This operation requires the certificates/get/list permission. This operation can\n   * only be enabled on soft-delete enabled vaults.\n   * @summary Lists the deleted certificates in the specified vault currently available for recovery.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificatesResponse>\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n  ): Promise<Models.GetDeletedCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedCertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): Promise<Models.GetDeletedCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificatesResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its\n   * attributes, such as retention interval, scheduled permanent deletion and the current deletion\n   * recovery level. This operation requires the certificates/get permission.\n   * @summary Retrieves information about the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificateResponse>\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.GetDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificateResponse>;\n  }\n\n  /**\n   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified\n   * certificate, without possibility for recovery. The operation is not available if the recovery\n   * level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n   * @summary Permanently deletes the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      purgeDeletedCertificateOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The\n   * operation is applicable in vaults enabled for soft-delete, and must be issued during the\n   * retention interval (available in the deleted certificate's attributes). This operation requires\n   * the certificates/recover permission.\n   * @summary Recovers the deleted certificate back to its current version under /certificates.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedCertificateResponse>\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RecoverDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      recoverDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedCertificateResponse>;\n  }\n\n  /**\n   * List storage accounts managed by the specified key vault. This operation requires the\n   * storage/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountsResponse>\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetStorageAccountsOptionalParams\n  ): Promise<Models.GetStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): Promise<Models.GetStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted\n   * for a vault enabled for soft-delete. This operation requires the storage/list permission.\n   * @summary Lists deleted storage accounts for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountsResponse>\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n  ): Promise<Models.GetDeletedStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedStorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): Promise<Models.GetDeletedStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Account operation returns the specified deleted storage account along\n   * with its attributes. This operation requires the storage/get permission.\n   * @summary Gets the specified deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountResponse>\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.GetDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * The purge deleted storage account operation removes the secret permanently, without the\n   * possibility of recovery. This operation can only be performed on a soft-delete enabled vault.\n   * This operation requires the storage/purge permission.\n   * @summary Permanently deletes the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      purgeDeletedStorageAccountOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted storage account in the specified vault. This operation can only be\n   * performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedStorageAccountResponse>\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RecoverDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      recoverDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified storage account be downloaded to the client. This\n   * operation requires the storage/backup permission.\n   * @summary Backs up the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupStorageAccountResponse>\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupStorageResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): Promise<Models.BackupStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      backupStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.BackupStorageAccountResponse>;\n  }\n\n  /**\n   * Restores a backed up storage account to a vault. This operation requires the storage/restore\n   * permission.\n   * @summary Restores a backed up storage account to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreStorageAccountResponse>\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RestoreStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageBundleBackup,\n        options\n      },\n      restoreStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RestoreStorageAccountResponse>;\n  }\n\n  /**\n   * Deletes a storage account. This operation requires the storage/delete permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteStorageAccountResponse>\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.DeleteStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      deleteStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.DeleteStorageAccountResponse>;\n  }\n\n  /**\n   * Gets information about a specified storage account. This operation requires the storage/get\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountResponse>\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.GetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountResponse>;\n  }\n\n  /**\n   * Creates or updates a new storage account. This operation requires the storage/set permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetStorageAccountResponse>\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?: Models.KeyVaultClientSetStorageAccountOptionalParams\n  ): Promise<Models.SetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options: Models.KeyVaultClientSetStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?:\n      | Models.KeyVaultClientSetStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.SetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        resourceId,\n        activeKeyName,\n        autoRegenerateKey,\n        options\n      },\n      setStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.SetStorageAccountResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given storage account. This operation\n   * requires the storage/set/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateStorageAccountResponse>\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientUpdateStorageAccountOptionalParams\n  ): Promise<Models.UpdateStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientUpdateStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientUpdateStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.UpdateStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      updateStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.UpdateStorageAccountResponse>;\n  }\n\n  /**\n   * Regenerates the specified key value for the given storage account. This operation requires the\n   * storage/regeneratekey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RegenerateStorageAccountKeyResponse>\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RegenerateStorageAccountKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RegenerateStorageAccountKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        keyName,\n        options\n      },\n      regenerateStorageAccountKeyOperationSpec,\n      callback\n    ) as Promise<Models.RegenerateStorageAccountKeyResponse>;\n  }\n\n  /**\n   * List storage SAS definitions for the given storage account. This operation requires the\n   * storage/listsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionsResponse>\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetSasDefinitionsOptionalParams\n  ): Promise<Models.GetSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): Promise<Models.GetSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for\n   * a vault enabled for soft-delete. This operation requires the storage/listsas permission.\n   * @summary Lists deleted SAS definitions for the specified vault and storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionsResponse>\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n  ): Promise<Models.GetDeletedSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): Promise<Models.GetDeletedSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with\n   * its attributes. This operation requires the storage/getsas permission.\n   * @summary Gets the specified deleted sas definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionResponse>\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.GetDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Recovers the deleted SAS definition for the specified storage account. This operation can only\n   * be performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted SAS definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSasDefinitionResponse>\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      recoverDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Deletes a SAS definition from a specified storage account. This operation requires the\n   * storage/deletesas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSasDefinitionResponse>\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.DeleteSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      deleteSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSasDefinitionResponse>;\n  }\n\n  /**\n   * Gets information about a SAS definition for the specified storage account. This operation\n   * requires the storage/getsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionResponse>\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.GetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionResponse>;\n  }\n\n  /**\n   * Creates or updates a new SAS definition for the specified storage account. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSasDefinitionResponse>\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?: Models.KeyVaultClientSetSasDefinitionOptionalParams\n  ): Promise<Models.SetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options: Models.KeyVaultClientSetSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?:\n      | Models.KeyVaultClientSetSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.SetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        templateUri,\n        sasType,\n        validityPeriod,\n        options\n      },\n      setSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.SetSasDefinitionResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given SAS definition. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSasDefinitionResponse>\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n  ): Promise<Models.UpdateSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: Models.KeyVaultClientUpdateSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.UpdateSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      updateSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSasDefinitionResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst createKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      kty: \"kty\",\n      keySize: [\"options\", \"keySize\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"]\n    },\n    mapper: {\n      ...Mappers.KeyCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: \"key\",\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyBundleBackup: \"keyBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.KeyRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst encryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/encrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst decryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/decrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst signOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/sign\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeySignParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst verifyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/verify\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      digest: \"digest\",\n      signature: \"signature\"\n    },\n    mapper: {\n      ...Mappers.KeyVerifyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst wrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/wrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst unwrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/unwrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedkeys/{key-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      value: \"value\",\n      tags: [\"options\", \"tags\"],\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"]\n    },\n    mapper: {\n      ...Mappers.SecretSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SecretUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedsecrets/{secret-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/{secret-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupSecretResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      secretBundleBackup: \"secretBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.SecretRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"contacts\",\n    mapper: {\n      ...Mappers.Contacts,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateIssuerListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: \"provider\",\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: [\"options\", \"provider\"],\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst createCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/import\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      base64EncodedCertificate: \"base64EncodedCertificate\",\n      password: [\"options\", \"password\"],\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"certificatePolicy\",\n    mapper: {\n      ...Mappers.CertificatePolicy,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      cancellationRequested: \"cancellationRequested\"\n    },\n    mapper: {\n      ...Mappers.CertificateOperationUpdateParameter,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst mergeCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/pending/merge\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      x509Certificates: \"x509Certificates\",\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateMergeParameters,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupCertificateResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificateBundleBackup: \"certificateBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.CertificateRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedcertificates/{certificate-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupStorageResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      storageBundleBackup: \"storageBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.StorageRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      resourceId: \"resourceId\",\n      activeKeyName: \"activeKeyName\",\n      autoRegenerateKey: \"autoRegenerateKey\",\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      activeKeyName: [\"options\", \"activeKeyName\"],\n      autoRegenerateKey: [\"options\", \"autoRegenerateKey\"],\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst regenerateStorageAccountKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/regeneratekey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyName: \"keyName\"\n    },\n    mapper: {\n      ...Mappers.StorageAccountRegenerteKeyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: \"templateUri\",\n      sasType: \"sasType\",\n      validityPeriod: \"validityPeriod\",\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: [\"options\", \"templateUri\"],\n      sasType: [\"options\", \"sasType\"],\n      validityPeriod: [\"options\", \"validityPeriod\"],\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nexport {\n  KeyVaultClient,\n  KeyVaultClientContext,\n  Models as KeyVaultModels,\n  Mappers as KeyVaultMappers\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport const SDK_VERSION: string = \"4.0.0\";\n\nexport const RetryConstants = {\n  MIN_RETRY_INTERVAL_MS: 3000\n};\n\nexport const HeaderConstants = {\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\"\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { TokenCredential } from \"@azure/core-http\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"@azure/core-http\";\nimport { Constants } from \"@azure/core-http\";\nimport { HttpOperationResponse } from \"@azure/core-http\";\nimport { HttpHeaders } from \"@azure/core-http\";\nimport { WebResource } from \"@azure/core-http\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"@azure/core-http\";\n\n/**\n * Creates a new ChallengeBasedAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the challenge token.\n */\nexport function challengeBasedAuthenticationPolicy(credential: TokenCredential): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ChallengeBasedAuthenticationPolicy(nextPolicy, options, credential, tokenCache);\n    }\n  };\n}\n\nexport class AuthenticationChallenge {\n  constructor(public scopes: string[] | string) { }\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class ChallengeBasedAuthenticationPolicy extends BaseRequestPolicy {\n  private challenge: AuthenticationChallenge | undefined = undefined;\n\n  /**\n   * Creates a new ChallengeBasedAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param tokenCache The cache for the most recent AccessToken returned by the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  private parseWWWAuthenticate(www_authenticate: string): string {\n    // Parses an authentication message like:\n    // ```\n    // Bearer authorization=\"some_authorization\", resource=\"https://some.url\"\n    // ```\n    let authenticateArray = www_authenticate.split(\" \");\n\n    // Remove the \"Bearer\" piece\n    delete authenticateArray[0];\n\n    // Split the KV comma-separated list\n    let commaSep = authenticateArray.join().split(\",\");\n    for (let item of commaSep) {\n      // Split the key/value pairs\n      let kv = item.split(\"=\");\n      if (kv[0].trim() == \"resource\") {\n        // Remove the quotations around the string\n        let resource = kv[1].trim().replace(/['\"]+/g, '');\n        return resource;\n      }\n    }\n    return \"\";\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(\n    webResource: WebResource\n  ): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n\n    let originalBody = webResource.body;\n\n    if (this.challenge == undefined) {\n      // Use a blank to start the challenge\n      webResource.body = \"\";\n    } else {\n      // or use the cached token if we have one\n      await this.authenticateRequest(webResource);\n    }\n\n    let response = await this._nextPolicy.sendRequest(webResource);\n\n    if (response.status == 401) {\n      webResource.body = originalBody;\n\n      let www_authenticate = response.headers.get(\"WWW-Authenticate\");\n\n      if (www_authenticate) {\n        let resource = this.parseWWWAuthenticate(www_authenticate);\n        let challenge = new AuthenticationChallenge(resource + \"/.default\")\n\n        if (this.challenge != challenge) {\n          this.challenge = challenge;\n          this.tokenCache.setCachedToken(undefined);\n\n          await this.authenticateRequest(webResource);\n        }\n      }\n      return this._nextPolicy.sendRequest(webResource);\n    } else {\n      return response;\n    }\n  }\n\n  private async authenticateRequest(webResource: WebResource): Promise<void> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = (await this.credential.getToken(this.challenge!.scopes)) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    if (accessToken) {\n      webResource.headers.set(\n        Constants.HeaderConstants.AUTHORIZATION,\n        `Bearer ${accessToken.token}`\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { DeletedKey, KeyClientInterface } from \"../../keysModels\";\n\n/**\n * @interface\n * An interface representing the state of a delete key's poll operation\n */\nexport interface DeleteKeyPollOperationState extends PollOperationState<DeletedKey> {\n  /**\n   * The name of the key.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a KeyClient. For internal use.\n   */\n  client: KeyClientInterface;\n}\n\n/**\n * @interface\n * An interface representing a delete key's poll operation\n */\nexport interface DeleteKeyPollOperation\n  extends PollOperation<DeleteKeyPollOperationState, DeletedKey> {}\n\n/**\n * @summary Reaches to the service and updates the delete key's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: DeleteKeyPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: DeleteKeyPollOperationState) => void;\n  } = {}\n): Promise<DeleteKeyPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    const deletedKey = await client.deleteKey(name, requestOptions);\n    state.isStarted = true;\n    state.result = deletedKey;\n    if (!deletedKey.properties.recoveryId) {\n      state.isCompleted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = await client.getDeletedKey(name, { requestOptions });\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeDeleteKeyPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the key's operation, also updating the key's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: DeleteKeyPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<DeleteKeyPollOperation> {\n  throw new Error(\"Canceling the deletion of a key is not supported.\");\n}\n\n/**\n * @summary Serializes the create key's poll operation\n */\nfunction toString(this: DeleteKeyPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create key's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeDeleteKeyPollOperation(\n  state: DeleteKeyPollOperationState\n): DeleteKeyPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport { DeleteKeyPollOperationState, makeDeleteKeyPollOperation } from \"./operation\";\nimport { DeletedKey, KeyClientInterface } from \"../../keysModels\";\n\nexport interface DeleteKeyPollerOptions {\n  client: KeyClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a key finishes being deleted\n */\nexport class DeleteKeyPoller extends Poller<DeleteKeyPollOperationState, DeletedKey> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof DeleteKeyPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: DeleteKeyPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: DeleteKeyPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeDeleteKeyPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof DeleteKeyPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { KeyVaultKey, KeyClientInterface } from \"../../keysModels\";\n\n/**\n * @interface\n * An interface representing the state of a delete key's poll operation\n */\nexport interface RecoverDeletedKeyPollOperationState extends PollOperationState<KeyVaultKey> {\n  /**\n   * The name of the key.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a KeyClient. For internal use.\n   */\n  client: KeyClientInterface;\n}\n\n/**\n * @interface\n * An interface representing a delete key's poll operation\n */\nexport interface RecoverDeletedKeyPollOperation\n  extends PollOperation<RecoverDeletedKeyPollOperationState, KeyVaultKey> {}\n\n/**\n * @summary Reaches to the service and updates the delete key's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: RecoverDeletedKeyPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: RecoverDeletedKeyPollOperationState) => void;\n  } = {}\n): Promise<RecoverDeletedKeyPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    try {\n      state.result = await client.getKey(name, { requestOptions });\n      state.isCompleted = true;\n    } catch (_) {}\n    if (!state.isCompleted) {\n      state.result = await client.recoverDeletedKey(name, { requestOptions });\n      state.isStarted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = await client.getKey(name, { requestOptions });\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeRecoverDeletedKeyPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the key's operation, also updating the key's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: RecoverDeletedKeyPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<RecoverDeletedKeyPollOperation> {\n  throw new Error(\"Canceling the deletion of a key is not supported.\");\n}\n\n/**\n * @summary Serializes the create key's poll operation\n */\nfunction toString(this: RecoverDeletedKeyPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create key's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeRecoverDeletedKeyPollOperation(\n  state: RecoverDeletedKeyPollOperationState\n): RecoverDeletedKeyPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport {\n  RecoverDeletedKeyPollOperationState,\n  makeRecoverDeletedKeyPollOperation\n} from \"./operation\";\nimport { KeyVaultKey, KeyClientInterface } from \"../../keysModels\";\n\nexport interface RecoverDeletedKeyPollerOptions {\n  client: KeyClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a key finishes being deleted\n */\nexport class RecoverDeletedKeyPoller extends Poller<\n  RecoverDeletedKeyPollOperationState,\n  KeyVaultKey\n> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof RecoverDeletedKeyPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: RecoverDeletedKeyPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: RecoverDeletedKeyPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeRecoverDeletedKeyPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof RecoverDeletedKeyPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","import { ParsedKeyVaultEntityIdentifier } from \"./keyVaultBase\";\nimport * as url from \"url\";\n\nexport function parseKeyvaultIdentifier(\n  collection: string,\n  identifier: string | undefined\n): ParsedKeyVaultEntityIdentifier {\n  if (typeof collection != \"string\" || !(collection = collection.trim())) {\n    throw new Error(\"Invalid collection argument\");\n  }\n\n  if (typeof identifier != \"string\" || !(identifier = identifier.trim())) {\n    throw new Error(\"Invalid identifier argument\");\n  }\n\n  var baseUri;\n  try {\n    baseUri = url.parse(identifier, true, true);\n  } catch (e) {\n    throw new Error(`Invalid ${collection} identifier: ${identifier}. Not a valid URI`);\n  }\n\n  // Path is of the form '/collection/name[/version]'\n  var segments = (baseUri.pathname || \"\").split(\"/\");\n  if (segments.length !== 3 && segments.length !== 4) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. Bad number of segments: ${segments.length}`\n    );\n  }\n\n  if (collection !== segments[1]) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. segment [1] should be \"${collection}\", found \"${segments[1]}\"`\n    );\n  }\n\n  var vaultUrl = `${baseUri.protocol}//${baseUri.host}`;\n  var name = segments[2];\n  var version = segments.length === 4 ? segments[3] : undefined;\n  return {\n    vaultUrl,\n    name,\n    version\n  };\n}\n","import { JsonWebKey, GetKeyOptions, CryptographyOptions, KeyVaultKey } from \"./keysModels\";\nimport { JsonWebKeyEncryptionAlgorithm as EncryptionAlgorithm } from \"./core/models\";\nimport {\n  TokenCredential,\n  isNode,\n  PipelineOptions,\n  createPipelineFromOptions,\n  isTokenCredential,\n  RequestOptionsBase,\n  signingPolicy,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\n\nimport { getTracer, Span } from \"@azure/core-tracing\";\nimport { logger } from \"./log\";\nimport { parseKeyvaultIdentifier } from \"./core/utils\";\nimport { SDK_VERSION } from \"./core/utils/constants\";\nimport { KeyVaultClient } from \"./core/keyVaultClient\";\nimport { challengeBasedAuthenticationPolicy } from \"./core/challengeBasedAuthenticationPolicy\";\nimport { createHash as cryptoCreateHash, createVerify, publicEncrypt } from \"crypto\";\nimport * as constants from \"constants\";\n\n// This is part of constructing the autogenerated client. In the future, it should not\n// be required. See also: https://github.com/Azure/azure-sdk-for-js/issues/5508\nconst SERVICE_API_VERSION = \"7.0\";\n\n/**\n * A client used to perform cryptographic operations with Azure Key Vault keys.\n */\nexport class CryptographyClient {\n  /**\n   * @internal\n   * @ignore\n   * Retrieves the {@link JsonWebKey} from the Key Vault.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.getKey();\n   * ```\n   * @param {GetKeyOptions} [options] Options for retrieving key.\n   */\n  private async getKey(options: GetKeyOptions = {}): Promise<JsonWebKey> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getKey\", requestOptions);\n\n    if (typeof this.key === \"string\") {\n      if (!this.name || this.name === \"\") {\n        throw new Error(\"getKey requires a key with a name\");\n      }\n      const key = await this.client.getKey(\n        this.vaultUrl,\n        this.name,\n        options && options.version ? options.version : this.version ? this.version : \"\",\n        this.setParentSpan(span, requestOptions)\n      );\n      return key.key!;\n    } else {\n      return this.key;\n    }\n  }\n\n  /**\n   * Encrypts the given plaintext with the specified cryptography algorithm\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.encrypt(\"RSA1_5\", Buffer.from(\"My Message\"));\n   * ```\n   * @param {EncryptionAlgorithm} algorithm The algorithm to use.\n   * @param {Uint8Array} plaintext The text to encrypt.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async encrypt(\n    algorithm: EncryptionAlgorithm,\n    plaintext: Uint8Array,\n    options: EncryptOptions = {}\n  ): Promise<EncryptResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"encrypt\", requestOptions);\n\n    if (isNode) {\n      await this.fetchFullKeyIfPossible();\n\n      if (typeof this.key !== \"string\") {\n        switch (algorithm) {\n          case \"RSA1_5\": {\n            if (this.key.kty != \"RSA\") {\n              span.end();\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"encrypt\")) {\n              span.end();\n              throw new Error(\"Key does not support the encrypt operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            let padded: any = { key: keyPEM, padding: constants.RSA_PKCS1_PADDING };\n            const encrypted = publicEncrypt(padded, Buffer.from(plaintext));\n            return { result: encrypted, algorithm, keyID: this.key.kid };\n          }\n          case \"RSA-OAEP\": {\n            if (this.key.kty != \"RSA\") {\n              span.end();\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"encrypt\")) {\n              span.end();\n              throw new Error(\"Key does not support the encrypt operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            const encrypted = publicEncrypt(keyPEM, Buffer.from(plaintext));\n            return { result: encrypted, algorithm, keyID: this.key.kid };\n          }\n        }\n      }\n    }\n\n    // Default to the service\n    let result;\n    try {\n      result = await this.client.encrypt(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        plaintext,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, algorithm, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Decrypts the given ciphertext with the specified cryptography algorithm\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.decrypt(\"RSA1_5\", encryptedBuffer);\n   * ```\n   * @param {EncryptionAlgorithm} algorithm The algorithm to use.\n   * @param {Uint8Array} ciphertext The text to decrypt.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n\n  public async decrypt(\n    algorithm: EncryptionAlgorithm,\n    ciphertext: Uint8Array,\n    options: DecryptOptions = {}\n  ): Promise<DecryptResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"decrypt\", requestOptions);\n\n    let result;\n    try {\n      result = await this.client.decrypt(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        ciphertext,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, keyID: this.getKeyID(), algorithm };\n  }\n\n  /**\n   * Wraps the given key using the specified cryptography algorithm\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.wrapKey(\"RSA1_5\", keyToWrap);\n   * ```\n   * @param {KeyWrapAlgorithm} algorithm The encryption algorithm to use to wrap the given key.\n   * @param {Uint8Array} key The key to wrap.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async wrapKey(\n    algorithm: KeyWrapAlgorithm,\n    key: Uint8Array,\n    options: WrapKeyOptions = {}\n  ): Promise<WrapResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"wrapKey\", requestOptions);\n\n    if (isNode) {\n      await this.fetchFullKeyIfPossible();\n\n      if (typeof this.key !== \"string\") {\n        switch (algorithm) {\n          case \"RSA1_5\": {\n            if (this.key.kty != \"RSA\") {\n              span.end();\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"wrapKey\")) {\n              span.end();\n              throw new Error(\"Key does not support the wrapKey operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            let padded: any = { key: keyPEM, padding: constants.RSA_PKCS1_PADDING };\n            const encrypted = publicEncrypt(padded, Buffer.from(key));\n            return { result: encrypted, algorithm, keyID: this.getKeyID() };\n          }\n          case \"RSA-OAEP\": {\n            if (this.key.kty != \"RSA\") {\n              span.end();\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"wrapKey\")) {\n              span.end();\n              throw new Error(\"Key does not support the wrapKey operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            const encrypted = publicEncrypt(keyPEM, Buffer.from(key));\n            return { result: encrypted, algorithm, keyID: this.getKeyID() };\n          }\n        }\n      }\n    }\n\n    // Default to the service\n    let result;\n    try {\n      result = await this.client.wrapKey(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        key,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, algorithm, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Unwraps the given wrapped key using the specified cryptography algorithm\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.unwrapKey(\"RSA1_5\", keyToUnwrap);\n   * ```\n   * @param {KeyWrapAlgorithm} algorithm The decryption algorithm to use to unwrap the key.\n   * @param {Uint8Array} encryptedKey The encrypted key to unwrap.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async unwrapKey(\n    algorithm: KeyWrapAlgorithm,\n    encryptedKey: Uint8Array,\n    options: UnwrapKeyOptions = {}\n  ): Promise<UnwrapResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"unwrapKey\", requestOptions);\n\n    let result;\n    try {\n      result = await this.client.unwrapKey(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        encryptedKey,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Cryptographically sign the digest of a message\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.sign(\"RS256\", digest);\n   * ```\n   * @param {KeySignatureAlgorithm} algorithm The signing algorithm to use.\n   * @param {Uint8Array} digest The digest of the data to sign.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async sign(\n    algorithm: SignatureAlgorithm,\n    digest: Uint8Array,\n    options: SignOptions = {}\n  ): Promise<SignResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"sign\", requestOptions);\n\n    let result;\n    try {\n      result = await this.client.sign(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        digest,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, algorithm, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Verify the signed message digest\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.verify(\"RS256\", signedDigest, signature);\n   * ```\n   * @param {KeySignatureAlgorithm} algorithm The signing algorithm to use to verify with.\n   * @param {Uint8Array} digest The digest to verify.\n   * @param {Uint8Array} signature The signature to verify the digest against.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async verify(\n    algorithm: SignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options: VerifyOptions = {}\n  ): Promise<VerifyResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"verify\", requestOptions);\n\n    let response;\n    try {\n      response = await this.client.verify(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        digest,\n        signature,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: response.value ? response.value : false, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Cryptographically sign a block of data\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.signData(\"RS256\", message);\n   * ```\n   * @param {KeySignatureAlgorithm} algorithm The signing algorithm to use.\n   * @param {Uint8Array} data The data to sign.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async signData(\n    algorithm: SignatureAlgorithm,\n    data: Uint8Array,\n    options: SignOptions = {}\n  ): Promise<SignResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"signData\", requestOptions);\n\n    let digest;\n    switch (algorithm) {\n      case \"ES256\":\n      case \"ES256K\":\n      case \"PS256\":\n      case \"RS256\":\n        {\n          digest = await createHash(\"sha256\", data);\n        }\n        break;\n      case \"ES384\":\n      case \"PS384\":\n      case \"RS384\":\n        {\n          digest = await createHash(\"sha384\", data);\n        }\n        break;\n      case \"ES512\":\n      case \"PS512\":\n      case \"RS512\":\n        {\n          digest = await createHash(\"sha512\", data);\n        }\n        break;\n      default: {\n        throw new Error(\"Unsupported signature algorithm\");\n      }\n    }\n\n    let result;\n    try {\n      result = await this.client.sign(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        digest,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.result!, algorithm, keyID: this.getKeyID() };\n  }\n\n  /**\n   * Verify the signed block of data\n   *\n   * Example usage:\n   * ```ts\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * let result = await client.verifyData(\"RS256\", signedMessage, signature);\n   * ```\n   * @param {KeySignatureAlgorithm} algorithm The algorithm to use to verify with.\n   * @param {Uint8Array} data The signed block of data to verify.\n   * @param {Uint8Array} signature The signature to verify the block against.\n   * @param {EncryptOptions} [options] Additional options.\n   */\n  public async verifyData(\n    algorithm: SignatureAlgorithm,\n    data: Uint8Array,\n    signature: Uint8Array,\n    options: VerifyOptions = {}\n  ): Promise<VerifyResult> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"verifyData\", requestOptions);\n\n    if (isNode) {\n      await this.fetchFullKeyIfPossible();\n\n      if (typeof this.key !== \"string\") {\n        switch (algorithm) {\n          case \"RS256\": {\n            if (this.key.kty != \"RSA\") {\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"verify\")) {\n              throw new Error(\"Key does not support the verify operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            const verifier = createVerify(\"SHA256\");\n            verifier.update(Buffer.from(data));\n            verifier.end();\n\n            return {\n              result: verifier.verify(keyPEM, Buffer.from(signature)),\n              keyID: this.getKeyID()\n            };\n          }\n          case \"RS384\": {\n            if (this.key.kty != \"RSA\") {\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"verify\")) {\n              throw new Error(\"Key does not support the verify operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            const verifier = createVerify(\"SHA384\");\n            verifier.update(Buffer.from(data));\n            verifier.end();\n\n            return {\n              result: verifier.verify(keyPEM, Buffer.from(signature)),\n              keyID: this.getKeyID()\n            };\n          }\n          case \"RS512\": {\n            if (this.key.kty != \"RSA\") {\n              throw new Error(\"Key type does not match algorithm\");\n            }\n\n            if (this.key.keyOps && !this.key.keyOps.includes(\"verify\")) {\n              throw new Error(\"Key does not support the verify operation\");\n            }\n\n            let keyPEM = convertJWKtoPEM(this.key);\n\n            const verifier = createVerify(\"SHA512\");\n            verifier.update(Buffer.from(data));\n            verifier.end();\n\n            return {\n              result: verifier.verify(keyPEM, Buffer.from(signature)),\n              keyID: this.getKeyID()\n            };\n          }\n        }\n      }\n    }\n\n    let digest: Buffer;\n    switch (algorithm) {\n      case \"ES256\":\n      case \"ES256K\":\n      case \"PS256\":\n      case \"RS256\":\n        {\n          digest = await createHash(\"sha256\", data);\n        }\n        break;\n      case \"ES384\":\n      case \"PS384\":\n      case \"RS384\":\n        {\n          digest = await createHash(\"sha384\", data);\n        }\n        break;\n      case \"ES512\":\n      case \"PS512\":\n      case \"RS512\":\n        {\n          digest = await createHash(\"sha512\", data);\n        }\n        break;\n      default: {\n        throw new Error(\"Unsupported signature algorithm\");\n      }\n    }\n\n    let result;\n    try {\n      result = await this.client.verify(\n        this.vaultUrl,\n        this.name,\n        this.version,\n        algorithm,\n        digest,\n        signature,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return { result: result.value!, keyID: this.getKeyID() };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Attempts to fetch the key from the service.\n   */\n  private async fetchFullKeyIfPossible() {\n    if (!this.hasTriedToGetKey) {\n      try {\n        let result = await this.getKey();\n        this.key = result;\n      } catch {}\n      this.hasTriedToGetKey = true;\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Attempts to retrieve the ID of the key.\n   */\n  private getKeyID(): string | undefined {\n    let kid;\n    if (typeof this.key !== \"string\") {\n      kid = this.key.kid;\n    } else {\n      kid = this.key;\n    }\n\n    return kid;\n  }\n\n  /**\n   * The base URL to the vault\n   */\n  private readonly vaultUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated KeyVault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * A reference to the key used for the cryptographic operations.\n   * Based on what was provided to the CryptographyClient constructor, it can be either a string with the URL of a KeyVault Key, or an already parsed {@link JsonWebKey}.\n   */\n  private key: string | JsonWebKey;\n\n  /**\n   * Name of the key the client represents\n   */\n  private name: string;\n\n  /**\n   * Version of the key the client represents\n   */\n  private version: string;\n\n  /**\n   * Has the client tried to fetch the full key yet\n   */\n  private hasTriedToGetKey: boolean;\n\n  /**\n   * Constructs a new instance of the Cryptography client for the given key\n   *\n   * Example usage:\n   * ```ts\n   * import { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;\n   * let credentials = new DefaultAzureCredential();\n   *\n   * let keyClient = new KeyClient(vaultUrl, credentials);\n   * let keyVaultKey = await keyClient.getKey(\"MyKey\");\n   *\n   * let client = new CryptographyClient(keyVaultKey.id, credentials);\n   * // or\n   * let client = new CryptographyClient(keyVaultKey, credentials);\n   * ```\n   * @param key The key to use during cryptography tasks.\n   * @param {TokenCredential} credential An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the @azure/identity package to create a credential that suits your needs.\n   * @param {PipelineOptions} [pipelineOptions={}] Optional. Pipeline options used to configure Key Vault API requests.\n   *                                                         Omit this parameter to use the default pipeline configuration.\n   * @memberof CryptographyClient\n   */\n  constructor(\n    key: string | KeyVaultKey, // keyUrl or KeyVaultKey\n    credential: TokenCredential,\n    pipelineOptions: PipelineOptions = {}\n  ) {\n    const libInfo = `azsdk-js-keyvault-keys/${SDK_VERSION}`;\n    if (pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions.userAgentPrefix !== undefined\n        ? `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`\n        : libInfo;\n    } else {\n      pipelineOptions.userAgentOptions = {\n        userAgentPrefix: libInfo\n      };\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? challengeBasedAuthenticationPolicy(credential)\n      : signingPolicy(credential);\n\n    const internalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          logPolicyOptions: {\n            allowedHeaderNames: [\n              \"x-ms-keyvault-region\",\n              \"x-ms-keyvault-network-info\",\n              \"x-ms-keyvault-service-version\"\n            ]\n          }\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new KeyVaultClient(credential, SERVICE_API_VERSION, pipeline);\n\n    let parsed;\n    if (typeof key === \"string\") {\n      this.key = key;\n      parsed = parseKeyvaultIdentifier(\"keys\", this.key);\n      this.hasTriedToGetKey = false;\n    } else if (key.key) {\n      this.key = key.key;\n      parsed = parseKeyvaultIdentifier(\"keys\", this.key.kid!);\n      this.hasTriedToGetKey = true;\n    } else {\n      throw new Error(\n        \"The provided key is malformed as it does not have a value for the `key` property.\"\n      );\n    }\n\n    if (parsed.name == \"\") {\n      throw new Error(\"Could not find 'name' of key in key URL\");\n    }\n\n    if (!parsed.version || parsed.version == \"\") {\n      throw new Error(\"Could not find 'version' of key in key URL\");\n    }\n\n    if (!parsed.vaultUrl || parsed.vaultUrl == \"\") {\n      throw new Error(\"Could not find 'vaultUrl' of key in key URL\");\n    }\n\n    this.vaultUrl = parsed.vaultUrl;\n    this.name = parsed.name;\n    this.version = parsed.version;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Creates a span using the tracer that was set by the user.\n   * @param {string} methodName The name of the method creating the span.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private createSpan(methodName: string, requestOptions?: RequestOptionsBase): Span {\n    const tracer = getTracer();\n    return tracer.startSpan(\n      `CryptographyClient ${methodName}`,\n      requestOptions && requestOptions.spanOptions\n    );\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns updated HTTP options with the given span as the parent of future spans,\n   * if applicable.\n   * @param {Span} span The span for the current operation.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private setParentSpan(span: Span, options: RequestOptionsBase = {}): RequestOptionsBase {\n    if (span.isRecordingEvents()) {\n      return {\n        ...options,\n        spanOptions: {\n          ...options.spanOptions,\n          parent: span\n        }\n      };\n    } else {\n      return options;\n    }\n  }\n}\n\n/**\n * @internal\n * @ignore\n * Encodes a length of a packet in DER format\n */\nfunction encodeLength(length: number): Uint8Array {\n  if (length <= 127) {\n    return Uint8Array.of(length);\n  } else if (length < 256) {\n    return Uint8Array.of(0x81, length);\n  } else if (length < 65536) {\n    return Uint8Array.of(0x82, length >> 8, length & 0xff);\n  } else {\n    throw new Error(\"Unsupported length to encode\");\n  }\n}\n\n/**\n * @internal\n * @ignore\n * Encodes a buffer for DER, as sets the id to the given id\n */\nfunction encodeBuffer(buffer: Uint8Array, bufferId: number): Uint8Array {\n  if (buffer.length == 0) {\n    return buffer;\n  }\n\n  let result = new Uint8Array(buffer);\n\n  // If the high bit is set, prepend a 0\n  if ((result[0] & 0x80) === 0x80) {\n    let array = new Uint8Array(result.length + 1);\n    array[0] = 0;\n    array.set(result, 1);\n    result = array;\n  }\n\n  // Prepend the DER header for this buffer\n  let encodedLength = encodeLength(result.length);\n\n  let totalLength = 1 + encodedLength.length + result.length;\n\n  let outputBuffer = new Uint8Array(totalLength);\n  outputBuffer[0] = bufferId;\n  outputBuffer.set(encodedLength, 1);\n  outputBuffer.set(result, 1 + encodedLength.length);\n\n  return outputBuffer;\n}\n\n/**\n * @internal\n * @ignore\n * Encode a JWK to PEM format. To do so, it internally repackages the JWK as a DER\n * that is then encoded as a PEM.\n */\nexport function convertJWKtoPEM(key: JsonWebKey): string {\n  if (!key.n || !key.e) {\n    throw new Error(\"Unsupported key format for local operations\");\n  }\n  let encoded_n = encodeBuffer(key.n, 0x2); // INTEGER\n  let encoded_e = encodeBuffer(key.e, 0x2); // INTEGER\n\n  let encoded_ne = new Uint8Array(encoded_n.length + encoded_e.length);\n  encoded_ne.set(encoded_n, 0);\n  encoded_ne.set(encoded_e, encoded_n.length);\n\n  let full_encoded = encodeBuffer(encoded_ne, 0x30); //SEQUENCE\n\n  let buffer = Buffer.from(full_encoded).toString(\"base64\");\n\n  let beginBanner = \"-----BEGIN RSA PUBLIC KEY-----\\n\";\n  let endBanner = \"-----END RSA PUBLIC KEY-----\";\n\n  /*\n   Fill in the PEM with 64 character lines as per RFC:\n\n   \"To represent the encapsulated text of a PEM message, the encoding\n   function's output is delimited into text lines (using local\n   conventions), with each line except the last containing exactly 64\n   printable characters and the final line containing 64 or fewer\n   printable characters.\"\n  */\n  let outputString = beginBanner;\n  let lines = buffer.match(/.{1,64}/g);\n\n  if (lines) {\n    for (let line of lines) {\n      outputString += line;\n      outputString += \"\\n\";\n    }\n  } else {\n    throw new Error(\"Could not create correct PEM\");\n  }\n  outputString += endBanner;\n\n  return outputString;\n}\n\n/**\n * @internal\n * @ignore\n * Use the platform-local hashing functionality\n */\nasync function createHash(algorithm: string, data: Uint8Array): Promise<Buffer> {\n  if (isNode) {\n    let hash = cryptoCreateHash(algorithm);\n    hash.update(Buffer.from(data));\n    let digest = hash.digest();\n    return digest;\n  } else {\n    if (window && window.crypto && window.crypto.subtle) {\n      return Buffer.from(await window.crypto.subtle.digest(algorithm, Buffer.from(data)));\n    } else {\n      throw new Error(\"Browser does not support cryptography functions\");\n    }\n  }\n}\n\n/**\n * Supported algorithms for key wrapping/unwrapping\n */\nexport type KeyWrapAlgorithm = \"RSA-OAEP\" | \"RSA-OAEP-256\" | \"RSA1_5\";\n\n/**\n * Defines values for SignatureAlgorithm.\n * Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512',\n * 'ES256', 'ES384', 'ES512', 'ES256K'\n * @readonly\n * @enum {string}\n */\nexport type SignatureAlgorithm =\n  | \"PS256\"\n  | \"PS384\"\n  | \"PS512\"\n  | \"RS256\"\n  | \"RS384\"\n  | \"RS512\"\n  | \"ES256\"\n  | \"ES384\"\n  | \"ES512\"\n  | \"ES256K\";\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link encrypt}.\n */\nexport interface EncryptOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link decrypt}.\n */\nexport interface DecryptOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link sign}.\n */\nexport interface SignOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link verify}.\n */\nexport interface VerifyOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link wrapKey}.\n */\nexport interface WrapKeyOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * An interface representing the optional parameters that can be passed to {@link unwrapKey}.\n */\nexport interface UnwrapKeyOptions extends CryptographyOptions {}\n\n/**\n * @interface\n * Result of the {@link decrypt} operation.\n */\nexport interface DecryptResult {\n  /**\n   * Result of the {@link decrypt} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the KeyVault Key used to decrypt the encrypted data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to decrypt the encrypted data.\n   */\n  algorithm: EncryptionAlgorithm;\n}\n\n/**\n * @interface\n * Result of the {@link encrypt} operation.\n */\nexport interface EncryptResult {\n  /**\n   * Result of the {@link encrypt} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The {@link EncryptionAlgorithm} used to encrypt the data.\n   */\n  algorithm: EncryptionAlgorithm;\n  /**\n   * The ID of the KeyVault Key used to encrypt the data.\n   */\n  keyID?: string;\n}\n\n/**\n * @interface\n * Result of the {@link sign} operation.\n */\nexport interface SignResult {\n  /**\n   * Result of the {@link sign} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the KeyVault Key used to sign the data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to sign the data.\n   */\n  algorithm: SignatureAlgorithm;\n}\n\n/**\n * @interface\n * Result of the {@link verify} operation.\n */\nexport interface VerifyResult {\n  /**\n   * Result of the {@link verify} operation in bytes.\n   */\n  result: boolean;\n  /**\n   * The ID of the KeyVault Key used to verify the data.\n   */\n  keyID?: string;\n}\n\n/**\n * @interface\n * Result of the {@link wrap} operation.\n */\nexport interface WrapResult {\n  /**\n   * Result of the {@link wrap} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the KeyVault Key used to wrap the data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to wrap the data.\n   */\n  algorithm: KeyWrapAlgorithm;\n}\n\n/**\n * @interface\n * Result of the {@link unwrap} operation.\n */\nexport interface UnwrapResult {\n  /**\n   * Result of the {@link unwrap} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the KeyVault Key used to unwrap the data.\n   */\n  keyID?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint @typescript-eslint/member-ordering: 0 */\n\nimport {\n  PipelineOptions,\n  RequestOptionsBase,\n  TokenCredential,\n  createPipelineFromOptions,\n  isTokenCredential,\n  operationOptionsToRequestOptionsBase,\n  signingPolicy\n} from \"@azure/core-http\";\n\nimport { getTracer, Span } from \"@azure/core-tracing\";\nimport { logger } from \"./log\";\n\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\n\nimport {\n  BackupKeyResponse,\n  CreateKeyResponse,\n  DeleteKeyResponse,\n  DeletedKeyBundle,\n  DeletionRecoveryLevel,\n  GetDeletedKeyResponse,\n  GetKeyResponse,\n  ImportKeyResponse,\n  JsonWebKeyCurveName as KeyCurveName,\n  JsonWebKeyEncryptionAlgorithm as EncryptionAlgorithm,\n  JsonWebKeyOperation as KeyOperation,\n  JsonWebKeyType as KeyType,\n  KeyBundle,\n  KeyItem,\n  KeyVaultClientGetKeysOptionalParams,\n  RecoverDeletedKeyResponse,\n  RestoreKeyResponse,\n  UpdateKeyResponse\n} from \"./core/models\";\nimport { KeyVaultClient } from \"./core/keyVaultClient\";\nimport { SDK_VERSION } from \"./core/utils/constants\";\nimport { challengeBasedAuthenticationPolicy } from \"./core/challengeBasedAuthenticationPolicy\";\n\nimport { DeleteKeyPoller } from \"./lro/delete/poller\";\nimport { RecoverDeletedKeyPoller } from \"./lro/recover/poller\";\n\nimport {\n  BackupKeyOptions,\n  CreateEcKeyOptions,\n  CreateKeyOptions,\n  CreateRsaKeyOptions,\n  CryptographyOptions,\n  DeletedKey,\n  DeleteKeyOptions,\n  GetDeletedKeyOptions,\n  GetKeyOptions,\n  ImportKeyOptions,\n  JsonWebKey,\n  KeyClientInterface,\n  KeyPollerOptions,\n  BeginDeleteKeyOptions,\n  BeginRecoverDeletedKeyOptions,\n  KeyProperties,\n  KeyVaultKey,\n  ListPropertiesOfKeysOptions,\n  ListPropertiesOfKeyVersionsOptions,\n  ListDeletedKeysOptions,\n  PurgeDeletedKeyOptions,\n  RecoverDeletedKeyOptions,\n  RestoreKeyBackupOptions,\n  UpdateKeyPropertiesOptions\n} from \"./keysModels\";\nimport { parseKeyvaultIdentifier as parseKeyvaultEntityIdentifier } from \"./core/utils\";\n\nimport {\n  CryptographyClient,\n  DecryptOptions,\n  DecryptResult,\n  EncryptOptions,\n  EncryptResult,\n  SignatureAlgorithm,\n  KeyWrapAlgorithm,\n  SignOptions,\n  SignResult,\n  UnwrapKeyOptions,\n  UnwrapResult,\n  VerifyOptions,\n  VerifyResult,\n  WrapKeyOptions,\n  WrapResult\n} from \"./cryptographyClient\";\n\nexport {\n  BackupKeyOptions,\n  CreateEcKeyOptions,\n  CreateKeyOptions,\n  CreateRsaKeyOptions,\n  CryptographyClient,\n  CryptographyOptions,\n  DecryptOptions,\n  DecryptResult,\n  DeletedKey,\n  DeletionRecoveryLevel,\n  EncryptOptions,\n  EncryptResult,\n  GetDeletedKeyOptions,\n  GetKeyOptions,\n  ImportKeyOptions,\n  JsonWebKey,\n  KeyCurveName,\n  EncryptionAlgorithm,\n  KeyOperation,\n  KeyType,\n  KeyPollerOptions,\n  BeginDeleteKeyOptions,\n  BeginRecoverDeletedKeyOptions,\n  KeyProperties,\n  SignatureAlgorithm,\n  KeyVaultKey,\n  KeyWrapAlgorithm,\n  ListPropertiesOfKeysOptions,\n  ListPropertiesOfKeyVersionsOptions,\n  ListDeletedKeysOptions,\n  PageSettings,\n  PagedAsyncIterableIterator,\n  PipelineOptions,\n  PollOperationState,\n  PollerLike,\n  PurgeDeletedKeyOptions,\n  RestoreKeyBackupOptions,\n  SignOptions,\n  SignResult,\n  UnwrapKeyOptions,\n  UnwrapResult,\n  UpdateKeyPropertiesOptions,\n  VerifyOptions,\n  VerifyResult,\n  WrapKeyOptions,\n  WrapResult,\n  logger\n};\n\n// This is part of constructing the autogenerated client. In the future, it should not\n// be required. See also: https://github.com/Azure/azure-sdk-for-js/issues/5508\nconst SERVICE_API_VERSION = \"7.0\";\n\n/**\n * The KeyClient provides methods to manage {@link KeyVaultKey} in the\n * Azure Key Vault. The client supports creating, retrieving, updating,\n * deleting, purging, backing up, restoring and listing KeyVaultKeys. The\n * client also supports listing {@link DeletedKey} for a soft-delete enabled Azure Key\n * Vault.\n */\nexport class KeyClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated KeyVault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * @internal\n   * @ignore\n   * A self reference that bypasses private methods, for the pollers.\n   */\n  private readonly pollerClient: KeyClientInterface = {\n    recoverDeletedKey: this.recoverDeletedKey.bind(this),\n    getKey: this.getKey.bind(this),\n    deleteKey: this.deleteKey.bind(this),\n    getDeletedKey: this.getDeletedKey.bind(this)\n  };\n\n  /**\n   * Creates an instance of KeyClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { KeyClient } from \"@azure/keyvault-keys\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;\n   * let credentials = new DefaultAzureCredential();\n   *\n   * let client = new KeyClient(vaultUrl, credentials);\n   * ```\n   * @param {string} vaultUrl the URL of the Key Vault. It should have this shape: https://${your-key-vault-name}.vault.azure.net\n   * @param {TokenCredential} credential An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the @azure/identity package to create a credential that suits your needs.\n   * @param {PipelineOptions} [pipelineOptions] Pipeline options used to configure Key Vault API requests. Omit this parameter to use the default pipeline configuration.\n   * @memberof KeyClient\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    pipelineOptions: PipelineOptions = {}\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    const libInfo = `azsdk-js-keyvault-keys/${SDK_VERSION}`;\n    if (pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions.userAgentPrefix !== undefined\n        ? `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`\n        : libInfo;\n    } else {\n      pipelineOptions.userAgentOptions = {\n        userAgentPrefix: libInfo\n      };\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? challengeBasedAuthenticationPolicy(credential)\n      : signingPolicy(credential);\n\n    const internalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          logPolicyOptions: {\n            allowedHeaderNames: [\n              \"x-ms-keyvault-region\",\n              \"x-ms-keyvault-network-info\",\n              \"x-ms-keyvault-service-version\"\n            ]\n          }\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new KeyVaultClient(credential, SERVICE_API_VERSION, pipeline);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a delete request for the given KeyVault Key's name to the KeyVault service.\n   * Since the KeyVault Key won't be immediately deleted, we have {@link beginDeleteKey}.\n   * @param {string} name The name of the KeyVault Key.\n   * @param {DeleteKeyOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async deleteKey(name: string, options: DeleteKeyOptions = {}): Promise<DeletedKey> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"deleteKey\", requestOptions);\n\n    let response: DeleteKeyResponse;\n    try {\n      response = await this.client.deleteKey(\n        this.vaultUrl,\n        name,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getKeyFromKeyBundle(response);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a request to recover a deleted KeyVault Key based on the given name.\n   * Since the KeyVault Key won't be immediately recover the deleted key, we have {@link beginRecoverDeletedKey}.\n   * @param {string} name The name of the KeyVault Key.\n   * @param {RecoverDeletedKeyOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async recoverDeletedKey(\n    name: string,\n    options: RecoverDeletedKeyOptions = {}\n  ): Promise<KeyVaultKey> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"recoverDeletedKey\", requestOptions);\n\n    let response: RecoverDeletedKeyResponse;\n    try {\n      response = await this.client.recoverDeletedKey(\n        this.vaultUrl,\n        name,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getKeyFromKeyBundle(response);\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * // Create an elliptic-curve key:\n   * let result = await client.createKey(\"MyKey\", \"EC\");\n   * ```\n   * @summary Creates a new key, stores it, then returns key parameters and properties to the client.\n   * @param {string} name The name of the key.\n   * @param {JsonWebKeyType} keyType The type of the key. One of the following: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.\n   * @param {CreateKeyOptions} [options] The optional parameters.\n   */\n  public async createKey(\n    name: string,\n    keyType: KeyType,\n    options?: CreateKeyOptions\n  ): Promise<KeyVaultKey> {\n    if (options) {\n      const requestOptions = operationOptionsToRequestOptionsBase(options);\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        keyAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"createKey\", unflattenedOptions);\n\n      let response: CreateKeyResponse;\n\n      try {\n        response = await this.client.createKey(\n          this.vaultUrl,\n          name,\n          keyType,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n      return this.getKeyFromKeyBundle(response);\n    } else {\n      const response = await this.client.createKey(this.vaultUrl, name, keyType, options);\n      return this.getKeyFromKeyBundle(response);\n    }\n  }\n\n  /**\n   * The createEcKey method creates a new eliptic curve key in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let result = await client.createEcKey(\"MyKey\", { curve: \"P-256\" });\n   * ```\n   * @summary Creates a new key, stores it, then returns key parameters and properties to the client.\n   * @param {string} name The name of the key.\n   * @param {CreateEcKeyOptions} [options] The optional parameters.\n   */\n  public async createEcKey(name: string, options?: CreateEcKeyOptions): Promise<KeyVaultKey> {\n    if (options) {\n      const requestOptions = operationOptionsToRequestOptionsBase(options);\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        keyAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"createEcKey\", unflattenedOptions);\n\n      let response: CreateKeyResponse;\n      try {\n        response = await this.client.createKey(\n          this.vaultUrl,\n          name,\n          options.hsm ? \"EC-HSM\" : \"EC\",\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getKeyFromKeyBundle(response);\n    } else {\n      const response = await this.client.createKey(this.vaultUrl, name, \"EC\", options);\n      return this.getKeyFromKeyBundle(response);\n    }\n  }\n\n  /**\n   * The createRSAKey method creates a new RSA key in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let result = await client.createRsaKey(\"MyKey\", { keySize: 2048 });\n   * ```\n   * @summary Creates a new key, stores it, then returns key parameters and properties to the client.\n   * @param {string} name The name of the key.\n   * @param {CreateRsaKeyOptions} [options] The optional parameters.\n   */\n  public async createRsaKey(name: string, options?: CreateRsaKeyOptions): Promise<KeyVaultKey> {\n    if (options) {\n      const requestOptions = operationOptionsToRequestOptionsBase(options);\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        keyAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"createRsaKey\", unflattenedOptions);\n\n      let response: CreateKeyResponse;\n      try {\n        response = await this.client.createKey(\n          this.vaultUrl,\n          name,\n          options.hsm ? \"RSA-HSM\" : \"RSA\",\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getKeyFromKeyBundle(response);\n    } else {\n      const response = await this.client.createKey(this.vaultUrl, name, \"RSA\", options);\n      return this.getKeyFromKeyBundle(response);\n    }\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the\n   * named key already exists, Azure Key Vault creates a new version of the key. This operation\n   * requires the keys/import permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * // Key contents in myKeyContents\n   * let result = await client.importKey(\"MyKey\", myKeyContents);\n   * ```\n   * @summary Imports an externally created key, stores it, and returns key parameters and properties\n   * to the client.\n   * @param {string} name Name for the imported key.\n   * @param {JsonWebKey} key The JSON web key.\n   * @param {ImportKeyOptions} [options] The optional parameters.\n   */\n  public async importKey(\n    name: string,\n    key: JsonWebKey,\n    options: ImportKeyOptions\n  ): Promise<KeyVaultKey> {\n    if (options) {\n      const requestOptions = operationOptionsToRequestOptionsBase(options);\n      const {\n        enabled,\n        notBefore,\n        expiresOn: expires,\n        hardwareProtected: hsm,\n        ...remainingOptions\n      } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        keyAttributes: {\n          enabled,\n          notBefore,\n          expires,\n          hsm\n        }\n      };\n\n      const span = this.createSpan(\"importKey\", unflattenedOptions);\n\n      let response: ImportKeyResponse;\n      try {\n        response = await this.client.importKey(\n          this.vaultUrl,\n          name,\n          key,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getKeyFromKeyBundle(response);\n    } else {\n      const response = await this.client.importKey(this.vaultUrl, name, key, options);\n      return this.getKeyFromKeyBundle(response);\n    }\n  }\n\n  /**\n   * The delete operation applies to any key stored in Azure Key Vault. Individual versions\n   * of a key can not be deleted, only all versions of a given key at once.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indifinetly until the key is deleted.\n   *\n   * This operation requires the keys/delete permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new KeyClient(url, credentials);\n   * await client.createKey(\"MyKey\", \"EC\");\n   * const poller = await client.beginDeleteKey(\"MyKey\");\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   * // A new poller can be created with:\n   * // await client.beginDeleteKey(\"MyKey\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const deletedKey = await poller.pollUntilDone();\n   * console.log(deletedKey);\n   * ```\n   * @summary Deletes a key from a specified key vault.\n   * @param {string} name The name of the key.\n   * @param {BeginDeleteKeyOptions} [options] The optional parameters.\n   */\n  public async beginDeleteKey(\n    name: string,\n    options: BeginDeleteKeyOptions = {}\n  ): Promise<PollerLike<PollOperationState<DeletedKey>, DeletedKey>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const poller = new DeleteKeyPoller({\n      name,\n      client: this.pollerClient,\n      intervalInMs: options.intervalInMs,\n      resumeFrom: options.resumeFrom,\n      requestOptions\n    });\n\n    // This will initialize the poller's operation (the deletion of the key).\n    await poller.poll();\n\n    return poller;\n  }\n\n  /**\n   * The updateKeyProperties method changes specified properties of an existing stored key. Properties that\n   * are not specified in the request are left unchanged. The value of a key itself cannot be\n   * changed. This operation requires the keys/set permission.\n   *\n   * Example usage:\n   * ```ts\n   * let keyName = \"MyKey\";\n   * let client = new KeyClient(url, credentials);\n   * let key = await client.getKey(keyName);\n   * let result = await client.updateKeyProperties(keyName, key.version, { enabled: false });\n   * ```\n   * @summary Updates the properties associated with a specified key in a given key vault.\n   * @param {string} name The name of the key.\n   * @param {string} keyVersion The version of the key.\n   * @param {UpdateKeyPropertiesOptions} [options] The optional parameters.\n   */\n  public async updateKeyProperties(\n    name: string,\n    keyVersion: string,\n    options?: UpdateKeyPropertiesOptions\n  ): Promise<KeyVaultKey> {\n    if (options) {\n      const requestOptions = operationOptionsToRequestOptionsBase(options);\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        keyAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"updateKeyProperties\", unflattenedOptions);\n\n      let response: UpdateKeyResponse;\n\n      try {\n        response = await this.client.updateKey(\n          this.vaultUrl,\n          name,\n          keyVersion,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getKeyFromKeyBundle(response);\n    } else {\n      const response = await this.client.updateKey(this.vaultUrl, name, keyVersion, options);\n      return this.getKeyFromKeyBundle(response);\n    }\n  }\n\n  /**\n   * The get method gets a specified key and is applicable to any key stored in Azure Key Vault.\n   * This operation requires the keys/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let key = await client.getKey(\"MyKey\");\n   * ```\n   * @summary Get a specified key from a given key vault.\n   * @param {string} name The name of the key.\n   * @param {GetKeyOptions} [options] The optional parameters.\n   */\n  public async getKey(name: string, options: GetKeyOptions = {}): Promise<KeyVaultKey> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getKey\", requestOptions);\n\n    let response: GetKeyResponse;\n    try {\n      response = await this.client.getKey(\n        this.vaultUrl,\n        name,\n        options && options.version ? options.version : \"\",\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getKeyFromKeyBundle(response);\n  }\n\n  /**\n   * The getDeletedKey method returns the specified deleted key along with its properties.\n   * This operation requires the keys/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let key = await client.getDeletedKey(\"MyDeletedKey\");\n   * ```\n   * @summary Gets the specified deleted key.\n   * @param {string} name The name of the key.\n   * @param {GetDeletedKeyOptions} [options] The optional parameters.\n   */\n  public async getDeletedKey(\n    name: string,\n    options: GetDeletedKeyOptions = {}\n  ): Promise<DeletedKey> {\n    const responseOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getDeletedKey\", responseOptions);\n\n    let response: GetDeletedKeyResponse;\n    try {\n      response = await this.client.getDeletedKey(\n        this.vaultUrl,\n        name,\n        this.setParentSpan(span, responseOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getKeyFromKeyBundle(response);\n  }\n\n  /**\n   * The purge deleted key operation removes the key permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the keys/purge permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new KeyClient(url, credentials);\n   * const deletePoller = await client.beginDeleteKey(\"MyKey\")\n   * await deletePoller.pollUntilDone();\n   * await client.purgeDeletedKey(\"MyKey\");\n   * ```\n   * @summary Permanently deletes the specified key.\n   * @param name The name of the key.\n   * @param {PurgeDeletedKeyOptions} [options] The optional parameters.\n   */\n  public async purgeDeletedKey(name: string, options: PurgeDeletedKeyOptions = {}): Promise<void> {\n    const responseOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"purgeDeletedKey\", responseOptions);\n\n    try {\n      await this.client.purgeDeletedKey(\n        this.vaultUrl,\n        name,\n        this.setParentSpan(span, responseOptions)\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Recovers the deleted key in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indifinetly until the deleted key is recovered.\n   *\n   * This operation requires the keys/recover permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new KeyClient(url, credentials);\n   * await client.createKey(\"MyKey\", \"EC\");\n   * const deletePoller = await client.beginDeleteKey(\"MyKey\");\n   * await deletePoller.pollUntilDone();\n   * const poller = await client.beginRecoverDeletedKey(\"MyKey\");\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   * // A new poller can be created with:\n   * // await client.beginRecoverDeletedKey(\"MyKey\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const key = await poller.pollUntilDone();\n   * console.log(key);\n   * ```\n   * @summary Recovers the deleted key to the latest version.\n   * @param name The name of the deleted key.\n   * @param {BeginRecoverDeletedKeyOptions} [options] The optional parameters.\n   */\n  public async beginRecoverDeletedKey(\n    name: string,\n    options: BeginRecoverDeletedKeyOptions = {}\n  ): Promise<PollerLike<PollOperationState<DeletedKey>, DeletedKey>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    const poller = new RecoverDeletedKeyPoller({\n      name,\n      client: this.pollerClient,\n      intervalInMs: options.intervalInMs,\n      resumeFrom: options.resumeFrom,\n      requestOptions: requestOptions\n    });\n    // This will initialize the poller's operation (the deletion of the key).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Requests that a backup of the specified key be downloaded to the client. All versions of the\n   * key will be downloaded. This operation requires the keys/backup permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let backupContents = await client.backupKey(\"MyKey\");\n   * ```\n   * @summary Backs up the specified key.\n   * @param {string} name The name of the key.\n   * @param {BackupKeyOptions} [options] The optional parameters.\n   */\n  public async backupKey(\n    name: string,\n    options: BackupKeyOptions = {}\n  ): Promise<Uint8Array | undefined> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"backupKey\", requestOptions);\n\n    let response: BackupKeyResponse;\n    try {\n      response = await this.client.backupKey(\n        this.vaultUrl,\n        name,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return response.value;\n  }\n\n  /**\n   * Restores a backed up key, and all its versions, to a vault. This operation requires the\n   * keys/restore permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * let backupContents = await client.backupKey(\"MyKey\");\n   * // ...\n   * let key = await client.restoreKeyBackup(backupContents);\n   * ```\n   * @summary Restores a backed up key to a vault.\n   * @param {Uint8Array} backup The backup blob associated with a key bundle.\n   * @param {RestoreKeyBackupOptions} [options] The optional parameters.\n   */\n  public async restoreKeyBackup(\n    backup: Uint8Array,\n    options: RestoreKeyBackupOptions = {}\n  ): Promise<KeyVaultKey> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"restoreKeyBackup\", requestOptions);\n\n    let response: RestoreKeyResponse;\n    try {\n      response = await this.client.restoreKey(\n        this.vaultUrl,\n        backup,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getKeyFromKeyBundle(response);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfKeyVersions}.\n   * @param {string} name The name of the KeyVault Key.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfKeyVersionsOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listPropertiesOfKeyVersionsPage(\n    name: string,\n    continuationState: PageSettings,\n    options?: ListPropertiesOfKeyVersionsOptions\n  ): AsyncIterableIterator<KeyProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetKeysOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getKeyVersions(\n        this.vaultUrl,\n        name,\n        optionsComplete\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getKeyPropertiesFromKeyItem);\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getKeyVersions(\n        continuationState.continuationToken,\n        name,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getKeyPropertiesFromKeyItem);\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfKeyVersions}.\n   * @param {string} name The name of the KeyVault Key.\n   * @param {ListPropertiesOfKeyVersionsOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listPropertiesOfKeyVersionsAll(\n    name: string,\n    options?: ListPropertiesOfKeyVersionsOptions\n  ): AsyncIterableIterator<KeyProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfKeyVersionsPage(name, f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates all versions of the given key in the vault. The full key identifier, properties, and tags are provided\n   * in the response. This operation requires the keys/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * for await (const keyProperties of client.listPropertiesOfKeyVersions(\"MyKey\")) {\n   *   const key = await client.getKey(keyProperties.name);\n   *   console.log(\"key version: \", key);\n   * }\n   * ```\n   * @param {string} name Name of the key to fetch versions for\n   * @param {ListPropertiesOfKeyVersionsOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfKeyVersions(\n    name: string,\n    options: ListPropertiesOfKeyVersionsOptions = {}\n  ): PagedAsyncIterableIterator<KeyProperties, KeyProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfKeyVersions\", requestOptions);\n    const updatedOptions: ListPropertiesOfKeyVersionsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfKeyVersionsAll(name, updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfKeyVersionsPage(name, settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfKeys}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfKeysOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listPropertiesOfKeysPage(\n    continuationState: PageSettings,\n    options?: ListPropertiesOfKeysOptions\n  ): AsyncIterableIterator<KeyProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetKeysOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getKeys(this.vaultUrl, optionsComplete);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getKeyPropertiesFromKeyItem);\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getKeys(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getKeyPropertiesFromKeyItem);\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfKeys}.\n   * @param {ListPropertiesOfKeysOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listPropertiesOfKeysAll(\n    options?: ListPropertiesOfKeysOptions\n  ): AsyncIterableIterator<KeyProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfKeysPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the latest version of all keys in the vault.  The full key identifier and properties are provided\n   * in the response. No values are returned for the keys. This operations requires the keys/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * for await (const keyProperties of client.listPropertiesOfKeys()) {\n   *   const key = await client.getKey(keyProperties.name);\n   *   console.log(\"key: \", key);\n   * }\n   * ```\n   * @summary List all keys in the vault\n   * @param {ListPropertiesOfKeysOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfKeys(\n    options: ListPropertiesOfKeysOptions = {}\n  ): PagedAsyncIterableIterator<KeyProperties, KeyProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfKeys\", requestOptions);\n    const updatedOptions: ListPropertiesOfKeysOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfKeysAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfKeysPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listDeletedKeys}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListDeletedKeysOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listDeletedKeysPage(\n    continuationState: PageSettings,\n    options?: ListDeletedKeysOptions\n  ): AsyncIterableIterator<DeletedKey[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetKeysOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getDeletedKeys(this.vaultUrl, optionsComplete);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getDeletedKeyFromKeyItem);\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getDeletedKeys(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(this.getDeletedKeyFromKeyItem);\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listDeletedKeys}.\n   * @param {ListDeletedKeysOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listDeletedKeysAll(\n    options?: ListDeletedKeysOptions\n  ): AsyncIterableIterator<DeletedKey> {\n    const f = {};\n\n    for await (const page of this.listDeletedKeysPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the deleted keys in the vault.  The full key identifier and properties are provided\n   * in the response. No values are returned for the keys. This operations requires the keys/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new KeyClient(url, credentials);\n   * for await (const deletedKey of client.listDeletedKeys()) {\n   *   const deletedKey = await client.getKey(deletedKey.name);\n   *   console.log(\"deleted key: \", deletedKey);\n   * }\n   * ```\n   * @summary List all keys in the vault\n   * @param {ListDeletedKeysOptions} [options] The optional parameters.\n   */\n  public listDeletedKeys(\n    options: ListDeletedKeysOptions = {}\n  ): PagedAsyncIterableIterator<DeletedKey, DeletedKey[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listDeletedKeys\", requestOptions);\n\n    const updatedOptions: ListDeletedKeysOptions = {\n      ...options,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listDeletedKeysAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listDeletedKeysPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Shapes the exposed {@link KeyVaultKey} based on either a received key bundle or deleted key bundle.\n   */\n  private getKeyFromKeyBundle(bundle: KeyBundle | DeletedKeyBundle): KeyVaultKey {\n    const keyBundle = bundle as KeyBundle;\n    const deletedKeyBundle = bundle as DeletedKeyBundle;\n\n    const parsedId = parseKeyvaultEntityIdentifier(\n      \"keys\",\n      keyBundle.key ? keyBundle.key.kid : undefined\n    );\n\n    const attributes: any = keyBundle.attributes || {};\n    delete keyBundle.attributes;\n\n    let resultObject: KeyVaultKey & DeletedKey = {\n      key: keyBundle.key,\n      id: keyBundle.key ? keyBundle.key.kid : undefined,\n      name: parsedId.name,\n      keyOperations: keyBundle.key ? keyBundle.key.keyOps : undefined,\n      keyType: keyBundle.key ? keyBundle.key.kty : undefined,\n      properties: {\n        id: keyBundle.key ? keyBundle.key.kid : undefined,\n        name: parsedId.name,\n        expiresOn: attributes.expires,\n        createdOn: attributes.created,\n        updatedOn: attributes.updated,\n        vaultUrl: parsedId.vaultUrl,\n        ...keyBundle,\n        ...parsedId,\n        ...attributes\n      }\n    };\n\n    if (deletedKeyBundle.deletedDate) {\n      resultObject.properties.deletedOn = deletedKeyBundle.deletedDate;\n      delete (resultObject.properties as any).deletedDate;\n    }\n\n    if (attributes.vaultUrl) {\n      delete (resultObject.properties as any).vaultUrl;\n    }\n    if (attributes.expires) {\n      delete (resultObject.properties as any).expires;\n    }\n    if (attributes.created) {\n      delete (resultObject.properties as any).created;\n    }\n    if (attributes.updated) {\n      delete (resultObject.properties as any).updated;\n    }\n\n    return resultObject;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Shapes the exposed {@link DeletedKey} based on a received KeyItem.\n   */\n  private getDeletedKeyFromKeyItem(keyItem: KeyItem): DeletedKey {\n    const parsedId = parseKeyvaultEntityIdentifier(\"keys\", keyItem.kid);\n\n    const attributes = keyItem.attributes || {};\n\n    let abstractProperties: any = {\n      id: keyItem.kid,\n      name: parsedId.name,\n      deletedOn: (attributes as any).deletedDate,\n      expiresOn: attributes.expires,\n      createdOn: attributes.created,\n      updatedOn: attributes.updated,\n      ...keyItem,\n      ...parsedId,\n      ...keyItem.attributes\n    };\n\n    if (abstractProperties.deletedDate) {\n      delete abstractProperties.deletedDate;\n    }\n\n    if (abstractProperties.expires) {\n      delete abstractProperties.expires;\n    }\n    if (abstractProperties.created) {\n      delete abstractProperties.created;\n    }\n    if (abstractProperties.updated) {\n      delete abstractProperties.updated;\n    }\n\n    return {\n      key: keyItem,\n      id: keyItem.kid,\n      name: abstractProperties.name,\n      properties: abstractProperties\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Shapes the exposed {@link KeyProperties} based on a received KeyItem.\n   */\n  private getKeyPropertiesFromKeyItem(keyItem: KeyItem): KeyProperties {\n    const parsedId = parseKeyvaultEntityIdentifier(\"keys\", keyItem.kid);\n\n    const attributes = keyItem.attributes || {};\n\n    let resultObject: any = {\n      createdOn: attributes.created,\n      updatedOn: attributes.updated,\n      vaultUrl: parsedId.vaultUrl,\n      ...keyItem,\n      ...parsedId,\n      ...keyItem.attributes\n    };\n\n    delete resultObject.attributes;\n\n    if (keyItem.attributes!.expires) {\n      resultObject.expiresOn = keyItem.attributes!.expires;\n      delete resultObject.expires;\n    }\n\n    return resultObject;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Creates a span using the tracer that was set by the user.\n   * @param {string} methodName The name of the method creating the span.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private createSpan(methodName: string, requestOptions?: RequestOptionsBase): Span {\n    const tracer = getTracer();\n    return tracer.startSpan(methodName, requestOptions && requestOptions.spanOptions);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns updated HTTP options with the given span as the parent of future spans,\n   * if applicable.\n   * @param {Span} span The span for the current operation.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private setParentSpan(span: Span, options: RequestOptionsBase = {}): RequestOptionsBase {\n    if (span.isRecordingEvents()) {\n      return {\n        ...options,\n        spanOptions: {\n          ...options.spanOptions,\n          parent: span\n        }\n      };\n    } else {\n      return options;\n    }\n  }\n}\n"],"names":["createClientLogger","__extends","coreHttp.getDefaultUserAgentValue","coreHttp.ServiceClient","coreHttp.Serializer","Parameters.vaultBaseUrl","Parameters.keyName0","Parameters.apiVersion","Mappers.KeyCreateParameters","Mappers.KeyBundle","Mappers.KeyVaultError","Mappers.KeyImportParameters","Parameters.keyName1","Mappers.DeletedKeyBundle","Parameters.keyVersion","Mappers.KeyUpdateParameters","Parameters.maxresults","Mappers.KeyListResult","Mappers.BackupKeyResult","Mappers.KeyRestoreParameters","Mappers.KeyOperationsParameters","Mappers.KeyOperationResult","Mappers.KeySignParameters","Mappers.KeyVerifyParameters","Mappers.KeyVerifyResult","Mappers.DeletedKeyListResult","Parameters.secretName0","Mappers.SecretSetParameters","Mappers.SecretBundle","Parameters.secretName1","Mappers.DeletedSecretBundle","Parameters.secretVersion","Mappers.SecretUpdateParameters","Mappers.SecretListResult","Mappers.DeletedSecretListResult","Mappers.BackupSecretResult","Mappers.SecretRestoreParameters","Parameters.includePending","Mappers.CertificateListResult","Parameters.certificateName0","Mappers.DeletedCertificateBundle","Mappers.Contacts","Mappers.CertificateIssuerListResult","Parameters.issuerName","Mappers.CertificateIssuerSetParameters","Mappers.IssuerBundle","Mappers.CertificateIssuerUpdateParameters","Parameters.certificateName1","Mappers.CertificateCreateParameters","Mappers.CertificateOperation","Mappers.CertificateImportParameters","Mappers.CertificateBundle","Mappers.CertificatePolicy","Parameters.certificateVersion","Mappers.CertificateUpdateParameters","Mappers.CertificateOperationUpdateParameter","Mappers.CertificateMergeParameters","Mappers.BackupCertificateResult","Mappers.CertificateRestoreParameters","Mappers.DeletedCertificateListResult","Mappers.StorageListResult","Mappers.DeletedStorageListResult","Parameters.storageAccountName0","Mappers.DeletedStorageBundle","Mappers.StorageBundle","Parameters.storageAccountName1","Mappers.BackupStorageResult","Mappers.StorageRestoreParameters","Mappers.StorageAccountCreateParameters","Mappers.StorageAccountUpdateParameters","Mappers.StorageAccountRegenerteKeyParameters","Mappers.SasDefinitionListResult","Mappers.DeletedSasDefinitionListResult","Parameters.sasDefinitionName","Mappers.DeletedSasDefinitionBundle","Mappers.SasDefinitionBundle","Mappers.SasDefinitionCreateParameters","Mappers.SasDefinitionUpdateParameters","ExpiringAccessTokenCache","HttpHeaders","Constants","BaseRequestPolicy","delay","Poller","update","cancel","toString","url.parse","isTokenCredential","signingPolicy","createPipelineFromOptions","operationOptionsToRequestOptionsBase","isNode","constants.RSA_PKCS1_PADDING","publicEncrypt","createVerify","getTracer","cryptoCreateHash","SERVICE_API_VERSION","__asyncValues","parseKeyvaultEntityIdentifier"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAIA;;;AAGA,IAAa,MAAM,GAAGA,2BAAkB,CAAC,eAAe,CAAC;;ACRzD;;;;;;;AAUO,IAAM,UAAU,GAA6B;IAClD,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,SAAS,EAAE;gBACT,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,UAAU,GAA6B;IAClD,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,CAAC,EAAE;gBACD,cAAc,EAAE,GAAG;gBACnB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,aAAa,GAA6B;IACrD,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,oCACV,UAAU,CAAC,IAAI,CAAC,eAAe,KAClC,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,SAAS,GAA6B;IACjD,cAAc,EAAE,WAAW;IAC3B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,WAAW;QACtB,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,YAAY;iBACxB;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,OAAO,GAA6B;IAC/C,cAAc,EAAE,SAAS;IACzB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,oCACV,SAAS,CAAC,IAAI,CAAC,eAAe,KACjC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,cAAc,GAA6B;IACtD,cAAc,EAAE,gBAAgB;IAChC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gBAAgB;QAC3B,eAAe,oCACV,OAAO,CAAC,IAAI,CAAC,eAAe,KAC/B,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,oCACV,UAAU,CAAC,IAAI,CAAC,eAAe,KAClC,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,YAAY,GAA6B;IACpD,cAAc,EAAE,cAAc;IAC9B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,UAAU,GAA6B;IAClD,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,oCACV,YAAY,CAAC,IAAI,CAAC,eAAe,KACpC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,oCACV,UAAU,CAAC,IAAI,CAAC,eAAe,KAClC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,wBAAwB,GAA6B;IAChE,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,EAAE;YACf,mBAAmB,EAAE;gBACnB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,qBAAqB,GAA6B;IAC7D,cAAc,EAAE,uBAAuB;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,uBAAuB;QAClC,eAAe,oCACV,UAAU,CAAC,IAAI,CAAC,eAAe,KAClC,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,eAAe,GAA6B;IACvD,cAAc,EAAE,iBAAiB;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,iBAAiB;QAC5B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,cAAc,EAAE;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,qBAAqB,GAA6B;IAC7D,cAAc,EAAE,uBAAuB;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,uBAAuB;QAClC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,aAAa,GAA6B;IACrD,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,KAAK,EAAE;gBACL,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,yBAAyB,GAA6B;IACjE,cAAc,EAAE,2BAA2B;IAC3C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,2BAA2B;QACtC,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,uBAAuB,EAAE;gBACvB,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,iBAAiB;gBACjC,WAAW,EAAE;oBACX,gBAAgB,EAAE,CAAC;iBACpB;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,OAAO,GAA6B;IAC/C,cAAc,EAAE,SAAS;IACzB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE;YACf,kBAAkB,EAAE;gBAClB,cAAc,EAAE,qBAAqB;gBACrC,WAAW,EAAE;oBACX,gBAAgB,EAAE,EAAE;oBACpB,gBAAgB,EAAE,CAAC;iBACpB;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,MAAM,GAA6B;IAC9C,cAAc,EAAE,QAAQ;IACxB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,QAAQ;QACnB,eAAe,EAAE;YACf,UAAU,EAAE;gBACV,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAC,eAAe,EAAE,WAAW,CAAC;iBAC9C;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,cAAc,GAA6B;IACtD,cAAc,EAAE,gBAAgB;IAChC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gBAAgB;QAC3B,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,SAAS;iBACrB;aACF;YACD,MAAM,EAAE;gBACN,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,QAAQ;iBACpB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,eAAe,EAAE;gBACf,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,uBAAuB,EAAE;gBACvB,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,yBAAyB,EAAE;gBACzB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,2BAA2B;iBACvC;aACF;YACD,eAAe,EAAE;gBACf,cAAc,EAAE,kBAAkB;gBAClC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,gBAAgB;yBAC5B;qBACF;iBACF;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,wBAAwB,GAA6B;IAChE,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,oCACV,iBAAiB,CAAC,IAAI,CAAC,eAAe,KACzC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,sBAAsB,GAA6B;IAC9D,cAAc,EAAE,wBAAwB;IACxC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wBAAwB;QACnC,eAAe,oCACV,eAAe,CAAC,IAAI,CAAC,eAAe,KACvC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,UAAU,GAA6B;IAClD,cAAc,EAAE,OAAO;IACvB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,YAAY;iBACxB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAA6B;IAC5D,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,qBAAqB,EAAE;gBACrB,cAAc,EAAE,wBAAwB;gBACxC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,MAAM,EAAE;gBACN,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,YAAY;iBACxB;aACF;YACD,MAAM,EAAE;gBACN,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAA6B;IAC5D,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,sBAAsB;yBAClC;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,YAAY,GAA6B;IACpD,cAAc,EAAE,cAAc;IAC9B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,mBAAmB,EAAE;gBACnB,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,qBAAqB;iBACjC;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,OAAO,GAA6B;IAC/C,cAAc,EAAE,SAAS;IACzB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE;YACf,YAAY,EAAE;gBACZ,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,QAAQ,GAA6B;IAChD,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,SAAS;yBACrB;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,WAAW,EAAE;oBACX,SAAS,EAAE,CAAC;iBACb;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,aAAa,EAAE;gBACb,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,KAAK,EAAE;gBACL,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,YAAY;iBACxB;aACF;YACD,aAAa,EAAE;gBACb,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,WAAW,EAAE;oBACX,SAAS,EAAE,CAAC;iBACb;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,WAAW,EAAE;oBACX,SAAS,EAAE,CAAC;iBACb;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,WAAW,EAAE;oBACX,SAAS,EAAE,CAAC;iBACb;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,aAAa,EAAE;gBACb,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,eAAe;iBAC3B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAA6B;IAC5D,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,eAAe,EAAE;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,sBAAsB,GAA6B;IAC9D,cAAc,EAAE,wBAAwB;IACxC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wBAAwB;QACnC,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,gBAAgB,EAAE;gBAChB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,2BAA2B,GAA6B;IACnE,cAAc,EAAE,6BAA6B;IAC7C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,qBAAqB,EAAE;gBACrB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,2BAA2B,GAA6B;IACnE,cAAc,EAAE,6BAA6B;IAC7C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,wBAAwB,EAAE;gBACxB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,iBAAiB,EAAE;gBACjB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,qBAAqB,EAAE;gBACrB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,2BAA2B,GAA6B;IACnE,cAAc,EAAE,6BAA6B;IAC7C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,qBAAqB,EAAE;gBACrB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,0BAA0B,GAA6B;IAClE,cAAc,EAAE,4BAA4B;IAC5C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,4BAA4B;QACvC,eAAe,EAAE;YACf,gBAAgB,EAAE;gBAChB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;yBAClB;qBACF;iBACF;aACF;YACD,qBAAqB,EAAE;gBACrB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,uBAAuB;iBACnC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,8BAA8B,GAA6B;IACtE,cAAc,EAAE,gCAAgC;IAChD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gCAAgC;QAC3C,eAAe,EAAE;YACf,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,mBAAmB,EAAE;gBACnB,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,qBAAqB;iBACjC;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iCAAiC,GAA6B;IACzE,cAAc,EAAE,mCAAmC;IACnD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mCAAmC;QAC9C,eAAe,EAAE;YACf,QAAQ,EAAE;gBACR,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,mBAAmB;iBAC/B;aACF;YACD,mBAAmB,EAAE;gBACnB,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,qBAAqB;iBACjC;aACF;YACD,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,kBAAkB;iBAC9B;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mCAAmC,GAA6B;IAC3E,cAAc,EAAE,qCAAqC;IACrD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qCAAqC;QAChD,eAAe,EAAE;YACf,qBAAqB,EAAE;gBACrB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,wBAAwB;gBACxC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,kBAAkB,GAA6B;IAC1D,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,eAAe,GAA6B;IACvD,cAAc,EAAE,iBAAiB;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,iBAAiB;QAC5B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,aAAa,GAA6B;IACrD,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,SAAS;yBACrB;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAA6B;IAC5D,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,gBAAgB;yBAC5B;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,gBAAgB,GAA6B;IACxD,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,YAAY;yBACxB;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,mBAAmB;yBAC/B;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,qBAAqB,GAA6B;IAC7D,cAAc,EAAE,uBAAuB;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,uBAAuB;QAClC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,iBAAiB;yBAC7B;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,4BAA4B,GAA6B;IACpE,cAAc,EAAE,8BAA8B;IAC9C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,8BAA8B;QACzC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,wBAAwB;yBACpC;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,2BAA2B,GAA6B;IACnE,cAAc,EAAE,6BAA6B;IAC7C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,uBAAuB;yBACnC;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,eAAe,GAA6B;IACvD,cAAc,EAAE,iBAAiB;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,iBAAiB;QAC5B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,kBAAkB,GAA6B;IAC1D,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,sCAAsC,GAA6B;IAC9E,cAAc,EAAE,wCAAwC;IACxD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wCAAwC;QACnD,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,wBAAwB,GAA6B;IAChE,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,aAAa,GAA6B;IACrD,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,0BAA0B;iBACtC;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAA6B;IAC5D,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,oCACV,aAAa,CAAC,IAAI,CAAC,eAAe,KACrC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,8BAA8B,GAA6B;IACtE,cAAc,EAAE,gCAAgC;IAChD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gCAAgC;QAC3C,eAAe,EAAE;YACf,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,kBAAkB,EAAE;gBAClB,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,wBAAwB,EAAE;gBACxB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,0BAA0B;iBACtC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,8BAA8B,GAA6B;IACtE,cAAc,EAAE,gCAAgC;IAChD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gCAAgC;QAC3C,eAAe,EAAE;YACf,aAAa,EAAE;gBACb,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,iBAAiB,EAAE;gBACjB,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,kBAAkB,EAAE;gBAClB,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,wBAAwB,EAAE;gBACxB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,0BAA0B;iBACtC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,oCAAoC,GAA6B;IAC5E,cAAc,EAAE,sCAAsC;IACtD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sCAAsC;QACjD,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,kBAAkB,GAA6B;IAC1D,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,0BAA0B;iBACtC;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,yBAAyB,GAA6B;IACjE,cAAc,EAAE,2BAA2B;IAC3C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,2BAA2B;QACtC,eAAe,oCACV,kBAAkB,CAAC,IAAI,CAAC,eAAe,KAC1C,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,oBAAoB;yBAChC;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,wBAAwB,GAA6B;IAChE,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,2BAA2B;yBACvC;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,mBAAmB,GAA6B;IAC3D,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,0BAA0B,GAA6B;IAClE,cAAc,EAAE,4BAA4B;IAC5C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,4BAA4B;QACvC,eAAe,oCACV,mBAAmB,CAAC,IAAI,CAAC,eAAe,KAC3C,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,iBAAiB,GAA6B;IACzD,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,wBAAwB,GAA6B;IAChE,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,oCACV,iBAAiB,CAAC,IAAI,CAAC,eAAe,KACzC,UAAU,EAAE;gBACV,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF,EACD,kBAAkB,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,oBAAoB;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,EACD,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF,GACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,mBAAmB;yBAC/B;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,8BAA8B,GAA6B;IACtE,cAAc,EAAE,gCAAgC;IAChD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gCAAgC;QAC3C,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,0BAA0B;yBACtC;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,6BAA6B,GAA6B;IACrE,cAAc,EAAE,+BAA+B;IAC/C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,+BAA+B;QAC1C,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,uBAAuB,EAAE;gBACvB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,6BAA6B,GAA6B;IACrE,cAAc,EAAE,+BAA+B;IAC/C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,+BAA+B;QAC1C,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,uBAAuB,EAAE;gBACvB,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,IAAI,EAAE;gBACJ,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,aAAa,GAA6B;IACrD,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,YAAY;iBACxB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,4BAA4B,GAA6B;IACpE,cAAc,EAAE,8BAA8B;IAC9C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,8BAA8B;QACzC,eAAe,EAAE;YACf,uBAAuB,EAAE;gBACvB,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF,AAAO,IAAM,uBAAuB,GAA6B;IAC/D,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;iBAClB;aACF;SACF;KACF;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9gGF;;;;;;;;;AAYA,AAAO,IAAM,UAAU,GAAqC;IAC1D,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,gBAAgB,GAAmC;IAC9D,aAAa,EAAE,iBAAiB;IAChC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,kBAAkB;QAClC,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,gBAAgB,GAAmC;IAC9D,aAAa,EAAE,iBAAiB;IAChC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAE;YACX,OAAO,EAAE,iBAAiB;SAC3B;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,kBAAkB,GAAmC;IAChE,aAAa,EAAE,oBAAoB;IACnC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,qBAAqB;QACrC,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,cAAc,GAAqC;IAC9D,aAAa,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;IAC5C,MAAM,EAAE;QACN,cAAc,EAAE,gBAAgB;QAChC,IAAI,EAAE;YACJ,IAAI,EAAE,SAAS;SAChB;KACF;CACF,CAAC;AACF,AAAO,IAAM,UAAU,GAAmC;IACxD,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,QAAQ,GAAmC;IACtD,aAAa,EAAE,SAAS;IACxB,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,UAAU;QAC1B,WAAW,EAAE;YACX,OAAO,EAAE,iBAAiB;SAC3B;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,QAAQ,GAAmC;IACtD,aAAa,EAAE,SAAS;IACxB,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,UAAU;QAC1B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,UAAU,GAAmC;IACxD,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,UAAU,GAAqC;IAC1D,aAAa,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;IACxC,MAAM,EAAE;QACN,cAAc,EAAE,YAAY;QAC5B,WAAW,EAAE;YACX,gBAAgB,EAAE,EAAE;YACpB,gBAAgB,EAAE,CAAC;SACpB;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,iBAAiB,GAAmC;IAC/D,aAAa,EAAE,mBAAmB;IAClC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,qBAAqB;QACrC,WAAW,EAAE;YACX,OAAO,EAAE,gBAAgB;SAC1B;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,WAAW,GAAmC;IACzD,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,WAAW,EAAE;YACX,OAAO,EAAE,iBAAiB;SAC3B;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,WAAW,GAAmC;IACzD,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,aAAa,GAAmC;IAC3D,aAAa,EAAE,eAAe;IAC9B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,gBAAgB;QAChC,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,mBAAmB,GAAmC;IACjE,aAAa,EAAE,oBAAoB;IACnC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,sBAAsB;QACtC,WAAW,EAAE;YACX,OAAO,EAAE,gBAAgB;SAC1B;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,mBAAmB,GAAmC;IACjE,aAAa,EAAE,oBAAoB;IACnC,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,sBAAsB;QACtC,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,AAAO,IAAM,YAAY,GAAmC;IAC1D,aAAa,EAAE,cAAc;IAC7B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,cAAc;QAC9B,YAAY,EAAE,EAAE;QAChB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;IACD,YAAY,EAAE,IAAI;CACnB,CAAC;;ACxMF;;;;;;;;;AAYA,IAAM,WAAW,GAAG,sBAAsB,CAAC;AAC3C,IAAM,cAAc,GAAG,OAAO,CAAC;AAE/B;IAA2CC,+CAAsB;;;;;;;IAU/D,+BACE,WAAyE,EACzE,UAAkB,EAClB,OAAuC;QAHzC,iBA2BC;QAtBC,IAAI,UAAU,IAAI,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,IAAI,WAAW,IAAI,SAAS,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACtB,IAAM,gBAAgB,GAAGC,iCAAiC,EAAE,CAAC;YAC7D,OAAO,CAAC,SAAS,GAAM,WAAW,SAAI,cAAc,SAAI,gBAAkB,CAAC;SAC5E;QAED,QAAA,kBAAM,WAAW,EAAE,OAAO,CAAC,SAAC;QAE5B,KAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC;QAChC,KAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;QAC5D,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;KAChC;IACH,4BAAC;CAAA,CAtC0CC,sBAAsB,GAsChE;;ACrDD;;;;;;;;;AAgBA;IAA6BF,wCAAqB;;;;;;;IAOhD,wBACE,WAAyE,EACzE,UAAkB,EAClB,OAAuC;eAEvC,kBAAM,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC;KACxC;IAmDD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,GAA0B,EAC1B,OAE8C,EAC9C,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,GAAG,KAAA;YACH,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IA8CD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,GAAsB,EACtB,OAE8C,EAC9C,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,GAAG,KAAA;YACH,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IAwCD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,OAAyF,EACzF,QAA4D;QAE5D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IA8CD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,OAE8C,EAC9C,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IA4CD,+BAAM,GAAN,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,OAAkF,EAClF,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,mBAAmB,EACnB,QAAQ,CACyB,CAAC;KACrC;IAsCD,uCAAc,GAAd,UACE,YAAoB,EACpB,OAAe,EACf,OAEkD,EAClD,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,2BAA2B,EAC3B,QAAQ,CACiC,CAAC;KAC7C;IA+BD,gCAAO,GAAP,UACE,YAAoB,EACpB,OAEkD,EAClD,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,oBAAoB,EACpB,QAAQ,CAC0B,CAAC;KACtC;IA+CD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,OAAwF,EACxF,QAA2D;QAE3D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IA8CD,mCAAU,GAAV,UACE,YAAoB,EACpB,eAA2B,EAC3B,OAAkF,EAClF,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,uBAAuB,EACvB,QAAQ,CAC6B,CAAC;KACzC;IAkED,gCAAO,GAAP,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA+C,EAC/C,KAAiB,EACjB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,oBAAoB,EACpB,QAAQ,CAC0B,CAAC;KACtC;IA+DD,gCAAO,GAAP,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA+C,EAC/C,KAAiB,EACjB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,oBAAoB,EACpB,QAAQ,CAC0B,CAAC;KACtC;IA+DD,6BAAI,GAAJ,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA8C,EAC9C,KAAiB,EACjB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,iBAAiB,EACjB,QAAQ,CACuB,CAAC;KACnC;IAuED,+BAAM,GAAN,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA8C,EAC9C,MAAkB,EAClB,SAAqB,EACrB,OAAwF,EACxF,QAA2D;QAE3D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,MAAM,QAAA;YACN,SAAS,WAAA;YACT,OAAO,SAAA;SACR,EACD,mBAAmB,EACnB,QAAQ,CACyB,CAAC;KACrC;IA+DD,gCAAO,GAAP,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA+C,EAC/C,KAAiB,EACjB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,oBAAoB,EACpB,QAAQ,CAC0B,CAAC;KACtC;IA8DD,kCAAS,GAAT,UACE,YAAoB,EACpB,OAAe,EACf,UAAkB,EAClB,SAA+C,EAC/C,KAAiB,EACjB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,UAAU,YAAA;YACV,SAAS,WAAA;YACT,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IAmCD,uCAAc,GAAd,UACE,YAAoB,EACpB,OAEyD,EACzD,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,2BAA2B,EAC3B,QAAQ,CACiC,CAAC;KAC7C;IAuCD,sCAAa,GAAb,UACE,YAAoB,EACpB,OAAe,EACf,OAAyF,EACzF,QAA4D;QAE5D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,0BAA0B,EAC1B,QAAQ,CACgC,CAAC;KAC5C;IAuCD,wCAAe,GAAf,UACE,YAAoB,EACpB,OAAe,EACf,OAAsE,EACtE,QAAyC;QAEzC,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,4BAA4B,EAC5B,QAAQ,CACT,CAAC;KACH;IAwCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,OAAe,EACf,OAAkF,EAClF,QAAqD;QAErD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IA6CD,kCAAS,GAAT,UACE,YAAoB,EACpB,UAAkB,EAClB,KAAa,EACb,OAEiD,EACjD,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,KAAK,OAAA;YACL,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IAsCD,qCAAY,GAAZ,UACE,YAAoB,EACpB,UAAkB,EAClB,OAA4F,EAC5F,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,yBAAyB,EACzB,QAAQ,CAC+B,CAAC;KAC3C;IA6CD,qCAAY,GAAZ,UACE,YAAoB,EACpB,UAAkB,EAClB,aAAqB,EACrB,OAEiD,EACjD,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,aAAa,eAAA;YACb,OAAO,SAAA;SACR,EACD,yBAAyB,EACzB,QAAQ,CAC+B,CAAC;KAC3C;IA4CD,kCAAS,GAAT,UACE,YAAoB,EACpB,UAAkB,EAClB,aAAqB,EACrB,OAAqF,EACrF,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,aAAa,eAAA;YACb,OAAO,SAAA;SACR,EACD,sBAAsB,EACtB,QAAQ,CAC4B,CAAC;KACxC;IAiCD,mCAAU,GAAV,UACE,YAAoB,EACpB,OAEqD,EACrD,QAA4D;QAE5D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,uBAAuB,EACvB,QAAQ,CAC6B,CAAC;KACzC;IAsCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAEqD,EACrD,QAA4D;QAE5D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAgCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,OAE4D,EAC5D,QAAmE;QAEnE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsCD,yCAAgB,GAAhB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAA4F,EAC5F,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,6BAA6B,EAC7B,QAAQ,CACmC,CAAC;KAC/C;IAuCD,2CAAkB,GAAlB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAAsE,EACtE,QAAyC;QAEzC,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,+BAA+B,EAC/B,QAAQ,CACT,CAAC;KACH;IAsCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAAqF,EACrF,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IAsCD,qCAAY,GAAZ,UACE,YAAoB,EACpB,UAAkB,EAClB,OAA2F,EAC3F,QAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,yBAAyB,EACzB,QAAQ,CAC+B,CAAC;KAC3C;IAsCD,sCAAa,GAAb,UACE,YAAoB,EACpB,kBAA8B,EAC9B,OAAqF,EACrF,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,0BAA0B,EAC1B,QAAQ,CACgC,CAAC;KAC5C;IAgCD,wCAAe,GAAf,UACE,YAAoB,EACpB,OAE0D,EAC1D,QAAiE;QAEjE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,4BAA4B,EAC5B,QAAQ,CACkC,CAAC;KAC9C;IAuCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAE6D,EAC7D,QAAoE;QAEpE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsCD,+CAAsB,GAAtB,UACE,YAAoB,EACpB,QAAyB,EACzB,OAAiF,EACjF,QAAoD;QAEpD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,QAAQ,UAAA;YACR,OAAO,SAAA;SACR,EACD,mCAAmC,EACnC,QAAQ,CACyC,CAAC;KACrD;IAgCD,+CAAsB,GAAtB,UACE,YAAoB,EACpB,OAAiF,EACjF,QAAoD;QAEpD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,mCAAmC,EACnC,QAAQ,CACyC,CAAC;KACrD;IAgCD,kDAAyB,GAAzB,UACE,YAAoB,EACpB,OAAiF,EACjF,QAAoD;QAEpD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,sCAAsC,EACtC,QAAQ,CAC4C,CAAC;KACxD;IAiCD,8CAAqB,GAArB,UACE,YAAoB,EACpB,OAEgE,EAChE,QAAuE;QAEvE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,kCAAkC,EAClC,QAAQ,CACwC,CAAC;KACpD;IA4CD,6CAAoB,GAApB,UACE,YAAoB,EACpB,UAAkB,EAClB,QAAgB,EAChB,OAEiD,EACjD,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,QAAQ,UAAA;YACR,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IAsCD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAEiD,EACjD,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CAC0C,CAAC;KACtD;IAuCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAAqF,EACrF,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IAsCD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,UAAkB,EAClB,OAAqF,EACrF,QAAwD;QAExD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CAC0C,CAAC;KACtD;IAsCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAEyD,EACzD,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAiDD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,eAAuB,EACvB,wBAAgC,EAChC,OAEsD,EACtD,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,wBAAwB,0BAAA;YACxB,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsCD,+CAAsB,GAAtB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAE0D,EAC1D,QAAiE;QAEjE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,mCAAmC,EACnC,QAAQ,CACyC,CAAC;KACrD;IAsCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAA0F,EAC1F,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IA4CD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,eAAuB,EACvB,iBAA2C,EAC3C,OAA0F,EAC1F,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CAC0C,CAAC;KACtD;IA6CD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,eAAuB,EACvB,kBAA0B,EAC1B,OAEsD,EACtD,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IA4CD,uCAAc,GAAd,UACE,YAAoB,EACpB,eAAuB,EACvB,kBAA0B,EAC1B,OAA0F,EAC1F,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,2BAA2B,EAC3B,QAAQ,CACiC,CAAC;KAC7C;IA+CD,mDAA0B,GAA1B,UACE,YAAoB,EACpB,eAAuB,EACvB,qBAA8B,EAC9B,OAA6F,EAC7F,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,qBAAqB,uBAAA;YACrB,OAAO,SAAA;SACR,EACD,uCAAuC,EACvC,QAAQ,CAC6C,CAAC;KACzD;IAsCD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAA6F,EAC7F,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CAC0C,CAAC;KACtD;IAuCD,mDAA0B,GAA1B,UACE,YAAoB,EACpB,eAAuB,EACvB,OAA6F,EAC7F,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,uCAAuC,EACvC,QAAQ,CAC6C,CAAC;KACzD;IA6CD,yCAAgB,GAAhB,UACE,YAAoB,EACpB,eAAuB,EACvB,gBAA8B,EAC9B,OAEsD,EACtD,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,gBAAgB,kBAAA;YAChB,OAAO,SAAA;SACR,EACD,6BAA6B,EAC7B,QAAQ,CACmC,CAAC;KAC/C;IAsCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAE4D,EAC5D,QAAmE;QAEnE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsCD,2CAAkB,GAAlB,UACE,YAAoB,EACpB,uBAAmC,EACnC,OAA0F,EAC1F,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,uBAAuB,yBAAA;YACvB,OAAO,SAAA;SACR,EACD,+BAA+B,EAC/B,QAAQ,CACqC,CAAC;KACjD;IAkCD,+CAAsB,GAAtB,UACE,YAAoB,EACpB,OAEiE,EACjE,QAAwE;QAExE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,mCAAmC,EACnC,QAAQ,CACyC,CAAC;KACrD;IAuCD,8CAAqB,GAArB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAE6D,EAC7D,QAAoE;QAEpE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,kCAAkC,EAClC,QAAQ,CACwC,CAAC;KACpD;IAuCD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAAsE,EACtE,QAAyC;QAEzC,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CACT,CAAC;KACH;IAwCD,kDAAyB,GAAzB,UACE,YAAoB,EACpB,eAAuB,EACvB,OAA0F,EAC1F,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,eAAe,iBAAA;YACf,OAAO,SAAA;SACR,EACD,sCAAsC,EACtC,QAAQ,CAC4C,CAAC;KACxD;IA+BD,2CAAkB,GAAlB,UACE,YAAoB,EACpB,OAEsD,EACtD,QAA6D;QAE7D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,+BAA+B,EAC/B,QAAQ,CACqC,CAAC;KACjD;IAgCD,kDAAyB,GAAzB,UACE,YAAoB,EACpB,OAE6D,EAC7D,QAAoE;QAEpE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,OAAO,SAAA;SACR,EACD,sCAAsC,EACtC,QAAQ,CAC4C,CAAC;KACxD;IAsCD,iDAAwB,GAAxB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAA6F,EAC7F,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,qCAAqC,EACrC,QAAQ,CAC2C,CAAC;KACvD;IAuCD,mDAA0B,GAA1B,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAAsE,EACtE,QAAyC;QAEzC,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,uCAAuC,EACvC,QAAQ,CACT,CAAC;KACH;IAuCD,qDAA4B,GAA5B,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAAsF,EACtF,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,yCAAyC,EACzC,QAAQ,CAC+C,CAAC;KAC3D;IAsCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAA4F,EAC5F,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IAsCD,8CAAqB,GAArB,UACE,YAAoB,EACpB,mBAA+B,EAC/B,OAAsF,EACtF,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,mBAAmB,qBAAA;YACnB,OAAO,SAAA;SACR,EACD,kCAAkC,EAClC,QAAQ,CACwC,CAAC;KACpD;IAoCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAA6F,EAC7F,QAAgE;QAEhE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IAqCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAAsF,EACtF,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsDD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,UAAkB,EAClB,aAAqB,EACrB,iBAA0B,EAC1B,OAEkD,EAClD,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,UAAU,YAAA;YACV,aAAa,eAAA;YACb,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAqCD,6CAAoB,GAApB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAEkD,EAClD,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,iCAAiC,EACjC,QAAQ,CACuC,CAAC;KACnD;IA2CD,oDAA2B,GAA3B,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAAe,EACf,OAAsF,EACtF,QAAyD;QAEzD,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;YACP,OAAO,SAAA;SACR,EACD,wCAAwC,EACxC,QAAQ,CAC8C,CAAC;KAC1D;IAqCD,0CAAiB,GAAjB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAE4D,EAC5D,QAAmE;QAEnE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,8BAA8B,EAC9B,QAAQ,CACoC,CAAC;KAChD;IAsCD,iDAAwB,GAAxB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,OAEmE,EACnE,QAA0E;QAE1E,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,OAAO,SAAA;SACR,EACD,qCAAqC,EACrC,QAAQ,CAC2C,CAAC;KACvD;IA4CD,gDAAuB,GAAvB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,OAE+D,EAC/D,QAAsE;QAEtE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,oCAAoC,EACpC,QAAQ,CAC0C,CAAC;KACtD;IA6CD,oDAA2B,GAA3B,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,OAA4F,EAC5F,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,wCAAwC,EACxC,QAAQ,CAC8C,CAAC;KAC1D;IA2CD,4CAAmB,GAAnB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,OAE+D,EAC/D,QAAsE;QAEtE,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,gCAAgC,EAChC,QAAQ,CACsC,CAAC;KAClD;IA2CD,yCAAgB,GAAhB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,OAA4F,EAC5F,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,6BAA6B,EAC7B,QAAQ,CACmC,CAAC;KAC/C;IAmED,yCAAgB,GAAhB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,WAAmB,EACnB,OAA4B,EAC5B,cAAsB,EACtB,OAEwD,EACxD,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,WAAW,aAAA;YACX,OAAO,SAAA;YACP,cAAc,gBAAA;YACd,OAAO,SAAA;SACR,EACD,6BAA6B,EAC7B,QAAQ,CACmC,CAAC;KAC/C;IA2CD,4CAAmB,GAAnB,UACE,YAAoB,EACpB,kBAA0B,EAC1B,iBAAyB,EACzB,OAEwD,EACxD,QAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B;YACE,YAAY,cAAA;YACZ,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,gCAAgC,EAChC,QAAQ,CACsC,CAAC;KAClD;IACH,qBAAC;CAt/ID,CAA6B,qBAAqB,GAs/IjD;;AAGD,IAAM,UAAU,GAAG,IAAIG,mBAAmB,CAAC,OAAO,CAAC,CAAC;AACpD,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,wBAAwB;IAC9B,aAAa,EAAE,CAACC,YAAuB,EAAEC,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,GAAG,EAAE,KAAK;YACV,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;YAC/B,MAAM,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;YAC7B,aAAa,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;YAC3C,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;YACzB,KAAK,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;SAC5B;QACD,MAAM,oCACDC,mBAA2B,KAC9B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,iBAAiB;IACvB,aAAa,EAAE,CAACL,YAAuB,EAAEC,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,GAAG,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;YACvB,GAAG,EAAE,KAAK;YACV,aAAa,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;YAC3C,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDI,mBAA2B,KAC9B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEF,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,iBAAiB;IACvB,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACL,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEM,gBAAwB;SACrC;QACD,OAAO,EAAE;YACP,UAAU,EAAEH,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,+BAA+B;IACrC,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,MAAM,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;YAC7B,aAAa,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;YAC3C,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDQ,mBAA2B,KAC9B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEN,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mBAAmB,GAA2B;IAClD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,+BAA+B;IACrC,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEE,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,2BAA2B,GAA2B;IAC1D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,0BAA0B;IAChC,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACI,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEU,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEP,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oBAAoB,GAA2B;IACnD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,MAAM;IACZ,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEU,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEP,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,wBAAwB;IAC9B,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACL,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEW,eAAuB;SACpC;QACD,OAAO,EAAE;YACP,UAAU,EAAER,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,uBAAuB,GAA2B;IACtD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,cAAc;IACpB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,eAAe,EAAE,iBAAiB;SACnC;QACD,MAAM,oCACDY,oBAA4B,KAC/B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEV,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oBAAoB,GAA2B;IACnD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,OAAO;SACf;QACD,MAAM,oCACDa,uBAA+B,KAClC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEX,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oBAAoB,GAA2B;IACnD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,OAAO;SACf;QACD,MAAM,oCACDa,uBAA+B,KAClC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEX,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iBAAiB,GAA2B;IAChD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,OAAO;SACf;QACD,MAAM,oCACDe,iBAAyB,KAC5B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAED,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEX,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mBAAmB,GAA2B;IAClD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,sCAAsC;IAC5C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,MAAM,EAAE,QAAQ;YAChB,SAAS,EAAE,WAAW;SACvB;QACD,MAAM,oCACDgB,mBAA2B,KAC9B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,eAAuB;SACpC;QACD,OAAO,EAAE;YACP,UAAU,EAAEd,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oBAAoB,GAA2B;IACnD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,OAAO;SACf;QACD,MAAM,oCACDa,uBAA+B,KAClC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEX,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,yCAAyC;IAC/C,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,EAAEE,UAAqB,CAAC;IACpF,eAAe,EAAE,CAACP,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS,EAAE,WAAW;YACtB,KAAK,EAAE,OAAO;SACf;QACD,MAAM,oCACDa,uBAA+B,KAClC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEX,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,2BAA2B,GAA2B;IAC1D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,aAAa;IACnB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEkB,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAEf,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,0BAA0B,GAA2B;IACzD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,wBAAwB;IAC9B,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACL,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEM,gBAAwB;SACrC;QACD,OAAO,EAAE;YACP,UAAU,EAAEH,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,4BAA4B,GAA2B;IAC3D,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,wBAAwB;IAC9B,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACL,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAEG,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEO,QAAmB,CAAC;IAC7D,eAAe,EAAE,CAACL,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEE,SAAiB;SAC9B;QACD,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,CAACL,YAAuB,EAAEqB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACnB,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;YACzB,WAAW,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;YACvC,gBAAgB,EAAE,CAAC,SAAS,EAAE,kBAAkB,CAAC;SAClD;QACD,MAAM,oCACDoB,mBAA2B,KAC9B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,yBAAyB,GAA2B;IACxD,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACtB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEuB,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEpB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,yBAAyB,GAA2B;IACxD,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,EAAEE,aAAwB,CAAC;IAC1F,eAAe,EAAE,CAACxB,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,WAAW,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;YACvC,gBAAgB,EAAE,CAAC,SAAS,EAAE,kBAAkB,CAAC;YACjD,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDyB,sBAA8B,KACjC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEJ,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sBAAsB,GAA2B;IACrD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,EAAEE,aAAwB,CAAC;IAC1F,eAAe,EAAE,CAACxB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEqB,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,uBAAuB,GAA2B;IACtD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,SAAS;IACf,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE0B,gBAAwB;SACrC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACb,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE0B,gBAAwB;SACrC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,gBAAgB;IACtB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE2B,uBAA+B;SAC5C;QACD,OAAO,EAAE;YACP,UAAU,EAAExB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,6BAA6B,GAA2B;IAC5D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,8BAA8B;IACpC,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACtB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEuB,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEpB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,+BAA+B,GAA2B;IAC9D,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,8BAA8B;IACpC,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACtB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAEG,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,sCAAsC;IAC5C,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACtB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEqB,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,yBAAyB,GAA2B;IACxD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,8BAA8B;IACpC,aAAa,EAAE,CAACL,YAAuB,EAAEwB,WAAsB,CAAC;IAChE,eAAe,EAAE,CAACtB,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE4B,kBAA0B;SACvC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,0BAA0B,GAA2B;IACzD,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,iBAAiB;IACvB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,kBAAkB,EAAE,oBAAoB;SACzC;QACD,MAAM,oCACD6B,uBAA+B,KAClC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAER,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,4BAA4B,GAA2B;IAC3D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,cAAc;IACpB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAEqB,cAAyB,EAAE9B,UAAqB,CAAC;IAC1F,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE+B,qBAA6B;SAC1C;QACD,OAAO,EAAE;YACP,UAAU,EAAE5B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,iCAAiC;IACvC,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEiC,wBAAgC;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAE9B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mCAAmC,GAA2B;IAClE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE,UAAU;QACzB,MAAM,oCACDkC,QAAgB,KACnB,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEA,QAAgB;SAC7B;QACD,OAAO,EAAE;YACP,UAAU,EAAE/B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mCAAmC,GAA2B;IAClE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEkC,QAAgB;SAC7B;QACD,OAAO,EAAE;YACP,UAAU,EAAE/B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sCAAsC,GAA2B;IACrE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEkC,QAAgB;SAC7B;QACD,OAAO,EAAE;YACP,UAAU,EAAE/B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,kCAAkC,GAA2B;IACjE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,sBAAsB;IAC5B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEmC,2BAAmC;SAChD;QACD,OAAO,EAAE;YACP,UAAU,EAAEhC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEsC,UAAqB,CAAC;IAC/D,eAAe,EAAE,CAACpC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,QAAQ,EAAE,UAAU;YACpB,WAAW,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;YACvC,mBAAmB,EAAE,CAAC,SAAS,EAAE,qBAAqB,CAAC;YACvD,UAAU,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;SACtC;QACD,MAAM,oCACDqC,8BAAsC,KACzC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAEnC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEsC,UAAqB,CAAC;IAC/D,eAAe,EAAE,CAACpC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,QAAQ,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;YACjC,WAAW,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;YACvC,mBAAmB,EAAE,CAAC,SAAS,EAAE,qBAAqB,CAAC;YACvD,UAAU,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;SACtC;QACD,MAAM,oCACDuC,iCAAyC,KAC5C,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAED,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAEnC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEsC,UAAqB,CAAC;IAC/D,eAAe,EAAE,CAACpC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEsC,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAEnC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEsC,UAAqB,CAAC;IAC/D,eAAe,EAAE,CAACpC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEsC,YAAoB;SACjC;QACD,OAAO,EAAE;YACP,UAAU,EAAEnC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAE0C,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAACxC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,iBAAiB,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;YACnD,qBAAqB,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC;YAC3D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDyC,2BAAmC,KACtC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAE0C,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAACxC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,wBAAwB,EAAE,0BAA0B;YACpD,QAAQ,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;YACjC,iBAAiB,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;YACnD,qBAAqB,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC;YAC3D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACD2C,2BAAmC,KACtC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEC,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mCAAmC,GAA2B;IAClE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,0CAA0C;IAChD,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAACvB,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE+B,qBAA6B;SAC1C;QACD,OAAO,EAAE;YACP,UAAU,EAAE5B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE6C,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAE1C,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE,mBAAmB;QAClC,MAAM,oCACD6C,iBAAyB,KAC5B,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEA,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAE1C,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,uDAAuD;IAC7D,aAAa,EAAE;QACbL,YAAuB;QACvBkC,gBAA2B;QAC3Bc,kBAA6B;KAC9B;IACD,eAAe,EAAE,CAAC9C,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,iBAAiB,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;YACnD,qBAAqB,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC;YAC3D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACD+C,2BAAmC,KACtC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEH,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,2BAA2B,GAA2B;IAC1D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uDAAuD;IAC7D,aAAa,EAAE;QACbL,YAAuB;QACvBkC,gBAA2B;QAC3Bc,kBAA6B;KAC9B;IACD,eAAe,EAAE,CAAC9C,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE4C,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,uCAAuC,GAA2B;IACtE,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,yCAAyC;IAC/C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,qBAAqB,EAAE,uBAAuB;SAC/C;QACD,MAAM,oCACDgD,mCAA2C,KAC9C,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEN,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,yCAAyC;IAC/C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE0C,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,uCAAuC,GAA2B;IACtE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,yCAAyC;IAC/C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE0C,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAEvC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,6BAA6B,GAA2B;IAC5D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,+CAA+C;IACrD,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,gBAAgB,EAAE,kBAAkB;YACpC,qBAAqB,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC;YAC3D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDiD,0BAAkC,KACrC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEL,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEkD,uBAA+B;SAC5C;QACD,OAAO,EAAE;YACP,UAAU,EAAE/C,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,+BAA+B,GAA2B;IAC9D,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,sBAAsB;IAC5B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,uBAAuB,EAAE,yBAAyB;SACnD;QACD,MAAM,oCACDmD,4BAAoC,KACvC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEP,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,mCAAmC,GAA2B;IAClE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,qBAAqB;IAC3B,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAEqB,cAAyB,EAAE9B,UAAqB,CAAC;IAC1F,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEoD,4BAAoC;SACjD;QACD,OAAO,EAAE;YACP,UAAU,EAAEjD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,kCAAkC,GAA2B;IACjE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEiC,wBAAgC;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAE9B,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,wCAAwC;IAC9C,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAEG,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sCAAsC,GAA2B;IACrE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,gDAAgD;IACtD,aAAa,EAAE,CAACL,YAAuB,EAAEkC,gBAA2B,CAAC;IACrE,eAAe,EAAE,CAAChC,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE4C,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAEzC,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,+BAA+B,GAA2B;IAC9D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,SAAS;IACf,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEqD,iBAAyB;SACtC;QACD,OAAO,EAAE;YACP,UAAU,EAAElD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,sCAAsC,GAA2B;IACrE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,gBAAgB;IACtB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACW,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEsD,wBAAgC;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAEnD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,qCAAqC,GAA2B;IACpE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEwD,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAErD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,uCAAuC,GAA2B;IACtE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAEG,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,yCAAyC,GAA2B;IACxE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,+CAA+C;IACrD,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEyD,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,uCAAuC;IAC7C,aAAa,EAAE,CAACL,YAAuB,EAAE4D,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAAC1D,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE2D,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAExD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,kCAAkC,GAA2B;IACjE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,iBAAiB;IACvB,aAAa,EAAE,CAACL,YAAuB,CAAC;IACxC,eAAe,EAAE,CAACE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,mBAAmB,EAAE,qBAAqB;SAC3C;QACD,MAAM,oCACD4D,wBAAgC,KACnC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEH,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEwD,oBAA4B;SACzC;QACD,OAAO,EAAE;YACP,UAAU,EAAErD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEyD,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,UAAU,EAAE,YAAY;YACxB,aAAa,EAAE,eAAe;YAC9B,iBAAiB,EAAE,mBAAmB;YACtC,kBAAkB,EAAE,CAAC,SAAS,EAAE,oBAAoB,CAAC;YACrD,wBAAwB,EAAE,CAAC,SAAS,EAAE,0BAA0B,CAAC;YACjE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACD6D,8BAAsC,KACzC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEJ,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,iCAAiC,GAA2B;IAChE,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,gCAAgC;IACtC,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,aAAa,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;YAC3C,iBAAiB,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;YACnD,kBAAkB,EAAE,CAAC,SAAS,EAAE,oBAAoB,CAAC;YACrD,wBAAwB,EAAE,CAAC,SAAS,EAAE,0BAA0B,CAAC;YACjE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACD8D,8BAAsC,KACzC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEL,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,wCAAwC,GAA2B;IACvE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,8CAA8C;IACpD,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAACvD,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,OAAO,EAAE,SAAS;SACnB;QACD,MAAM,oCACD+D,oCAA4C,KAC/C,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEN,aAAqB;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAEtD,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,8BAA8B,GAA2B;IAC7D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,oCAAoC;IAC1C,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAAC9C,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEgE,uBAA+B;SAC5C;QACD,OAAO,EAAE;YACP,UAAU,EAAE7D,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,qCAAqC,GAA2B;IACpE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,2CAA2C;IACjD,aAAa,EAAE,CAACL,YAAuB,EAAEyD,mBAA8B,CAAC;IACxE,eAAe,EAAE,CAAC9C,UAAqB,EAAET,UAAqB,CAAC;IAC/D,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEiE,8BAAsC;SACnD;QACD,OAAO,EAAE;YACP,UAAU,EAAE9D,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,oCAAoC,GAA2B;IACnE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,iEAAiE;IACvE,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEmE,0BAAkC;SAC/C;QACD,OAAO,EAAE;YACP,UAAU,EAAEhE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,wCAAwC,GAA2B;IACvE,UAAU,EAAE,MAAM;IAClB,IAAI,EAAE,yEAAyE;IAC/E,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEoE,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEjE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,gCAAgC,GAA2B;IAC/D,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,0DAA0D;IAChE,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEmE,0BAAkC;SAC/C;QACD,OAAO,EAAE;YACP,UAAU,EAAEhE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,6BAA6B,GAA2B;IAC5D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,0DAA0D;IAChE,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEoE,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEjE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,6BAA6B,GAA2B;IAC5D,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,0DAA0D;IAChE,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,WAAW,EAAE,aAAa;YAC1B,OAAO,EAAE,SAAS;YAClB,cAAc,EAAE,gBAAgB;YAChC,uBAAuB,EAAE,CAAC,SAAS,EAAE,yBAAyB,CAAC;YAC/D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDqE,6BAAqC,KACxC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAED,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEjE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,gCAAgC,GAA2B;IAC/D,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,0DAA0D;IAChE,aAAa,EAAE;QACbL,YAAuB;QACvByD,mBAA8B;QAC9BW,iBAA4B;KAC7B;IACD,eAAe,EAAE,CAAClE,UAAqB,CAAC;IACxC,WAAW,EAAE;QACX,aAAa,EAAE;YACb,WAAW,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;YACvC,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;YAC/B,cAAc,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;YAC7C,uBAAuB,EAAE,CAAC,SAAS,EAAE,yBAAyB,CAAC;YAC/D,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;SAC1B;QACD,MAAM,oCACDsE,6BAAqC,KACxC,QAAQ,EAAE,IAAI,GACf;KACF;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAEF,mBAA2B;SACxC;QACD,OAAO,EAAE;YACP,UAAU,EAAEjE,aAAqB;SAClC;KACF;IACD,UAAU,YAAA;CACX,CAAC;;ACxjMF;;AAGA,AAAO,IAAM,WAAW,GAAW,OAAO,CAAC;;ACH3C;AACA,AAUA;;;;;AAKA,SAAgB,kCAAkC,CAAC,UAA2B;IAC5E,IAAM,UAAU,GAAqB,IAAIoE,iCAAwB,EAAE,CAAC;IACpE,OAAO;QACL,MAAM,EAAE,UAAC,UAAyB,EAAE,OAA6B;YAC/D,OAAO,IAAI,kCAAkC,CAAC,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SAC5F;KACF,CAAC;CACH;AAED;IACE,iCAAmB,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;KAAK;IACnD,8BAAC;CAAA,IAAA;AAED;;;;;;;AAOA;IAAwD7E,4DAAiB;;;;;;;;;IAWvE,4CACE,UAAyB,EACzB,OAA6B,EACrB,UAA2B,EAC3B,UAA4B;QAJtC,YAME,kBAAM,UAAU,EAAE,OAAO,CAAC,SAC3B;QAJS,gBAAU,GAAV,UAAU,CAAiB;QAC3B,gBAAU,GAAV,UAAU,CAAkB;QAd9B,eAAS,GAAwC,SAAS,CAAC;;KAiBlE;IAEO,iEAAoB,GAA5B,UAA6B,gBAAwB;;;;;QAKnD,IAAI,iBAAiB,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QAGpD,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAC;;QAG5B,IAAI,QAAQ,GAAG,iBAAiB,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,KAAiB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAAtB,IAAI,IAAI,iBAAA;;YAEX,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,UAAU,EAAE;;gBAE9B,IAAI,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAClD,OAAO,QAAQ,CAAC;aACjB;SACF;QACD,OAAO,EAAE,CAAC;KACX;;;;;IAMY,wDAAW,GAAxB,UACE,WAAwB;;;;;;wBAExB,IAAI,CAAC,WAAW,CAAC,OAAO;4BAAE,WAAW,CAAC,OAAO,GAAG,IAAI8E,oBAAW,EAAE,CAAC;wBAE9D,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC;8BAEhC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAA,EAA3B,wBAA2B;;wBAE7B,WAAW,CAAC,IAAI,GAAG,EAAE,CAAC;;;;oBAGtB,qBAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAA;;;wBAA3C,SAA2C,CAAC;;4BAG/B,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAA;;wBAA1D,QAAQ,GAAG,SAA+C;8BAE1D,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAA,EAAtB,wBAAsB;wBACxB,WAAW,CAAC,IAAI,GAAG,YAAY,CAAC;wBAE5B,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;6BAE5D,gBAAgB,EAAhB,wBAAgB;wBACd,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;wBACvD,SAAS,GAAG,IAAI,uBAAuB,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAA;8BAE/D,IAAI,CAAC,SAAS,IAAI,SAAS,CAAA,EAA3B,wBAA2B;wBAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;wBAC3B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;wBAE1C,qBAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAA;;wBAA3C,SAA2C,CAAC;;4BAGhD,sBAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAC;4BAEjD,sBAAO,QAAQ,EAAC;;;;KAEnB;IAEa,gEAAmB,GAAjC,UAAkC,WAAwB;;;;;;wBACpD,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;8BAC/C,WAAW,KAAK,SAAS,CAAA,EAAzB,wBAAyB;wBACZ,qBAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAU,CAAC,MAAM,CAAC,EAAA;;wBAArE,WAAW,GAAG,CAAC,SAAsD,KAAK,SAAS,CAAC;wBACpF,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;;;wBAG9C,IAAI,WAAW,EAAE;4BACf,WAAW,CAAC,OAAO,CAAC,GAAG,CACrBC,kBAAS,CAAC,eAAe,CAAC,aAAa,EACvC,YAAU,WAAW,CAAC,KAAO,CAC9B,CAAC;yBACH;;;;;KACF;IACH,yCAAC;CArGD,CAAwDC,0BAAiB,GAqGxE;;ACzID;AACA,AAiCA;;;;AAIA,SAAe,MAAM,CAEnB,OAGM;IAHN,wBAAA,EAAA,YAGM;;;;;;oBAEA,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACjB,IAAI,GAAa,KAAK,KAAlB,EAAE,MAAM,GAAK,KAAK,OAAV,CAAW;oBAEzB,cAAc,GAAG,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC;oBAClD,IAAI,OAAO,CAAC,WAAW,EAAE;wBACvB,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;qBAClD;yBAEG,CAAC,KAAK,CAAC,SAAS,EAAhB,wBAAgB;oBACC,qBAAM,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,cAAc,CAAC,EAAA;;oBAAzD,UAAU,GAAG,SAA4C;oBAC/D,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;oBACvB,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;oBAC1B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE;wBACrC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;;;yBAGC,CAAC,KAAK,CAAC,WAAW,EAAlB,wBAAkB;;;;oBAElB,KAAA,KAAK,CAAA;oBAAU,qBAAM,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAAnE,GAAM,MAAM,GAAG,SAAoD,CAAC;oBACpE,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;;;;oBAEzB,IAAI,OAAK,CAAC,UAAU,KAAK,GAAG,EAAE;;wBAE5B,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;yBAAM,IAAI,OAAK,CAAC,UAAU,KAAK,GAAG,EAAE;wBACnC,KAAK,CAAC,KAAK,GAAG,OAAK,CAAC;wBACpB,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;;wBAIL,sBAAO,0BAA0B,CAAC,KAAK,CAAC,EAAC;;;;CAC1C;;;;;AAMD,SAAe,MAAM,CAEnB,CAAqC;;;YAErC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;;;CACtE;;;;AAKD,SAAS,QAAQ;IACf,OAAO,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC,CAAC;CACJ;;;;;AAMD,SAAgB,0BAA0B,CACxC,KAAkC;IAElC,OAAO;QACL,KAAK,qBACA,KAAK,CACT;QACD,MAAM,QAAA;QACN,MAAM,QAAA;QACN,QAAQ,UAAA;KACT,CAAC;CACH;;ACnHD;AACA,AAeA;;;AAGA;IAAqChF,yCAA+C;IAOlF,yBAAY,OAA+B;QAA3C,iBAmBC;QAlBS,IAAA,uBAAM,EAAE,mBAAI,EAAE,uCAAc,EAAE,yBAAmB,EAAnB,wCAAmB,EAAE,+BAAU,CAAa;QAElF,IAAI,KAA8C,CAAC;QAEnD,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QAED,IAAM,SAAS,GAAG,0BAA0B,mCACvC,KAAK,KACR,IAAI,MAAA;YACJ,cAAc,gBAAA;YACd,MAAM,QAAA,IACN,CAAC;QAEH,QAAA,kBAAM,SAAS,CAAC,SAAC;QAEjB,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;KAClC;;;;;IAMK,+BAAK,GAAX;;;gBACE,sBAAOiF,cAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAC;;;KACjC;IACH,sBAAC;CAnCD,CAAqCC,cAAM,GAmC1C;;ACtDD;AACA,AAiCA;;;;AAIA,SAAeC,QAAM,CAEnB,OAGM;IAHN,wBAAA,EAAA,YAGM;;;;;;oBAEA,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACjB,IAAI,GAAa,KAAK,KAAlB,EAAE,MAAM,GAAK,KAAK,OAAV,CAAW;oBAEzB,cAAc,GAAG,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC;oBAClD,IAAI,OAAO,CAAC,WAAW,EAAE;wBACvB,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;qBAClD;yBAEG,CAAC,KAAK,CAAC,SAAS,EAAhB,wBAAgB;;;;oBAEhB,KAAA,KAAK,CAAA;oBAAU,qBAAM,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAA5D,GAAM,MAAM,GAAG,SAA6C,CAAC;oBAC7D,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;;;;;;yBAEvB,CAAC,KAAK,CAAC,WAAW,EAAlB,wBAAkB;oBACpB,KAAA,KAAK,CAAA;oBAAU,qBAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAAvE,GAAM,MAAM,GAAG,SAAwD,CAAC;oBACxE,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;;;yBAIvB,CAAC,KAAK,CAAC,WAAW,EAAlB,yBAAkB;;;;oBAElB,KAAA,KAAK,CAAA;oBAAU,qBAAM,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAA5D,GAAM,MAAM,GAAG,SAA6C,CAAC;oBAC7D,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;;;;oBAEzB,IAAI,OAAK,CAAC,UAAU,KAAK,GAAG,EAAE;;wBAE5B,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;yBAAM,IAAI,OAAK,CAAC,UAAU,KAAK,GAAG,EAAE;wBACnC,KAAK,CAAC,KAAK,GAAG,OAAK,CAAC;wBACpB,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;;yBAIL,sBAAO,kCAAkC,CAAC,KAAK,CAAC,EAAC;;;;CAClD;;;;;AAMD,SAAeC,QAAM,CAEnB,CAAqC;;;YAErC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;;;CACtE;;;;AAKD,SAASC,UAAQ;IACf,OAAO,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC,CAAC;CACJ;;;;;AAMD,SAAgB,kCAAkC,CAChD,KAA0C;IAE1C,OAAO;QACL,KAAK,qBACA,KAAK,CACT;QACD,MAAM,UAAA;QACN,MAAM,UAAA;QACN,QAAQ,YAAA;KACT,CAAC;CACH;;ACrHD;AACA,AAkBA;;;AAGA;IAA6CrF,iDAG5C;IAOC,iCAAY,OAAuC;QAAnD,iBAmBC;QAlBS,IAAA,uBAAM,EAAE,mBAAI,EAAE,uCAAc,EAAE,yBAAmB,EAAnB,wCAAmB,EAAE,+BAAU,CAAa;QAElF,IAAI,KAAsD,CAAC;QAE3D,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QAED,IAAM,SAAS,GAAG,kCAAkC,mCAC/C,KAAK,KACR,IAAI,MAAA;YACJ,cAAc,gBAAA;YACd,MAAM,QAAA,IACN,CAAC;QAEH,QAAA,kBAAM,SAAS,CAAC,SAAC;QAEjB,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;KAClC;;;;;IAMK,uCAAK,GAAX;;;gBACE,sBAAOiF,cAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAC;;;KACjC;IACH,8BAAC;CAtCD,CAA6CC,cAAM,GAsClD;;SCzDe,uBAAuB,CACrC,UAAkB,EAClB,UAA8B;IAE9B,IAAI,OAAO,UAAU,IAAI,QAAQ,IAAI,EAAE,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;QACtE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;IAED,IAAI,OAAO,UAAU,IAAI,QAAQ,IAAI,EAAE,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;QACtE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;IAED,IAAI,OAAO,CAAC;IACZ,IAAI;QACF,OAAO,GAAGI,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,aAAW,UAAU,qBAAgB,UAAU,sBAAmB,CAAC,CAAC;KACrF;;IAGD,IAAI,QAAQ,GAAG,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACnD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QAClD,MAAM,IAAI,KAAK,CACb,aAAW,UAAU,qBAAgB,UAAU,kCAA6B,QAAQ,CAAC,MAAQ,CAC9F,CAAC;KACH;IAED,IAAI,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CACb,aAAW,UAAU,qBAAgB,UAAU,kCAA4B,UAAU,oBAAa,QAAQ,CAAC,CAAC,CAAC,OAAG,CACjH,CAAC;KACH;IAED,IAAI,QAAQ,GAAM,OAAO,CAAC,QAAQ,UAAK,OAAO,CAAC,IAAM,CAAC;IACtD,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;IAC9D,OAAO;QACL,QAAQ,UAAA;QACR,IAAI,MAAA;QACJ,OAAO,SAAA;KACR,CAAC;CACH;;ACtBD;;AAEA,IAAM,mBAAmB,GAAG,KAAK,CAAC;;;;AAKlC;;;;;;;;;;;;;;;;;;;;;;;;;IA6nBE,4BACE,GAAyB;IACzB,UAA2B,EAC3B,eAAqC;QAArC,gCAAA,EAAA,oBAAqC;QAErC,IAAM,OAAO,GAAG,4BAA0B,WAAa,CAAC;QACxD,IAAI,eAAe,CAAC,gBAAgB,EAAE;YACpC,eAAe,CAAC,gBAAgB,CAAC,eAAe,KAAK,SAAS;kBACvD,eAAe,CAAC,gBAAgB,CAAC,eAAe,SAAI,OAAS;kBAChE,OAAO,CAAC;SACb;aAAM;YACL,eAAe,CAAC,gBAAgB,GAAG;gBACjC,eAAe,EAAE,OAAO;aACzB,CAAC;SACH;QAED,IAAM,UAAU,GAAGC,0BAAiB,CAAC,UAAU,CAAC;cAC5C,kCAAkC,CAAC,UAAU,CAAC;cAC9CC,sBAAa,CAAC,UAAU,CAAC,CAAC;QAE9B,IAAM,uBAAuB,qCACxB,eAAe,GACf;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;gBACnB,gBAAgB,EAAE;oBAChB,kBAAkB,EAAE;wBAClB,sBAAsB;wBACtB,4BAA4B;wBAC5B,+BAA+B;qBAChC;iBACF;aACF;SACF,CACF,CAAC;QAEF,IAAM,QAAQ,GAAGC,kCAAyB,CAAC,uBAAuB,EAAE,UAAU,CAAC,CAAC;QAChF,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QAE5E,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,MAAM,GAAG,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B;aAAM,IAAI,GAAG,CAAC,GAAG,EAAE;YAClB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;YACnB,MAAM,GAAG,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;YACxD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;SAC9B;aAAM;YACL,MAAM,IAAI,KAAK,CACb,mFAAmF,CACpF,CAAC;SACH;QAED,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,IAAI,EAAE,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,EAAE,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QAED,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KAC/B;;;;;;;;;;;;;IArrBa,mCAAM,GAApB,UAAqB,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;;;;;;wBACxC,cAAc,GAAGC,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;8BAEnD,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,CAAA,EAA5B,wBAA4B;wBAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;4BAClC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;yBACtD;wBACW,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAClC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,EAC/E,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBALK,GAAG,GAAG,SAKX;wBACD,sBAAO,GAAG,CAAC,GAAI,EAAC;4BAEhB,sBAAO,IAAI,CAAC,GAAG,EAAC;;;;KAEnB;;;;;;;;;;;;;IAcY,oCAAO,GAApB,UACE,SAA8B,EAC9B,SAAqB,EACrB,OAA4B;QAA5B,wBAAA,EAAA,YAA4B;;;;;;wBAEtB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;6BAEpDC,eAAM,EAAN,wBAAM;wBACR,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;wBAAnC,SAAmC,CAAC;wBAEpC,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE;4BAChC,QAAQ,SAAS;gCACf,KAAK,QAAQ,EAAE;oCACb,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wCAC3D,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;qCAC/D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEnC,MAAM,GAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAEC,2BAA2B,EAAE,CAAC;oCAClE,SAAS,GAAGC,oBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oCAChE,sBAAO,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAC;iCAC9D;gCACD,KAAK,UAAU,EAAE;oCACf,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wCAC3D,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;qCAC/D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEjC,SAAS,GAAGA,oBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oCAChE,sBAAO,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAC;iCAC9D;6BACF;yBACF;;;;wBAMQ,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAChC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,SAAS,EACT,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KACtE;;;;;;;;;;;;;IAeY,oCAAO,GAApB,UACE,SAA8B,EAC9B,UAAsB,EACtB,OAA4B;QAA5B,wBAAA,EAAA,YAA4B;;;;;;wBAEtB,cAAc,GAAGH,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;;;;wBAI7C,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAChC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,UAAU,EACV,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,WAAA,EAAE,EAAC;;;;KACtE;;;;;;;;;;;;;IAcY,oCAAO,GAApB,UACE,SAA2B,EAC3B,GAAe,EACf,OAA4B;QAA5B,wBAAA,EAAA,YAA4B;;;;;;wBAEtB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;6BAEpDC,eAAM,EAAN,wBAAM;wBACR,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;wBAAnC,SAAmC,CAAC;wBAEpC,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE;4BAChC,QAAQ,SAAS;gCACf,KAAK,QAAQ,EAAE;oCACb,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wCAC3D,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;qCAC/D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEnC,MAAM,GAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAEC,2BAA2B,EAAE,CAAC;oCAClE,SAAS,GAAGC,oBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oCAC1D,sBAAO,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;iCACjE;gCACD,KAAK,UAAU,EAAE;oCACf,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wCAC3D,IAAI,CAAC,GAAG,EAAE,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;qCAC/D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEjC,SAAS,GAAGA,oBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oCAC1D,sBAAO,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;iCACjE;6BACF;yBACF;;;;wBAMQ,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAChC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,GAAG,EACH,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KACtE;;;;;;;;;;;;;IAcY,sCAAS,GAAtB,UACE,SAA2B,EAC3B,YAAwB,EACxB,OAA8B;QAA9B,wBAAA,EAAA,YAA8B;;;;;;wBAExB,cAAc,GAAGH,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;;;;wBAI/C,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAClC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,YAAY,EACZ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KAC3D;;;;;;;;;;;;;IAcY,iCAAI,GAAjB,UACE,SAA6B,EAC7B,MAAkB,EAClB,OAAyB;QAAzB,wBAAA,EAAA,YAAyB;;;;;;wBAEnB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;;;;wBAI1C,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAC7B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,MAAM,EACN,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KACtE;;;;;;;;;;;;;;IAeY,mCAAM,GAAnB,UACE,SAA6B,EAC7B,MAAkB,EAClB,SAAqB,EACrB,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;;;;;;wBAErB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;;;;wBAI1C,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACjC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,MAAM,EACN,SAAS,EACT,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBARD,QAAQ,GAAG,SAQV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KACpF;;;;;;;;;;;;;IAcY,qCAAQ,GAArB,UACE,SAA6B,EAC7B,IAAgB,EAChB,OAAyB;QAAzB,wBAAA,EAAA,YAAyB;;;;;;wBAEnB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;wBAGjD,KAAA,SAAS,CAAA;;iCACV,OAAO,EAAP,wBAAO;iCACP,QAAQ,EAAR,wBAAQ;iCACR,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCAKP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCAKP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;;;4BAZC,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,wBAAM;4BAKK,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,wBAAM;4BAKK,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,wBAAM;;wBACC;4BACP,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;yBACpD;;;;wBAKQ,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAC7B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,MAAM,EACN,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAPD,MAAM,GAAG,SAOR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;6BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAO,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KACtE;;;;;;;;;;;;;;IAeY,uCAAU,GAAvB,UACE,SAA6B,EAC7B,IAAgB,EAChB,SAAqB,EACrB,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;;;;;;wBAErB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;6BAEvDC,eAAM,EAAN,wBAAM;wBACR,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;wBAAnC,SAAmC,CAAC;wBAEpC,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE;4BAChC,QAAQ,SAAS;gCACf,KAAK,OAAO,EAAE;oCACZ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;wCAC1D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;qCAC9D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEjC,QAAQ,GAAGG,mBAAY,CAAC,QAAQ,CAAC,CAAC;oCACxC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oCACnC,QAAQ,CAAC,GAAG,EAAE,CAAC;oCAEf,sBAAO;4CACL,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4CACvD,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;yCACvB,EAAC;iCACH;gCACD,KAAK,OAAO,EAAE;oCACZ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;wCAC1D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;qCAC9D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEjC,QAAQ,GAAGA,mBAAY,CAAC,QAAQ,CAAC,CAAC;oCACxC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oCACnC,QAAQ,CAAC,GAAG,EAAE,CAAC;oCAEf,sBAAO;4CACL,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4CACvD,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;yCACvB,EAAC;iCACH;gCACD,KAAK,OAAO,EAAE;oCACZ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE;wCACzB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;qCACtD;oCAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;wCAC1D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;qCAC9D;oCAEG,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAEjC,QAAQ,GAAGA,mBAAY,CAAC,QAAQ,CAAC,CAAC;oCACxC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oCACnC,QAAQ,CAAC,GAAG,EAAE,CAAC;oCAEf,sBAAO;4CACL,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4CACvD,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;yCACvB,EAAC;iCACH;6BACF;yBACF;;;wBAIK,KAAA,SAAS,CAAA;;iCACV,OAAO,EAAP,wBAAO;iCACP,QAAQ,EAAR,wBAAQ;iCACR,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCAKP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCAKP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;iCACP,OAAO,EAAP,wBAAO;;;4BAZC,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,yBAAM;4BAKK,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,yBAAM;4BAKK,qBAAM,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;wBAE5C,yBAAM;;wBACC;4BACP,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;yBACpD;;;;wBAKQ,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAC/B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,SAAS,EACT,MAAM,EACN,SAAS,EACT,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBARD,MAAM,GAAG,SAQR,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;6BAGb,sBAAO,EAAE,MAAM,EAAE,MAAM,CAAC,KAAM,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAC;;;;KAC1D;;;;;;IAOa,mDAAsB,GAApC;;;;;;6BACM,CAAC,IAAI,CAAC,gBAAgB,EAAtB,wBAAsB;;;;wBAET,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAA5B,MAAM,GAAG,SAAmB;wBAChC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;;;;;;wBAEpB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;;;;;KAEhC;;;;;;IAOO,qCAAQ,GAAhB;QACE,IAAI,GAAG,CAAC;QACR,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE;YAChC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;SACpB;aAAM;YACL,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;SAChB;QAED,OAAO,GAAG,CAAC;KACZ;;;;;;;;IAyIO,uCAAU,GAAlB,UAAmB,UAAkB,EAAE,cAAmC;QACxE,IAAM,MAAM,GAAGC,qBAAS,EAAE,CAAC;QAC3B,OAAO,MAAM,CAAC,SAAS,CACrB,wBAAsB,UAAY,EAClC,cAAc,IAAI,cAAc,CAAC,WAAW,CAC7C,CAAC;KACH;;;;;;;;;IAUO,0CAAa,GAArB,UAAsB,IAAU,EAAE,OAAgC;QAAhC,wBAAA,EAAA,YAAgC;QAChE,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC5B,yCACK,OAAO,KACV,WAAW,oCACN,OAAO,CAAC,WAAW,KACtB,MAAM,EAAE,IAAI,OAEd;SACH;aAAM;YACL,OAAO,OAAO,CAAC;SAChB;KACF;IACH,yBAAC;CAAA,IAAA;AAED;;;;;AAKA,SAAS,YAAY,CAAC,MAAc;IAClC,IAAI,MAAM,IAAI,GAAG,EAAE;QACjB,OAAO,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;KAC9B;SAAM,IAAI,MAAM,GAAG,GAAG,EAAE;QACvB,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACpC;SAAM,IAAI,MAAM,GAAG,KAAK,EAAE;QACzB,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC;KACxD;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;CACF;;;;;;AAOD,SAAS,YAAY,CAAC,MAAkB,EAAE,QAAgB;IACxD,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;IAED,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;;IAGpC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,EAAE;QAC/B,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9C,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACrB,MAAM,GAAG,KAAK,CAAC;KAChB;;IAGD,IAAI,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEhD,IAAI,WAAW,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAE3D,IAAI,YAAY,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;IAC/C,YAAY,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;IAC3B,YAAY,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACnC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAEnD,OAAO,YAAY,CAAC;CACrB;;;;;;;AAQD,SAAgB,eAAe,CAAC,GAAe;IAC7C,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;IACD,IAAI,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAEzC,IAAI,UAAU,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACrE,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IAC7B,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IAE5C,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAElD,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAE1D,IAAI,WAAW,GAAG,kCAAkC,CAAC;IACrD,IAAI,SAAS,GAAG,8BAA8B,CAAC;;;;;;;;;;IAW/C,IAAI,YAAY,GAAG,WAAW,CAAC;IAC/B,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAErC,IAAI,KAAK,EAAE;QACT,KAAiB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;YAAnB,IAAI,IAAI,cAAA;YACX,YAAY,IAAI,IAAI,CAAC;YACrB,YAAY,IAAI,IAAI,CAAC;SACtB;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IACD,YAAY,IAAI,SAAS,CAAC;IAE1B,OAAO,YAAY,CAAC;CACrB;;;;;;AAOD,SAAe,UAAU,CAAC,SAAiB,EAAE,IAAgB;;;;;;yBACvDJ,eAAM,EAAN,wBAAM;oBACJ,IAAI,GAAGK,iBAAgB,CAAC,SAAS,CAAC,CAAC;oBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3B,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC3B,sBAAO,MAAM,EAAC;;0BAEV,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAA,EAA/C,wBAA+C;oBAC1C,KAAA,CAAA,KAAA,MAAM,EAAC,IAAI,CAAA;oBAAC,qBAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAA;wBAAlF,sBAAO,cAAY,SAA+D,EAAC,EAAC;wBAEpF,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;;;;CAGxE;;AC53BD;AACA,AA+IA;;AAEA,IAAMC,qBAAmB,GAAG,KAAK,CAAC;;;;;;;;AASlC;;;;;;;;;;;;;;;;;;;IA2CE,mBACE,QAAgB,EAChB,UAA2B,EAC3B,eAAqC;QAArC,gCAAA,EAAA,oBAAqC;;;;;;QA5BtB,iBAAY,GAAuB;YAClD,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;YAC9B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;YACpC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;SAC7C,CAAC;QAyBA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAM,OAAO,GAAG,4BAA0B,WAAa,CAAC;QACxD,IAAI,eAAe,CAAC,gBAAgB,EAAE;YACpC,eAAe,CAAC,gBAAgB,CAAC,eAAe,KAAK,SAAS;kBACvD,eAAe,CAAC,gBAAgB,CAAC,eAAe,SAAI,OAAS;kBAChE,OAAO,CAAC;SACb;aAAM;YACL,eAAe,CAAC,gBAAgB,GAAG;gBACjC,eAAe,EAAE,OAAO;aACzB,CAAC;SACH;QAED,IAAM,UAAU,GAAGV,0BAAiB,CAAC,UAAU,CAAC;cAC5C,kCAAkC,CAAC,UAAU,CAAC;cAC9CC,sBAAa,CAAC,UAAU,CAAC,CAAC;QAE9B,IAAM,uBAAuB,qCACxB,eAAe,GACf;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;gBACnB,gBAAgB,EAAE;oBAChB,kBAAkB,EAAE;wBAClB,sBAAsB;wBACtB,4BAA4B;wBAC5B,+BAA+B;qBAChC;iBACF;aACF;SACF,CACF,CAAC;QAEF,IAAM,QAAQ,GAAGC,kCAAyB,CAAC,uBAAuB,EAAE,UAAU,CAAC,CAAC;QAChF,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,UAAU,EAAEQ,qBAAmB,EAAE,QAAQ,CAAC,CAAC;KAC7E;;;;;;;;;IAUa,6BAAS,GAAvB,UAAwB,IAAY,EAAE,OAA8B;QAA9B,wBAAA,EAAA,YAA8B;;;;;;wBAC5D,cAAc,GAAGP,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;;;;wBAI7C,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAJD,QAAQ,GAAG,SAIV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAC3C;;;;;;;;;IAUa,qCAAiB,GAA/B,UACE,IAAY,EACZ,OAAsC;QAAtC,wBAAA,EAAA,YAAsC;;;;;;wBAEhC,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;;;;wBAIrD,qBAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAC5C,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAJD,QAAQ,GAAG,SAIV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAC3C;;;;;;;;;;;;;;;;;IAkBY,6BAAS,GAAtB,UACE,IAAY,EACZ,OAAgB,EAChB,OAA0B;;;;;;6BAEtB,OAAO,EAAP,wBAAO;wBACH,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC7D,OAAO,GAAyD,cAAc,QAAvE,EAAE,SAAS,GAA8C,cAAc,UAA5D,EAAa,OAAO,GAA0B,cAAc,UAAxC,EAAK,gBAAgB,gBAAK,cAAc,EAAhF,qCAA+D,CAAF,CAAoB;wBACjF,kBAAkB,qCACnB,gBAAgB,KACnB,aAAa,EAAE;gCACb,OAAO,SAAA;gCACP,SAAS,WAAA;gCACT,OAAO,SAAA;6BACR,GACF,CAAC;wBAEI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;wBAE1D,QAAQ,SAAmB,CAAC;;;;wBAGnB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,OAAO,EACP,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAC7C,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAEb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;4BAEzB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;;wBAA7E,QAAQ,GAAG,SAAkE;wBACnF,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAE7C;;;;;;;;;;;;;;;IAgBY,+BAAW,GAAxB,UAAyB,IAAY,EAAE,OAA4B;;;;;;6BAC7D,OAAO,EAAP,wBAAO;wBACH,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC7D,OAAO,GAAyD,cAAc,QAAvE,EAAE,SAAS,GAA8C,cAAc,UAA5D,EAAa,OAAO,GAA0B,cAAc,UAAxC,EAAK,gBAAgB,gBAAK,cAAc,EAAhF,qCAA+D,CAAF,CAAoB;wBACjF,kBAAkB,qCACnB,gBAAgB,KACnB,aAAa,EAAE;gCACb,OAAO,SAAA;gCACP,SAAS,WAAA;gCACT,OAAO,SAAA;6BACR,GACF,CAAC;wBAEI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;wBAE5D,QAAQ,SAAmB,CAAC;;;;wBAEnB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,OAAO,CAAC,GAAG,GAAG,QAAQ,GAAG,IAAI,EAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAC7C,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;4BAEzB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;;wBAA1E,QAAQ,GAAG,SAA+D;wBAChF,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAE7C;;;;;;;;;;;;;;;IAgBY,gCAAY,GAAzB,UAA0B,IAAY,EAAE,OAA6B;;;;;;6BAC/D,OAAO,EAAP,wBAAO;wBACH,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC7D,OAAO,GAAyD,cAAc,QAAvE,EAAE,SAAS,GAA8C,cAAc,UAA5D,EAAa,OAAO,GAA0B,cAAc,UAAxC,EAAK,gBAAgB,gBAAK,cAAc,EAAhF,qCAA+D,CAAF,CAAoB;wBACjF,kBAAkB,qCACnB,gBAAgB,KACnB,aAAa,EAAE;gCACb,OAAO,SAAA;gCACP,SAAS,WAAA;gCACT,OAAO,SAAA;6BACR,GACF,CAAC;wBAEI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;wBAE7D,QAAQ,SAAmB,CAAC;;;;wBAEnB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,OAAO,CAAC,GAAG,GAAG,SAAS,GAAG,KAAK,EAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAC7C,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;4BAEzB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;;wBAA3E,QAAQ,GAAG,SAAgE;wBACjF,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAE7C;;;;;;;;;;;;;;;;;;IAmBY,6BAAS,GAAtB,UACE,IAAY,EACZ,GAAe,EACf,OAAyB;;;;;;6BAErB,OAAO,EAAP,wBAAO;wBACH,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAEnE,OAAO,GAKL,cAAc,QALT,EACP,SAAS,GAIP,cAAc,UAJP,EACE,OAAO,GAGhB,cAAc,UAHE,EACC,GAAG,GAEpB,cAAc,kBAFM,EACnB,gBAAgB,gBACjB,cAAc,EANZ,0DAML,CADoB,CACF;wBACb,kBAAkB,qCACnB,gBAAgB,KACnB,aAAa,EAAE;gCACb,OAAO,SAAA;gCACP,SAAS,WAAA;gCACT,OAAO,SAAA;gCACP,GAAG,KAAA;6BACJ,GACF,CAAC;wBAEI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;wBAE1D,QAAQ,SAAmB,CAAC;;;;wBAEnB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,GAAG,EACH,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAC7C,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;4BAEzB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;;wBAAzE,QAAQ,GAAG,SAA8D;wBAC/E,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BY,kCAAc,GAA3B,UACE,IAAY,EACZ,OAAmC;QAAnC,wBAAA,EAAA,YAAmC;;;;;;wBAE7B,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,MAAM,GAAG,IAAI,eAAe,CAAC;4BACjC,IAAI,MAAA;4BACJ,MAAM,EAAE,IAAI,CAAC,YAAY;4BACzB,YAAY,EAAE,OAAO,CAAC,YAAY;4BAClC,UAAU,EAAE,OAAO,CAAC,UAAU;4BAC9B,cAAc,gBAAA;yBACf,CAAC,CAAC;;wBAGH,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;;wBAAnB,SAAmB,CAAC;wBAEpB,sBAAO,MAAM,EAAC;;;;KACf;;;;;;;;;;;;;;;;;;IAmBY,uCAAmB,GAAhC,UACE,IAAY,EACZ,UAAkB,EAClB,OAAoC;;;;;;6BAEhC,OAAO,EAAP,wBAAO;wBACH,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC7D,OAAO,GAAyD,cAAc,QAAvE,EAAE,SAAS,GAA8C,cAAc,UAA5D,EAAa,OAAO,GAA0B,cAAc,UAAxC,EAAK,gBAAgB,gBAAK,cAAc,EAAhF,qCAA+D,CAAF,CAAoB;wBACjF,kBAAkB,qCACnB,gBAAgB,KACnB,aAAa,EAAE;gCACb,OAAO,SAAA;gCACP,SAAS,WAAA;gCACT,OAAO,SAAA;6BACR,GACF,CAAC;wBAEI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,CAAC;wBAEpE,QAAQ,SAAmB,CAAC;;;;wBAGnB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,UAAU,EACV,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAC7C,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;4BAEzB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,EAAA;;wBAAhF,QAAQ,GAAG,SAAqE;wBACtF,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAE7C;;;;;;;;;;;;;;IAeY,0BAAM,GAAnB,UAAoB,IAAY,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;;;;;;wBACrD,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;;;;wBAI1C,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACjC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,EAAE,EACjD,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBALD,QAAQ,GAAG,SAKV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAC3C;;;;;;;;;;;;;;IAeY,iCAAa,GAA1B,UACE,IAAY,EACZ,OAAkC;QAAlC,wBAAA,EAAA,YAAkC;;;;;;wBAE5B,eAAe,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAChE,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;;;;wBAIlD,qBAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CACxC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,eAAe,CAAC,CAC1C,EAAA;;wBAJD,QAAQ,GAAG,SAIV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAC3C;;;;;;;;;;;;;;;;;IAkBY,mCAAe,GAA5B,UAA6B,IAAY,EAAE,OAAoC;QAApC,wBAAA,EAAA,YAAoC;;;;;;wBACvE,eAAe,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAChE,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;;;;wBAG/D,qBAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAC/B,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,eAAe,CAAC,CAC1C,EAAA;;wBAJD,SAIC,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;;;;;KAEd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BY,0CAAsB,GAAnC,UACE,IAAY,EACZ,OAA2C;QAA3C,wBAAA,EAAA,YAA2C;;;;;;wBAErC,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAE/D,MAAM,GAAG,IAAI,uBAAuB,CAAC;4BACzC,IAAI,MAAA;4BACJ,MAAM,EAAE,IAAI,CAAC,YAAY;4BACzB,YAAY,EAAE,OAAO,CAAC,YAAY;4BAClC,UAAU,EAAE,OAAO,CAAC,UAAU;4BAC9B,cAAc,EAAE,cAAc;yBAC/B,CAAC,CAAC;;wBAEH,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;;wBAAnB,SAAmB,CAAC;wBACpB,sBAAO,MAAM,EAAC;;;;KACf;;;;;;;;;;;;;;IAeY,6BAAS,GAAtB,UACE,IAAY,EACZ,OAA8B;QAA9B,wBAAA,EAAA,YAA8B;;;;;;wBAExB,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;;;;wBAI7C,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CACpC,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAJD,QAAQ,GAAG,SAIV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,QAAQ,CAAC,KAAK,EAAC;;;;KACvB;;;;;;;;;;;;;;;;IAiBY,oCAAgB,GAA7B,UACE,MAAkB,EAClB,OAAqC;QAArC,wBAAA,EAAA,YAAqC;;;;;;wBAE/B,cAAc,GAAGA,6CAAoC,CAAC,OAAO,CAAC,CAAC;wBAC/D,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;;;;wBAIpD,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CACrC,IAAI,CAAC,QAAQ,EACb,MAAM,EACN,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CACzC,EAAA;;wBAJD,QAAQ,GAAG,SAIV,CAAC;;;wBAEF,IAAI,CAAC,GAAG,EAAE,CAAC;;4BAGb,sBAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAC;;;;KAC3C;;;;;;;;;IAUc,mDAA+B,GAA9C,UACE,IAAY,EACZ,iBAA+B,EAC/B,OAA4C;;;;;;8BAExC,iBAAiB,CAAC,iBAAiB,IAAI,IAAI,CAAA,EAA3C,wBAA2C;wBACvC,eAAe,oBACnB,UAAU,EAAE,iBAAiB,CAAC,WAAW,IACtC,OAAO,CACX,CAAC;wBACyB,mCAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CACzD,IAAI,CAAC,QAAQ,EACb,IAAI,EACJ,eAAe,CAChB,GAAA;;wBAJK,kBAAkB,GAAG,SAI1B;wBACD,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC;4BAApE,gCAAoE;;wBAApE,SAAoE,CAAC;;;6BAGlE,iBAAiB,CAAC,iBAAiB;wBACb,mCAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CACzD,iBAAiB,CAAC,iBAAiB,EACnC,IAAI,EACJ,OAAO,CACR,GAAA;;wBAJK,kBAAkB,GAAG,SAI1B;wBACD,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC;4BAApE,gCAAoE;;wBAApE,SAAoE,CAAC;;4BAErE,yBAAM;;;;;;KAGX;;;;;;;;IASc,kDAA8B,GAA7C,UACE,IAAY,EACZ,OAA4C;;;;;;;wBAEtC,CAAC,GAAG,EAAE,CAAC;;;;wBAEY,KAAAQ,oBAAA,IAAI,CAAC,+BAA+B,CAAC,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;;;;;wBAA9D,IAAI,WAAA,CAAA;8BACI,EAAJ,aAAI;;;8BAAJ,kBAAI,CAAA;wBAAZ,IAAI;2DACP,IAAI;4BAAV,gCAAU;;wBAAV,SAAU,CAAC;;;wBADM,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;KAI1B;;;;;;;;;;;;;;;;IAiBM,+CAA2B,GAAlC,UACE,IAAY,EACZ,OAAgD;;QAFlD,iBAwBC;QAtBC,wBAAA,EAAA,YAAgD;QAEhD,IAAM,cAAc,GAAGR,6CAAoC,CAAC,OAAO,CAAC,CAAC;QACrE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,6BAA6B,EAAE,cAAc,CAAC,CAAC;QAC5E,IAAM,cAAc,qCACf,cAAc,GACd,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CAC5C,CAAC;QAEF,IAAM,IAAI,GAAG,IAAI,CAAC,8BAA8B,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAEvE,IAAI,CAAC,GAAG,EAAE,CAAC;QACX;gBACE,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;iBACpB;;YACD,GAAC,MAAM,CAAC,aAAa,IAArB;gBACE,OAAO,IAAI,CAAC;aACb;YACD,SAAM,GAAE,UAAC,QAA2B;gBAA3B,yBAAA,EAAA,aAA2B;gBAClC,OAAA,KAAI,CAAC,+BAA+B,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC;aAAA;eACtE;KACH;;;;;;;;IASc,4CAAwB,GAAvC,UACE,iBAA+B,EAC/B,OAAqC;;;;;;8BAEjC,iBAAiB,CAAC,iBAAiB,IAAI,IAAI,CAAA,EAA3C,wBAA2C;wBACvC,eAAe,oBACnB,UAAU,EAAE,iBAAiB,CAAC,WAAW,IACtC,OAAO,CACX,CAAC;wBACyB,mCAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,GAAA;;wBAA9E,kBAAkB,GAAG,SAAyD;wBACpF,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC;4BAApE,gCAAoE;;wBAApE,SAAoE,CAAC;;;6BAGlE,iBAAiB,CAAC,iBAAiB;wBACb,mCAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAClD,iBAAiB,CAAC,iBAAiB,EACnC,OAAO,CACR,GAAA;;wBAHK,kBAAkB,GAAG,SAG1B;wBACD,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC;4BAApE,gCAAoE;;wBAApE,SAAoE,CAAC;;4BAErE,yBAAM;;;;;;KAGX;;;;;;;IAQc,2CAAuB,GAAtC,UACE,OAAqC;;;;;;;wBAE/B,CAAC,GAAG,EAAE,CAAC;;;;wBAEY,KAAAQ,oBAAA,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;;;;;wBAAjD,IAAI,WAAA,CAAA;8BACI,EAAJ,aAAI;;;8BAAJ,kBAAI,CAAA;wBAAZ,IAAI;2DACP,IAAI;4BAAV,gCAAU;;wBAAV,SAAU,CAAC;;;wBADM,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;KAI1B;;;;;;;;;;;;;;;;IAiBM,wCAAoB,GAA3B,UACE,OAAyC;;QAD3C,iBAuBC;QAtBC,wBAAA,EAAA,YAAyC;QAEzC,IAAM,cAAc,GAAGR,6CAAoC,CAAC,OAAO,CAAC,CAAC;QACrE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,EAAE,cAAc,CAAC,CAAC;QACrE,IAAM,cAAc,qCACf,cAAc,GACd,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CAC5C,CAAC;QAEF,IAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;QAE1D,IAAI,CAAC,GAAG,EAAE,CAAC;QACX;gBACE,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;iBACpB;;YACD,GAAC,MAAM,CAAC,aAAa,IAArB;gBACE,OAAO,IAAI,CAAC;aACb;YACD,SAAM,GAAE,UAAC,QAA2B;gBAA3B,yBAAA,EAAA,aAA2B;gBAClC,OAAA,KAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,cAAc,CAAC;aAAA;eACzD;KACH;;;;;;;;IASc,uCAAmB,GAAlC,UACE,iBAA+B,EAC/B,OAAgC;;;;;;8BAE5B,iBAAiB,CAAC,iBAAiB,IAAI,IAAI,CAAA,EAA3C,wBAA2C;wBACvC,eAAe,oBACnB,UAAU,EAAE,iBAAiB,CAAC,WAAW,IACtC,OAAO,CACX,CAAC;wBACyB,mCAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,GAAA;;wBAArF,kBAAkB,GAAG,SAAgE;wBAC3F,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC;4BAAjE,gCAAiE;;wBAAjE,SAAiE,CAAC;;;6BAG/D,iBAAiB,CAAC,iBAAiB;wBACb,mCAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CACzD,iBAAiB,CAAC,iBAAiB,EACnC,OAAO,CACR,GAAA;;wBAHK,kBAAkB,GAAG,SAG1B;wBACD,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;6BAC9D,kBAAkB,CAAC,KAAK,EAAxB,wBAAwB;2DACpB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC;4BAAjE,gCAAiE;;wBAAjE,SAAiE,CAAC;;4BAElE,yBAAM;;;;;;KAGX;;;;;;;IAQc,sCAAkB,GAAjC,UACE,OAAgC;;;;;;;wBAE1B,CAAC,GAAG,EAAE,CAAC;;;;wBAEY,KAAAQ,oBAAA,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;;;;;wBAA5C,IAAI,WAAA,CAAA;8BACI,EAAJ,aAAI;;;8BAAJ,kBAAI,CAAA;wBAAZ,IAAI;2DACP,IAAI;4BAAV,gCAAU;;wBAAV,SAAU,CAAC;;;wBADM,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;KAI1B;;;;;;;;;;;;;;;;IAiBM,mCAAe,GAAtB,UACE,OAAoC;;QADtC,iBAuBC;QAtBC,wBAAA,EAAA,YAAoC;QAEpC,IAAM,cAAc,GAAGR,6CAAoC,CAAC,OAAO,CAAC,CAAC;QACrE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;QAEhE,IAAM,cAAc,qCACf,OAAO,GACP,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CAC5C,CAAC;QAEF,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAErD,IAAI,CAAC,GAAG,EAAE,CAAC;QACX;gBACE,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;iBACpB;;YACD,GAAC,MAAM,CAAC,aAAa,IAArB;gBACE,OAAO,IAAI,CAAC;aACb;YACD,SAAM,GAAE,UAAC,QAA2B;gBAA3B,yBAAA,EAAA,aAA2B;gBAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC;aAAA;eAC3F;KACH;;;;;;IAOO,uCAAmB,GAA3B,UAA4B,MAAoC;QAC9D,IAAM,SAAS,GAAG,MAAmB,CAAC;QACtC,IAAM,gBAAgB,GAAG,MAA0B,CAAC;QAEpD,IAAM,QAAQ,GAAGS,uBAA6B,CAC5C,MAAM,EACN,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS,CAC9C,CAAC;QAEF,IAAM,UAAU,GAAQ,SAAS,CAAC,UAAU,IAAI,EAAE,CAAC;QACnD,OAAO,SAAS,CAAC,UAAU,CAAC;QAE5B,IAAI,YAAY,GAA6B;YAC3C,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,EAAE,EAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS;YACjD,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,aAAa,EAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS;YAC/D,OAAO,EAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS;YACtD,UAAU,iDACR,EAAE,EAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS,EACjD,IAAI,EAAE,QAAQ,CAAC,IAAI,EACnB,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ,IACxB,SAAS,GACT,QAAQ,GACR,UAAU,CACd;SACF,CAAC;QAEF,IAAI,gBAAgB,CAAC,WAAW,EAAE;YAChC,YAAY,CAAC,UAAU,CAAC,SAAS,GAAG,gBAAgB,CAAC,WAAW,CAAC;YACjE,OAAQ,YAAY,CAAC,UAAkB,CAAC,WAAW,CAAC;SACrD;QAED,IAAI,UAAU,CAAC,QAAQ,EAAE;YACvB,OAAQ,YAAY,CAAC,UAAkB,CAAC,QAAQ,CAAC;SAClD;QACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,OAAQ,YAAY,CAAC,UAAkB,CAAC,OAAO,CAAC;SACjD;QACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,OAAQ,YAAY,CAAC,UAAkB,CAAC,OAAO,CAAC;SACjD;QACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,OAAQ,YAAY,CAAC,UAAkB,CAAC,OAAO,CAAC;SACjD;QAED,OAAO,YAAY,CAAC;KACrB;;;;;;IAOO,4CAAwB,GAAhC,UAAiC,OAAgB;QAC/C,IAAM,QAAQ,GAAGA,uBAA6B,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAEpE,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAE5C,IAAI,kBAAkB,kDACpB,EAAE,EAAE,OAAO,CAAC,GAAG,EACf,IAAI,EAAE,QAAQ,CAAC,IAAI,EACnB,SAAS,EAAG,UAAkB,CAAC,WAAW,EAC1C,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,SAAS,EAAE,UAAU,CAAC,OAAO,IAC1B,OAAO,GACP,QAAQ,GACR,OAAO,CAAC,UAAU,CACtB,CAAC;QAEF,IAAI,kBAAkB,CAAC,WAAW,EAAE;YAClC,OAAO,kBAAkB,CAAC,WAAW,CAAC;SACvC;QAED,IAAI,kBAAkB,CAAC,OAAO,EAAE;YAC9B,OAAO,kBAAkB,CAAC,OAAO,CAAC;SACnC;QACD,IAAI,kBAAkB,CAAC,OAAO,EAAE;YAC9B,OAAO,kBAAkB,CAAC,OAAO,CAAC;SACnC;QACD,IAAI,kBAAkB,CAAC,OAAO,EAAE;YAC9B,OAAO,kBAAkB,CAAC,OAAO,CAAC;SACnC;QAED,OAAO;YACL,GAAG,EAAE,OAAO;YACZ,EAAE,EAAE,OAAO,CAAC,GAAG;YACf,IAAI,EAAE,kBAAkB,CAAC,IAAI;YAC7B,UAAU,EAAE,kBAAkB;SAC/B,CAAC;KACH;;;;;;IAOO,+CAA2B,GAAnC,UAAoC,OAAgB;QAClD,IAAM,QAAQ,GAAGA,uBAA6B,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAEpE,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAE5C,IAAI,YAAY,kDACd,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,SAAS,EAAE,UAAU,CAAC,OAAO,EAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ,IACxB,OAAO,GACP,QAAQ,GACR,OAAO,CAAC,UAAU,CACtB,CAAC;QAEF,OAAO,YAAY,CAAC,UAAU,CAAC;QAE/B,IAAI,OAAO,CAAC,UAAW,CAAC,OAAO,EAAE;YAC/B,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,UAAW,CAAC,OAAO,CAAC;YACrD,OAAO,YAAY,CAAC,OAAO,CAAC;SAC7B;QAED,OAAO,YAAY,CAAC;KACrB;;;;;;;;IASO,8BAAU,GAAlB,UAAmB,UAAkB,EAAE,cAAmC;QACxE,IAAM,MAAM,GAAGJ,qBAAS,EAAE,CAAC;QAC3B,OAAO,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,cAAc,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;KACnF;;;;;;;;;IAUO,iCAAa,GAArB,UAAsB,IAAU,EAAE,OAAgC;QAAhC,wBAAA,EAAA,YAAgC;QAChE,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC5B,yCACK,OAAO,KACV,WAAW,oCACN,OAAO,CAAC,WAAW,KACtB,MAAM,EAAE,IAAI,OAEd;SACH;aAAM;YACL,OAAO,OAAO,CAAC;SAChB;KACF;IACH,gBAAC;CAAA;;;;;;"}